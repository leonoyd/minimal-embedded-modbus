
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000301 	.word	0x08000301
 8000008:	08000303 	.word	0x08000303
 800000c:	08000302 	.word	0x08000302
 8000010:	08000302 	.word	0x08000302
 8000014:	08000302 	.word	0x08000302
 8000018:	08000302 	.word	0x08000302
 800001c:	08000302 	.word	0x08000302
 8000020:	08000302 	.word	0x08000302
 8000024:	08000302 	.word	0x08000302
 8000028:	08000302 	.word	0x08000302
 800002c:	08000ecd 	.word	0x08000ecd
 8000030:	08000302 	.word	0x08000302
 8000034:	08000302 	.word	0x08000302
 8000038:	08000302 	.word	0x08000302
 800003c:	08000302 	.word	0x08000302
 8000040:	08000302 	.word	0x08000302
 8000044:	08000302 	.word	0x08000302
 8000048:	08000302 	.word	0x08000302
 800004c:	08000302 	.word	0x08000302
 8000050:	08000302 	.word	0x08000302
 8000054:	08000302 	.word	0x08000302
 8000058:	08000302 	.word	0x08000302
 800005c:	08000302 	.word	0x08000302
 8000060:	08000302 	.word	0x08000302
 8000064:	08000302 	.word	0x08000302
 8000068:	08000302 	.word	0x08000302
 800006c:	08006e25 	.word	0x08006e25
 8000070:	08006e65 	.word	0x08006e65
 8000074:	08006ea9 	.word	0x08006ea9
 8000078:	08006eed 	.word	0x08006eed
 800007c:	08006f31 	.word	0x08006f31
 8000080:	08006f71 	.word	0x08006f71
 8000084:	08006fb5 	.word	0x08006fb5
 8000088:	08000302 	.word	0x08000302
 800008c:	08000302 	.word	0x08000302
 8000090:	08000302 	.word	0x08000302
 8000094:	08000302 	.word	0x08000302
 8000098:	08000302 	.word	0x08000302
 800009c:	08000302 	.word	0x08000302
 80000a0:	08000302 	.word	0x08000302
 80000a4:	08000302 	.word	0x08000302
 80000a8:	08000302 	.word	0x08000302
 80000ac:	08000302 	.word	0x08000302
 80000b0:	080043bb 	.word	0x080043bb
 80000b4:	08000302 	.word	0x08000302
 80000b8:	08000302 	.word	0x08000302
 80000bc:	08000302 	.word	0x08000302
 80000c0:	08000302 	.word	0x08000302
 80000c4:	08000302 	.word	0x08000302
 80000c8:	08000302 	.word	0x08000302
 80000cc:	08000302 	.word	0x08000302
 80000d0:	08000302 	.word	0x08000302
 80000d4:	080046e5 	.word	0x080046e5
 80000d8:	080046f9 	.word	0x080046f9
 80000dc:	08000302 	.word	0x08000302
 80000e0:	08000302 	.word	0x08000302
 80000e4:	08000302 	.word	0x08000302
 80000e8:	08000302 	.word	0x08000302
 80000ec:	08000302 	.word	0x08000302
 80000f0:	08000302 	.word	0x08000302
 80000f4:	08000302 	.word	0x08000302
 80000f8:	08000302 	.word	0x08000302
 80000fc:	08006ff9 	.word	0x08006ff9
 8000100:	08000302 	.word	0x08000302
 8000104:	08000302 	.word	0x08000302
 8000108:	08000302 	.word	0x08000302
 800010c:	08000302 	.word	0x08000302
 8000110:	08000302 	.word	0x08000302
 8000114:	08000302 	.word	0x08000302
 8000118:	08000302 	.word	0x08000302
 800011c:	08000302 	.word	0x08000302
 8000120:	08004b4d 	.word	0x08004b4d
 8000124:	08004b8d 	.word	0x08004b8d
 8000128:	08004bd1 	.word	0x08004bd1
 800012c:	08004c15 	.word	0x08004c15
 8000130:	08004c59 	.word	0x08004c59
 8000134:	08000302 	.word	0x08000302
 8000138:	08000302 	.word	0x08000302
 800013c:	08000302 	.word	0x08000302
 8000140:	08000302 	.word	0x08000302
 8000144:	08000302 	.word	0x08000302
 8000148:	08000302 	.word	0x08000302
 800014c:	08005905 	.word	0x08005905
 8000150:	08004c99 	.word	0x08004c99
 8000154:	08004cdd 	.word	0x08004cdd
 8000158:	08004d21 	.word	0x08004d21
 800015c:	08002d35 	.word	0x08002d35
 8000160:	08000302 	.word	0x08000302
 8000164:	08000302 	.word	0x08000302
 8000168:	08000302 	.word	0x08000302
 800016c:	08000302 	.word	0x08000302
 8000170:	08000302 	.word	0x08000302
 8000174:	08000302 	.word	0x08000302
 8000178:	08000302 	.word	0x08000302
 800017c:	08000302 	.word	0x08000302
 8000180:	08000302 	.word	0x08000302
 8000184:	08000302 	.word	0x08000302
 8000188:	08000302 	.word	0x08000302
 800018c:	08000302 	.word	0x08000302
 8000190:	08000302 	.word	0x08000302
 8000194:	08000302 	.word	0x08000302
 8000198:	08000302 	.word	0x08000302
 800019c:	08000302 	.word	0x08000302
 80001a0:	08000302 	.word	0x08000302
 80001a4:	08000302 	.word	0x08000302
 80001a8:	08000302 	.word	0x08000302
 80001ac:	08000302 	.word	0x08000302
 80001b0:	08000302 	.word	0x08000302
 80001b4:	08000302 	.word	0x08000302
 80001b8:	08000302 	.word	0x08000302
 80001bc:	08000302 	.word	0x08000302
 80001c0:	08000302 	.word	0x08000302
 80001c4:	08000302 	.word	0x08000302
 80001c8:	08000302 	.word	0x08000302
 80001cc:	08000302 	.word	0x08000302
 80001d0:	08000302 	.word	0x08000302
 80001d4:	08000302 	.word	0x08000302
 80001d8:	08000302 	.word	0x08000302
 80001dc:	08000302 	.word	0x08000302

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4839      	ldr	r0, [pc, #228]	; (80002c8 <endfiniloop+0x6>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4838      	ldr	r0, [pc, #224]	; (80002cc <endfiniloop+0xa>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4838      	ldr	r0, [pc, #224]	; (80002d0 <endfiniloop+0xe>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001fa:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80001fe:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 8000202:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 8000206:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800020a:	6008      	str	r0, [r1, #0]
                dsb
 800020c:	f3bf 8f4f 	dsb	sy
                isb
 8000210:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 8000214:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 8000218:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 800021c:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 8000220:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000224:	6008      	str	r0, [r1, #0]
                dsb
 8000226:	f3bf 8f4f 	dsb	sy
                isb
 800022a:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 800022e:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 8000232:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 8000236:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 800023a:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800023e:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 8000240:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 8000242:	f380 8814 	msr	CONTROL, r0
                isb
 8000246:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 800024a:	f007 fe24 	bl	8007e96 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 800024e:	f002 fee7 	bl	8003020 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000252:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000256:	491f      	ldr	r1, [pc, #124]	; (80002d4 <endfiniloop+0x12>)
                ldr     r2, =__main_stack_end__
 8000258:	4a1b      	ldr	r2, [pc, #108]	; (80002c8 <endfiniloop+0x6>)

0800025a <msloop>:
msloop:
                cmp     r1, r2
 800025a:	4291      	cmp	r1, r2
                itt     lo
 800025c:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800025e:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000262:	e7fa      	bcc.n	800025a <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000264:	491c      	ldr	r1, [pc, #112]	; (80002d8 <endfiniloop+0x16>)
                ldr     r2, =__process_stack_end__
 8000266:	4a19      	ldr	r2, [pc, #100]	; (80002cc <endfiniloop+0xa>)

08000268 <psloop>:
psloop:
                cmp     r1, r2
 8000268:	4291      	cmp	r1, r2
                itt     lo
 800026a:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026c:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 8000270:	e7fa      	bcc.n	8000268 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 8000272:	491a      	ldr	r1, [pc, #104]	; (80002dc <endfiniloop+0x1a>)
                ldr     r2, =_data_start
 8000274:	4a1a      	ldr	r2, [pc, #104]	; (80002e0 <endfiniloop+0x1e>)
                ldr     r3, =_data_end
 8000276:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <endfiniloop+0x22>)

08000278 <dloop>:
dloop:
                cmp     r2, r3
 8000278:	429a      	cmp	r2, r3
                ittt    lo
 800027a:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 800027c:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 8000280:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 8000284:	e7f8      	bcc.n	8000278 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000286:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000288:	4917      	ldr	r1, [pc, #92]	; (80002e8 <endfiniloop+0x26>)
                ldr     r2, =_bss_end
 800028a:	4a18      	ldr	r2, [pc, #96]	; (80002ec <endfiniloop+0x2a>)

0800028c <bloop>:
bloop:
                cmp     r1, r2
 800028c:	4291      	cmp	r1, r2
                itt     lo
 800028e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000290:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 8000294:	e7fa      	bcc.n	800028c <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000296:	f007 fe0d 	bl	8007eb4 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 800029a:	f007 fe02 	bl	8007ea2 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 800029e:	4c14      	ldr	r4, [pc, #80]	; (80002f0 <endfiniloop+0x2e>)
                ldr     r5, =__init_array_end
 80002a0:	4d14      	ldr	r5, [pc, #80]	; (80002f4 <endfiniloop+0x32>)

080002a2 <initloop>:
initloop:
                cmp     r4, r5
 80002a2:	42ac      	cmp	r4, r5
                bge     endinitloop
 80002a4:	da03      	bge.n	80002ae <endinitloop>
                ldr     r1, [r4], #4
 80002a6:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002aa:	4788      	blx	r1
                b       initloop
 80002ac:	e7f9      	b.n	80002a2 <initloop>

080002ae <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80002ae:	f001 ff4f 	bl	8002150 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80002b2:	4c11      	ldr	r4, [pc, #68]	; (80002f8 <endfiniloop+0x36>)
                ldr     r5, =__fini_array_end
 80002b4:	4d11      	ldr	r5, [pc, #68]	; (80002fc <endfiniloop+0x3a>)

080002b6 <finiloop>:
finiloop:
                cmp     r4, r5
 80002b6:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80002b8:	da03      	bge.n	80002c2 <endfiniloop>
                ldr     r1, [r4], #4
 80002ba:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002be:	4788      	blx	r1
                b       finiloop
 80002c0:	e7f9      	b.n	80002b6 <finiloop>

080002c2 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80002c2:	f007 bdf4 	b.w	8007eae <__default_exit>
 80002c6:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 80002c8:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002cc:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002d0:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002d4:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002d8:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 80002dc:	08009320 	.word	0x08009320
                ldr     r2, =_data_start
 80002e0:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 80002e4:	20000840 	.word	0x20000840
                ldr     r1, =_bss_start
 80002e8:	20000840 	.word	0x20000840
                ldr     r2, =_bss_end
 80002ec:	200013c8 	.word	0x200013c8
                ldr     r4, =__init_array_start
 80002f0:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002f4:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_start
 80002f8:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end
 80002fc:	080001e0 	.word	0x080001e0

08000300 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000300:	e76e      	b.n	80001e0 <_crt0_entry>

08000302 <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
        bl          _unhandled_exception
 8000302:	f000 f800 	bl	8000306 <_unhandled_exception>

08000306 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 8000306:	e7fe      	b.n	8000306 <_unhandled_exception>

08000308 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
 800030c:	ed2d 8a10 	vpush	{s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000310:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000314:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 8000316:	469d      	mov	sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
 8000318:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800031c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000320 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000320:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000322:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000326:	4628      	mov	r0, r5
                blx     r4
 8000328:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 800032a:	2000      	movs	r0, #0
                bl      chThdExit
 800032c:	f002 fb8e 	bl	8002a4c <chThdExit>

08000330 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000330:	f003 fbc0 	bl	8003ab4 <chSchDoReschedule>

08000334 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000334:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000336:	e7fe      	b.n	8000336 <_port_exit_from_isr+0x2>

08000338 <__aeabi_drsub>:
 8000338:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800033c:	e002      	b.n	8000344 <__adddf3>
 800033e:	bf00      	nop

08000340 <__aeabi_dsub>:
 8000340:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000344 <__adddf3>:
 8000344:	b530      	push	{r4, r5, lr}
 8000346:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800034a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800034e:	ea94 0f05 	teq	r4, r5
 8000352:	bf08      	it	eq
 8000354:	ea90 0f02 	teqeq	r0, r2
 8000358:	bf1f      	itttt	ne
 800035a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800035e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000362:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000366:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800036a:	f000 80e2 	beq.w	8000532 <__adddf3+0x1ee>
 800036e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000372:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000376:	bfb8      	it	lt
 8000378:	426d      	neglt	r5, r5
 800037a:	dd0c      	ble.n	8000396 <__adddf3+0x52>
 800037c:	442c      	add	r4, r5
 800037e:	ea80 0202 	eor.w	r2, r0, r2
 8000382:	ea81 0303 	eor.w	r3, r1, r3
 8000386:	ea82 0000 	eor.w	r0, r2, r0
 800038a:	ea83 0101 	eor.w	r1, r3, r1
 800038e:	ea80 0202 	eor.w	r2, r0, r2
 8000392:	ea81 0303 	eor.w	r3, r1, r3
 8000396:	2d36      	cmp	r5, #54	; 0x36
 8000398:	bf88      	it	hi
 800039a:	bd30      	pophi	{r4, r5, pc}
 800039c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003ac:	d002      	beq.n	80003b4 <__adddf3+0x70>
 80003ae:	4240      	negs	r0, r0
 80003b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c0:	d002      	beq.n	80003c8 <__adddf3+0x84>
 80003c2:	4252      	negs	r2, r2
 80003c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c8:	ea94 0f05 	teq	r4, r5
 80003cc:	f000 80a7 	beq.w	800051e <__adddf3+0x1da>
 80003d0:	f1a4 0401 	sub.w	r4, r4, #1
 80003d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d8:	db0d      	blt.n	80003f6 <__adddf3+0xb2>
 80003da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003de:	fa22 f205 	lsr.w	r2, r2, r5
 80003e2:	1880      	adds	r0, r0, r2
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80003ec:	1880      	adds	r0, r0, r2
 80003ee:	fa43 f305 	asr.w	r3, r3, r5
 80003f2:	4159      	adcs	r1, r3
 80003f4:	e00e      	b.n	8000414 <__adddf3+0xd0>
 80003f6:	f1a5 0520 	sub.w	r5, r5, #32
 80003fa:	f10e 0e20 	add.w	lr, lr, #32
 80003fe:	2a01      	cmp	r2, #1
 8000400:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000404:	bf28      	it	cs
 8000406:	f04c 0c02 	orrcs.w	ip, ip, #2
 800040a:	fa43 f305 	asr.w	r3, r3, r5
 800040e:	18c0      	adds	r0, r0, r3
 8000410:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	d507      	bpl.n	800042a <__adddf3+0xe6>
 800041a:	f04f 0e00 	mov.w	lr, #0
 800041e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000422:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000426:	eb6e 0101 	sbc.w	r1, lr, r1
 800042a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800042e:	d31b      	bcc.n	8000468 <__adddf3+0x124>
 8000430:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000434:	d30c      	bcc.n	8000450 <__adddf3+0x10c>
 8000436:	0849      	lsrs	r1, r1, #1
 8000438:	ea5f 0030 	movs.w	r0, r0, rrx
 800043c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000440:	f104 0401 	add.w	r4, r4, #1
 8000444:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000448:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800044c:	f080 809a 	bcs.w	8000584 <__adddf3+0x240>
 8000450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000454:	bf08      	it	eq
 8000456:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800045a:	f150 0000 	adcs.w	r0, r0, #0
 800045e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000462:	ea41 0105 	orr.w	r1, r1, r5
 8000466:	bd30      	pop	{r4, r5, pc}
 8000468:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800046c:	4140      	adcs	r0, r0
 800046e:	eb41 0101 	adc.w	r1, r1, r1
 8000472:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000476:	f1a4 0401 	sub.w	r4, r4, #1
 800047a:	d1e9      	bne.n	8000450 <__adddf3+0x10c>
 800047c:	f091 0f00 	teq	r1, #0
 8000480:	bf04      	itt	eq
 8000482:	4601      	moveq	r1, r0
 8000484:	2000      	moveq	r0, #0
 8000486:	fab1 f381 	clz	r3, r1
 800048a:	bf08      	it	eq
 800048c:	3320      	addeq	r3, #32
 800048e:	f1a3 030b 	sub.w	r3, r3, #11
 8000492:	f1b3 0220 	subs.w	r2, r3, #32
 8000496:	da0c      	bge.n	80004b2 <__adddf3+0x16e>
 8000498:	320c      	adds	r2, #12
 800049a:	dd08      	ble.n	80004ae <__adddf3+0x16a>
 800049c:	f102 0c14 	add.w	ip, r2, #20
 80004a0:	f1c2 020c 	rsb	r2, r2, #12
 80004a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a8:	fa21 f102 	lsr.w	r1, r1, r2
 80004ac:	e00c      	b.n	80004c8 <__adddf3+0x184>
 80004ae:	f102 0214 	add.w	r2, r2, #20
 80004b2:	bfd8      	it	le
 80004b4:	f1c2 0c20 	rsble	ip, r2, #32
 80004b8:	fa01 f102 	lsl.w	r1, r1, r2
 80004bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c0:	bfdc      	itt	le
 80004c2:	ea41 010c 	orrle.w	r1, r1, ip
 80004c6:	4090      	lslle	r0, r2
 80004c8:	1ae4      	subs	r4, r4, r3
 80004ca:	bfa2      	ittt	ge
 80004cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d0:	4329      	orrge	r1, r5
 80004d2:	bd30      	popge	{r4, r5, pc}
 80004d4:	ea6f 0404 	mvn.w	r4, r4
 80004d8:	3c1f      	subs	r4, #31
 80004da:	da1c      	bge.n	8000516 <__adddf3+0x1d2>
 80004dc:	340c      	adds	r4, #12
 80004de:	dc0e      	bgt.n	80004fe <__adddf3+0x1ba>
 80004e0:	f104 0414 	add.w	r4, r4, #20
 80004e4:	f1c4 0220 	rsb	r2, r4, #32
 80004e8:	fa20 f004 	lsr.w	r0, r0, r4
 80004ec:	fa01 f302 	lsl.w	r3, r1, r2
 80004f0:	ea40 0003 	orr.w	r0, r0, r3
 80004f4:	fa21 f304 	lsr.w	r3, r1, r4
 80004f8:	ea45 0103 	orr.w	r1, r5, r3
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	f1c4 040c 	rsb	r4, r4, #12
 8000502:	f1c4 0220 	rsb	r2, r4, #32
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 f304 	lsl.w	r3, r1, r4
 800050e:	ea40 0003 	orr.w	r0, r0, r3
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	fa21 f004 	lsr.w	r0, r1, r4
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	f094 0f00 	teq	r4, #0
 8000522:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000526:	bf06      	itte	eq
 8000528:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800052c:	3401      	addeq	r4, #1
 800052e:	3d01      	subne	r5, #1
 8000530:	e74e      	b.n	80003d0 <__adddf3+0x8c>
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf18      	it	ne
 8000538:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053c:	d029      	beq.n	8000592 <__adddf3+0x24e>
 800053e:	ea94 0f05 	teq	r4, r5
 8000542:	bf08      	it	eq
 8000544:	ea90 0f02 	teqeq	r0, r2
 8000548:	d005      	beq.n	8000556 <__adddf3+0x212>
 800054a:	ea54 0c00 	orrs.w	ip, r4, r0
 800054e:	bf04      	itt	eq
 8000550:	4619      	moveq	r1, r3
 8000552:	4610      	moveq	r0, r2
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	ea91 0f03 	teq	r1, r3
 800055a:	bf1e      	ittt	ne
 800055c:	2100      	movne	r1, #0
 800055e:	2000      	movne	r0, #0
 8000560:	bd30      	popne	{r4, r5, pc}
 8000562:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000566:	d105      	bne.n	8000574 <__adddf3+0x230>
 8000568:	0040      	lsls	r0, r0, #1
 800056a:	4149      	adcs	r1, r1
 800056c:	bf28      	it	cs
 800056e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000578:	bf3c      	itt	cc
 800057a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800057e:	bd30      	popcc	{r4, r5, pc}
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000588:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800058c:	f04f 0000 	mov.w	r0, #0
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000596:	bf1a      	itte	ne
 8000598:	4619      	movne	r1, r3
 800059a:	4610      	movne	r0, r2
 800059c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a0:	bf1c      	itt	ne
 80005a2:	460b      	movne	r3, r1
 80005a4:	4602      	movne	r2, r0
 80005a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005aa:	bf06      	itte	eq
 80005ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b0:	ea91 0f03 	teqeq	r1, r3
 80005b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop

080005bc <__aeabi_ui2d>:
 80005bc:	f090 0f00 	teq	r0, #0
 80005c0:	bf04      	itt	eq
 80005c2:	2100      	moveq	r1, #0
 80005c4:	4770      	bxeq	lr
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d0:	f04f 0500 	mov.w	r5, #0
 80005d4:	f04f 0100 	mov.w	r1, #0
 80005d8:	e750      	b.n	800047c <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_i2d>:
 80005dc:	f090 0f00 	teq	r0, #0
 80005e0:	bf04      	itt	eq
 80005e2:	2100      	moveq	r1, #0
 80005e4:	4770      	bxeq	lr
 80005e6:	b530      	push	{r4, r5, lr}
 80005e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005f4:	bf48      	it	mi
 80005f6:	4240      	negmi	r0, r0
 80005f8:	f04f 0100 	mov.w	r1, #0
 80005fc:	e73e      	b.n	800047c <__adddf3+0x138>
 80005fe:	bf00      	nop

08000600 <__aeabi_f2d>:
 8000600:	0042      	lsls	r2, r0, #1
 8000602:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000606:	ea4f 0131 	mov.w	r1, r1, rrx
 800060a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800060e:	bf1f      	itttt	ne
 8000610:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000614:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000618:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800061c:	4770      	bxne	lr
 800061e:	f092 0f00 	teq	r2, #0
 8000622:	bf14      	ite	ne
 8000624:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e720      	b.n	800047c <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aedc 	beq.w	800042a <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6c1      	b.n	800042a <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b97a 	b.w	8000ec8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	9e08      	ldr	r6, [sp, #32]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d151      	bne.n	8000ca0 <__udivmoddi4+0xb4>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4617      	mov	r7, r2
 8000c00:	d96d      	bls.n	8000cde <__udivmoddi4+0xf2>
 8000c02:	fab2 fe82 	clz	lr, r2
 8000c06:	f1be 0f00 	cmp.w	lr, #0
 8000c0a:	d00b      	beq.n	8000c24 <__udivmoddi4+0x38>
 8000c0c:	f1ce 0c20 	rsb	ip, lr, #32
 8000c10:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c14:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c18:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c1c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c20:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c24:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c28:	0c25      	lsrs	r5, r4, #16
 8000c2a:	fbbc f8fa 	udiv	r8, ip, sl
 8000c2e:	fa1f f987 	uxth.w	r9, r7
 8000c32:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c36:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c3a:	fb08 f309 	mul.w	r3, r8, r9
 8000c3e:	42ab      	cmp	r3, r5
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x6c>
 8000c42:	19ed      	adds	r5, r5, r7
 8000c44:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c48:	f080 8123 	bcs.w	8000e92 <__udivmoddi4+0x2a6>
 8000c4c:	42ab      	cmp	r3, r5
 8000c4e:	f240 8120 	bls.w	8000e92 <__udivmoddi4+0x2a6>
 8000c52:	f1a8 0802 	sub.w	r8, r8, #2
 8000c56:	443d      	add	r5, r7
 8000c58:	1aed      	subs	r5, r5, r3
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c60:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c64:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c68:	fb00 f909 	mul.w	r9, r0, r9
 8000c6c:	45a1      	cmp	r9, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x98>
 8000c70:	19e4      	adds	r4, r4, r7
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c76:	f080 810a 	bcs.w	8000e8e <__udivmoddi4+0x2a2>
 8000c7a:	45a1      	cmp	r9, r4
 8000c7c:	f240 8107 	bls.w	8000e8e <__udivmoddi4+0x2a2>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	eba4 0409 	sub.w	r4, r4, r9
 8000c88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d061      	beq.n	8000d56 <__udivmoddi4+0x16a>
 8000c92:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c96:	2300      	movs	r3, #0
 8000c98:	6034      	str	r4, [r6, #0]
 8000c9a:	6073      	str	r3, [r6, #4]
 8000c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0xc8>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d054      	beq.n	8000d52 <__udivmoddi4+0x166>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	f040 808e 	bne.w	8000dda <__udivmoddi4+0x1ee>
 8000cbe:	42ab      	cmp	r3, r5
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xdc>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2d0>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb65 0503 	sbc.w	r5, r5, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	46ac      	mov	ip, r5
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d03f      	beq.n	8000d56 <__udivmoddi4+0x16a>
 8000cd6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b912      	cbnz	r2, 8000ce6 <__udivmoddi4+0xfa>
 8000ce0:	2701      	movs	r7, #1
 8000ce2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ce6:	fab7 fe87 	clz	lr, r7
 8000cea:	f1be 0f00 	cmp.w	lr, #0
 8000cee:	d134      	bne.n	8000d5a <__udivmoddi4+0x16e>
 8000cf0:	1beb      	subs	r3, r5, r7
 8000cf2:	0c3a      	lsrs	r2, r7, #16
 8000cf4:	fa1f fc87 	uxth.w	ip, r7
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cfe:	0c25      	lsrs	r5, r4, #16
 8000d00:	fb02 3318 	mls	r3, r2, r8, r3
 8000d04:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d08:	fb0c f308 	mul.w	r3, ip, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x134>
 8000d10:	19ed      	adds	r5, r5, r7
 8000d12:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x132>
 8000d18:	42ab      	cmp	r3, r5
 8000d1a:	f200 80d1 	bhi.w	8000ec0 <__udivmoddi4+0x2d4>
 8000d1e:	4680      	mov	r8, r0
 8000d20:	1aed      	subs	r5, r5, r3
 8000d22:	b2a3      	uxth	r3, r4
 8000d24:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d28:	fb02 5510 	mls	r5, r2, r0, r5
 8000d2c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d30:	fb0c fc00 	mul.w	ip, ip, r0
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0x15c>
 8000d38:	19e4      	adds	r4, r4, r7
 8000d3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x15a>
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	f200 80b8 	bhi.w	8000eb6 <__udivmoddi4+0x2ca>
 8000d46:	4618      	mov	r0, r3
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d50:	e79d      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000d52:	4631      	mov	r1, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	f1ce 0420 	rsb	r4, lr, #32
 8000d5e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d62:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d66:	fa20 f804 	lsr.w	r8, r0, r4
 8000d6a:	0c3a      	lsrs	r2, r7, #16
 8000d6c:	fa25 f404 	lsr.w	r4, r5, r4
 8000d70:	ea48 0803 	orr.w	r8, r8, r3
 8000d74:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d78:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d7c:	fb02 4411 	mls	r4, r2, r1, r4
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d88:	fb01 f30c 	mul.w	r3, r1, ip
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x1bc>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d9a:	f080 808a 	bcs.w	8000eb2 <__udivmoddi4+0x2c6>
 8000d9e:	42ab      	cmp	r3, r5
 8000da0:	f240 8087 	bls.w	8000eb2 <__udivmoddi4+0x2c6>
 8000da4:	3902      	subs	r1, #2
 8000da6:	443d      	add	r5, r7
 8000da8:	1aeb      	subs	r3, r5, r3
 8000daa:	fa1f f588 	uxth.w	r5, r8
 8000dae:	fbb3 f0f2 	udiv	r0, r3, r2
 8000db2:	fb02 3310 	mls	r3, r2, r0, r3
 8000db6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dba:	fb00 f30c 	mul.w	r3, r0, ip
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1e6>
 8000dc2:	19ed      	adds	r5, r5, r7
 8000dc4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dc8:	d26f      	bcs.n	8000eaa <__udivmoddi4+0x2be>
 8000dca:	42ab      	cmp	r3, r5
 8000dcc:	d96d      	bls.n	8000eaa <__udivmoddi4+0x2be>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	443d      	add	r5, r7
 8000dd2:	1aeb      	subs	r3, r5, r3
 8000dd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd8:	e78f      	b.n	8000cfa <__udivmoddi4+0x10e>
 8000dda:	f1c1 0720 	rsb	r7, r1, #32
 8000dde:	fa22 f807 	lsr.w	r8, r2, r7
 8000de2:	408b      	lsls	r3, r1
 8000de4:	fa05 f401 	lsl.w	r4, r5, r1
 8000de8:	ea48 0303 	orr.w	r3, r8, r3
 8000dec:	fa20 fe07 	lsr.w	lr, r0, r7
 8000df0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000df4:	40fd      	lsrs	r5, r7
 8000df6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dfa:	fbb5 f9fc 	udiv	r9, r5, ip
 8000dfe:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e02:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e06:	fa1f f883 	uxth.w	r8, r3
 8000e0a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e0e:	fb09 f408 	mul.w	r4, r9, r8
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	fa02 f201 	lsl.w	r2, r2, r1
 8000e18:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x244>
 8000e1e:	18ed      	adds	r5, r5, r3
 8000e20:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e24:	d243      	bcs.n	8000eae <__udivmoddi4+0x2c2>
 8000e26:	42ac      	cmp	r4, r5
 8000e28:	d941      	bls.n	8000eae <__udivmoddi4+0x2c2>
 8000e2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e2e:	441d      	add	r5, r3
 8000e30:	1b2d      	subs	r5, r5, r4
 8000e32:	fa1f fe8e 	uxth.w	lr, lr
 8000e36:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e3a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e3e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e42:	fb00 f808 	mul.w	r8, r0, r8
 8000e46:	45a0      	cmp	r8, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x26e>
 8000e4a:	18e4      	adds	r4, r4, r3
 8000e4c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e50:	d229      	bcs.n	8000ea6 <__udivmoddi4+0x2ba>
 8000e52:	45a0      	cmp	r8, r4
 8000e54:	d927      	bls.n	8000ea6 <__udivmoddi4+0x2ba>
 8000e56:	3802      	subs	r0, #2
 8000e58:	441c      	add	r4, r3
 8000e5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5e:	eba4 0408 	sub.w	r4, r4, r8
 8000e62:	fba0 8902 	umull	r8, r9, r0, r2
 8000e66:	454c      	cmp	r4, r9
 8000e68:	46c6      	mov	lr, r8
 8000e6a:	464d      	mov	r5, r9
 8000e6c:	d315      	bcc.n	8000e9a <__udivmoddi4+0x2ae>
 8000e6e:	d012      	beq.n	8000e96 <__udivmoddi4+0x2aa>
 8000e70:	b156      	cbz	r6, 8000e88 <__udivmoddi4+0x29c>
 8000e72:	ebba 030e 	subs.w	r3, sl, lr
 8000e76:	eb64 0405 	sbc.w	r4, r4, r5
 8000e7a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431f      	orrs	r7, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	6037      	str	r7, [r6, #0]
 8000e86:	6074      	str	r4, [r6, #4]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	e6f8      	b.n	8000c84 <__udivmoddi4+0x98>
 8000e92:	4690      	mov	r8, r2
 8000e94:	e6e0      	b.n	8000c58 <__udivmoddi4+0x6c>
 8000e96:	45c2      	cmp	sl, r8
 8000e98:	d2ea      	bcs.n	8000e70 <__udivmoddi4+0x284>
 8000e9a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e9e:	eb69 0503 	sbc.w	r5, r9, r3
 8000ea2:	3801      	subs	r0, #1
 8000ea4:	e7e4      	b.n	8000e70 <__udivmoddi4+0x284>
 8000ea6:	4628      	mov	r0, r5
 8000ea8:	e7d7      	b.n	8000e5a <__udivmoddi4+0x26e>
 8000eaa:	4640      	mov	r0, r8
 8000eac:	e791      	b.n	8000dd2 <__udivmoddi4+0x1e6>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	e7be      	b.n	8000e30 <__udivmoddi4+0x244>
 8000eb2:	4601      	mov	r1, r0
 8000eb4:	e778      	b.n	8000da8 <__udivmoddi4+0x1bc>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	e745      	b.n	8000d48 <__udivmoddi4+0x15c>
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xe6>
 8000ec0:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec4:	443d      	add	r5, r7
 8000ec6:	e72b      	b.n	8000d20 <__udivmoddi4+0x134>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8000ed2:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <SVC_Handler+0x38>)
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <SVC_Handler+0x38>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f023 0301 	bic.w	r3, r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000ede:	f3ef 8309 	mrs	r3, PSP
 8000ee2:	461c      	mov	r4, r3
  return(result);
 8000ee4:	4623      	mov	r3, r4
#endif

  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();
 8000ee6:	607b      	str	r3, [r7, #4]

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3368      	adds	r3, #104	; 0x68
 8000eec:	607b      	str	r3, [r7, #4]

  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	f383 8809 	msr	PSP, r3

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
 8000ef8:	f001 fc7f 	bl	80027fa <port_unlock_from_isr.lto_priv.4>
}
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd90      	pop	{r4, r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000ef30 	.word	0xe000ef30

08000f08 <_port_irq_epilogue>:
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 8000f0e:	f001 fc6f 	bl	80027f0 <port_lock_from_isr.lto_priv.6>
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <_port_irq_epilogue+0x6c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d025      	beq.n	8000f6a <_port_irq_epilogue+0x62>
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
#else
  uint32_t result;

  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8000f1e:	eef1 3a10 	vmrs	r3, fpscr
 8000f22:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000f24:	f3ef 8309 	mrs	r3, PSP
 8000f28:	461c      	mov	r4, r3
  return(result);
 8000f2a:	4623      	mov	r3, r4
      /* Enforcing a lazy FPU state save by accessing the FPCSR register.*/
      (void) __get_FPSCR();
#endif

    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();
 8000f2c:	60fb      	str	r3, [r7, #12]

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3b68      	subs	r3, #104	; 0x68
 8000f32:	60fb      	str	r3, [r7, #12]

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f3a:	61da      	str	r2, [r3, #28]
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <_port_irq_epilogue+0x70>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	461a      	mov	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	661a      	str	r2, [r3, #96]	; 0x60
#endif

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f383 8809 	msr	PSP, r3

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000f50:	f002 fd96 	bl	8003a80 <chSchIsPreemptionRequired>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <_port_irq_epilogue+0x5a>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <_port_irq_epilogue+0x74>)
 8000f5e:	619a      	str	r2, [r3, #24]
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000f60:	e005      	b.n	8000f6e <_port_irq_epilogue+0x66>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <_port_irq_epilogue+0x78>)
 8000f66:	619a      	str	r2, [r3, #24]
 8000f68:	e001      	b.n	8000f6e <_port_irq_epilogue+0x66>

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
 8000f6a:	f001 fc46 	bl	80027fa <port_unlock_from_isr.lto_priv.4>
}
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd90      	pop	{r4, r7, pc}
 8000f74:	e000ed00 	.word	0xe000ed00
 8000f78:	e000ef30 	.word	0xe000ef30
 8000f7c:	08000331 	.word	0x08000331
 8000f80:	08000334 	.word	0x08000334

08000f84 <osalThreadSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
static inline void osalThreadSleep(sysinterval_t delay) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  chThdSleep(delay);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f001 fda3 	bl	8002ad8 <chThdSleep>
}
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <l3gd20SPIReadRegister>:
 * @param[in] reg       starting register address
 * @param[in] n         number of consecutive registers to read
 * @param[in] b         pointer to an output buffer.
 */
static void l3gd20SPIReadRegister(SPIDriver *spip, uint8_t reg,  size_t n,
                                     uint8_t* b) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	72fb      	strb	r3, [r7, #11]
  uint8_t cmd;
  (n == 1) ? (cmd = reg | L3GD20_RW) : (cmd = reg | L3GD20_RW | L3GD20_MS);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d105      	bne.n	8000fba <l3gd20SPIReadRegister+0x22>
 8000fae:	7afb      	ldrb	r3, [r7, #11]
 8000fb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	75fb      	strb	r3, [r7, #23]
 8000fb8:	e004      	b.n	8000fc4 <l3gd20SPIReadRegister+0x2c>
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	75fb      	strb	r3, [r7, #23]
  spiSelect(spip);
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f006 fed8 	bl	8007d7a <spiSelect>
  spiSend(spip, 1, &cmd);
 8000fca:	f107 0317 	add.w	r3, r7, #23
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f006 fefd 	bl	8007dd2 <spiSend>
  spiReceive(spip, n, b);
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f006 ff12 	bl	8007e06 <spiReceive>
  spiUnselect(spip);
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f006 fedf 	bl	8007da6 <spiUnselect>
}
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <l3gd20SPIWriteRegister>:
 * @param[in] reg       starting register address
 * @param[in] n         number of adjacent registers to write
 * @param[in] b         pointer to a buffer of values.
 */
static void l3gd20SPIWriteRegister(SPIDriver *spip, uint8_t reg, size_t n,
                                   uint8_t* b) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	72fb      	strb	r3, [r7, #11]
  uint8_t cmd;
  (n == 1) ? (cmd = reg) : (cmd = reg | L3GD20_MS);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d102      	bne.n	800100a <l3gd20SPIWriteRegister+0x1c>
 8001004:	7afb      	ldrb	r3, [r7, #11]
 8001006:	75fb      	strb	r3, [r7, #23]
 8001008:	e004      	b.n	8001014 <l3gd20SPIWriteRegister+0x26>
 800100a:	7afb      	ldrb	r3, [r7, #11]
 800100c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001010:	b2db      	uxtb	r3, r3
 8001012:	75fb      	strb	r3, [r7, #23]
  spiSelect(spip);
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f006 feb0 	bl	8007d7a <spiSelect>
  spiSend(spip, 1, &cmd);
 800101a:	f107 0317 	add.w	r3, r7, #23
 800101e:	461a      	mov	r2, r3
 8001020:	2101      	movs	r1, #1
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f006 fed5 	bl	8007dd2 <spiSend>
  spiSend(spip, n, b);
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f006 fed0 	bl	8007dd2 <spiSend>
  spiUnselect(spip);
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f006 feb7 	bl	8007da6 <spiUnselect>
}
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <gyro_get_axes_number>:
 *
 * @param[in] ip        pointer to @p BaseGyroscope interface.
 *
 * @return              the number of axes.
 */
static size_t gyro_get_axes_number(void *ip) {
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  (void)ip;
  
  return L3GD20_GYRO_NUMBER_OF_AXES;
 8001046:	2303      	movs	r3, #3
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <gyro_read_raw>:
 * @param[out] axes     a buffer which would be filled with raw data.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_read_raw(void *ip, int32_t axes[L3GD20_GYRO_NUMBER_OF_AXES]) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  L3GD20Driver* devp;
  int16_t tmp;
  uint8_t i, buff [2 * L3GD20_GYRO_NUMBER_OF_AXES];
  msg_t msg = MSG_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  
  osalDbgCheck((ip != NULL) && (axes != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(L3GD20Driver*, (BaseGyroscope*)ip);
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
  spiAcquireBus(devp->config->spip);
  spiStart(devp->config->spip,
           devp->config->spicfg);
#endif /* L3GD20_SHARED_SPI */

  l3gd20SPIReadRegister(devp->config->spip, L3GD20_AD_OUT_X_L,
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2206      	movs	r2, #6
 800107a:	2128      	movs	r1, #40	; 0x28
 800107c:	f7ff ff8c 	bl	8000f98 <l3gd20SPIReadRegister>
#if	L3GD20_SHARED_SPI
  spiReleaseBus(devp->config->spip);
#endif /* L3GD20_SHARED_SPI */
#endif /* L3GD20_USE_SPI */

    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 8001080:	2300      	movs	r3, #0
 8001082:	77fb      	strb	r3, [r7, #31]
 8001084:	e01f      	b.n	80010c6 <gyro_read_raw+0x72>
      tmp = buff[2 * i] + (buff[2 * i + 1] << 8);
 8001086:	7ffb      	ldrb	r3, [r7, #31]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	f107 0220 	add.w	r2, r7, #32
 800108e:	4413      	add	r3, r2
 8001090:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001094:	b29a      	uxth	r2, r3
 8001096:	7ffb      	ldrb	r3, [r7, #31]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	3301      	adds	r3, #1
 800109c:	f107 0120 	add.w	r1, r7, #32
 80010a0:	440b      	add	r3, r1
 80010a2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4413      	add	r3, r2
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	827b      	strh	r3, [r7, #18]
      axes[i] = (int32_t)tmp;
 80010b2:	7ffb      	ldrb	r3, [r7, #31]
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80010be:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80010c0:	7ffb      	ldrb	r3, [r7, #31]
 80010c2:	3301      	adds	r3, #1
 80010c4:	77fb      	strb	r3, [r7, #31]
 80010c6:	7ffb      	ldrb	r3, [r7, #31]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d9dc      	bls.n	8001086 <gyro_read_raw+0x32>
    }
  return msg;
 80010cc:	69bb      	ldr	r3, [r7, #24]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <gyro_read_cooked>:
 * @param[out] axes     a buffer which would be filled with cooked data.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_read_cooked(void *ip, float axes[]) {
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b088      	sub	sp, #32
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
  msg_t msg;

  osalDbgCheck((ip != NULL) && (axes != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(L3GD20Driver*, (BaseGyroscope*)ip);
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	61bb      	str	r3, [r7, #24]
  
  osalDbgAssert((devp->state == L3GD20_READY),
                "gyro_read_cooked(), invalid state");

  msg = gyro_read_raw(ip, raw);
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	4619      	mov	r1, r3
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffae 	bl	8001054 <gyro_read_raw>
 80010f8:	6178      	str	r0, [r7, #20]
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++){
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	e026      	b.n	800114e <gyro_read_cooked+0x78>
    axes[i] = (raw[i] * devp->gyrosensitivity[i]) - devp->gyrobias[i];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	441a      	add	r2, r3
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	f107 0120 	add.w	r1, r7, #32
 8001110:	440b      	add	r3, r1
 8001112:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111e:	69b9      	ldr	r1, [r7, #24]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	3304      	adds	r3, #4
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	3304      	adds	r3, #4
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001132:	69b9      	ldr	r1, [r7, #24]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	3308      	adds	r3, #8
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	edd3 7a00 	vldr	s15, [r3]
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	edc2 7a00 	vstr	s15, [r2]
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++){
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	3301      	adds	r3, #1
 800114c:	61fb      	str	r3, [r7, #28]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d9d5      	bls.n	8001100 <gyro_read_cooked+0x2a>
  }
  return msg;
 8001154:	697b      	ldr	r3, [r7, #20]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <gyro_sample_bias>:
 * @param[in] ip        pointer to @p BaseGyroscope interface.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_sample_bias(void *ip) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	; 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  L3GD20Driver* devp;
  uint32_t i, j;
  int32_t raw[L3GD20_GYRO_NUMBER_OF_AXES];
  int32_t buff[L3GD20_GYRO_NUMBER_OF_AXES] = {0, 0, 0};
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  msg_t msg;
	
  osalDbgCheck(ip != NULL);

  /* Getting parent instance pointer.*/
  devp = objGetInstance(L3GD20Driver*, (BaseGyroscope*)ip);
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	623b      	str	r3, [r7, #32]
#if L3GD20_USE_SPI
  osalDbgAssert((devp->config->spip->state == SPI_READY),
                "gyro_sample_bias(), channel not ready");
#endif

  for(i = 0; i < L3GD20_BIAS_ACQ_TIMES; i++){
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001184:	e030      	b.n	80011e8 <gyro_sample_bias+0x88>
    msg = gyro_read_raw(ip, raw);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff61 	bl	8001054 <gyro_read_raw>
 8001192:	6278      	str	r0, [r7, #36]	; 0x24
		if(msg != MSG_OK)
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <gyro_sample_bias+0x3e>
			return msg;
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	e061      	b.n	8001262 <gyro_sample_bias+0x102>
    for(j = 0; j < L3GD20_GYRO_NUMBER_OF_AXES; j++){
 800119e:	2300      	movs	r3, #0
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80011a2:	e018      	b.n	80011d6 <gyro_sample_bias+0x76>
      buff[j] += raw[j];
 80011a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011ac:	4413      	add	r3, r2
 80011ae:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80011b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80011ba:	440b      	add	r3, r1
 80011bc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80011c0:	441a      	add	r2, r3
 80011c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80011ca:	440b      	add	r3, r1
 80011cc:	f843 2c28 	str.w	r2, [r3, #-40]
    for(j = 0; j < L3GD20_GYRO_NUMBER_OF_AXES; j++){
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d2:	3301      	adds	r3, #1
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d9e3      	bls.n	80011a4 <gyro_sample_bias+0x44>
    }
    osalThreadSleepMicroseconds(L3GD20_BIAS_SETTLING_US);
 80011dc:	2032      	movs	r0, #50	; 0x32
 80011de:	f7ff fed1 	bl	8000f84 <osalThreadSleep>
  for(i = 0; i < L3GD20_BIAS_ACQ_TIMES; i++){
 80011e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e4:	3301      	adds	r3, #1
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ea:	2b31      	cmp	r3, #49	; 0x31
 80011ec:	d9cb      	bls.n	8001186 <gyro_sample_bias+0x26>
  }

  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++){
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f2:	e032      	b.n	800125a <gyro_sample_bias+0xfa>
    devp->gyrobias[i] = (buff[i] / L3GD20_BIAS_ACQ_TIMES);
 80011f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011fc:	4413      	add	r3, r2
 80011fe:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001202:	4a1a      	ldr	r2, [pc, #104]	; (800126c <gyro_sample_bias+0x10c>)
 8001204:	fb82 1203 	smull	r1, r2, r2, r3
 8001208:	1112      	asrs	r2, r2, #4
 800120a:	17db      	asrs	r3, r3, #31
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001216:	6a3a      	ldr	r2, [r7, #32]
 8001218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121a:	3308      	adds	r3, #8
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	edc3 7a00 	vstr	s15, [r3]
    devp->gyrobias[i] *= devp->gyrosensitivity[i];
 8001224:	6a3a      	ldr	r2, [r7, #32]
 8001226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001228:	3308      	adds	r3, #8
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	ed93 7a00 	vldr	s14, [r3]
 8001232:	6a3a      	ldr	r2, [r7, #32]
 8001234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001236:	3304      	adds	r3, #4
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	3304      	adds	r3, #4
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	6a3a      	ldr	r2, [r7, #32]
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	3308      	adds	r3, #8
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	edc3 7a00 	vstr	s15, [r3]
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++){
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	3301      	adds	r3, #1
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	2b02      	cmp	r3, #2
 800125e:	d9c9      	bls.n	80011f4 <gyro_sample_bias+0x94>
  }
  return msg;
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001262:	4618      	mov	r0, r3
 8001264:	3730      	adds	r7, #48	; 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	51eb851f 	.word	0x51eb851f

08001270 <gyro_set_bias>:
 * @param[in] bp        a buffer which contains biases.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_set_bias(void *ip, float *bp) {
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  L3GD20Driver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  
  osalDbgCheck((ip != NULL) && (bp != NULL));
  
  /* Getting parent instance pointer.*/
  devp = objGetInstance(L3GD20Driver*, (BaseGyroscope*)ip);
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	60fb      	str	r3, [r7, #12]
  
  osalDbgAssert((devp->state == L3GD20_READY),
                "gyro_set_bias(), invalid state");
  
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	e00d      	b.n	80012ac <gyro_set_bias+0x3c>
    devp->gyrobias[i] = bp[i];
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	4413      	add	r3, r2
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3308      	adds	r3, #8
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	601a      	str	r2, [r3, #0]
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d9ee      	bls.n	8001290 <gyro_set_bias+0x20>
  }
  return msg;
 80012b2:	693b      	ldr	r3, [r7, #16]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <gyro_reset_bias>:
 * @param[in] ip        pointer to @p BaseGyroscope interface.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_reset_bias(void *ip) {
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  L3GD20Driver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]

  osalDbgCheck(ip != NULL);
  
  /* Getting parent instance pointer.*/
  devp = objGetInstance(L3GD20Driver*, (BaseGyroscope*)ip);
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	60fb      	str	r3, [r7, #12]
  
  osalDbgAssert((devp->state == L3GD20_READY),
                "gyro_reset_bias(), invalid state");

  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e00a      	b.n	80012f4 <gyro_reset_bias+0x34>
    devp->gyrobias[i] = L3GD20_GYRO_BIAS;
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	3308      	adds	r3, #8
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d9f1      	bls.n	80012de <gyro_reset_bias+0x1e>
  return msg;
 80012fa:	693b      	ldr	r3, [r7, #16]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	371c      	adds	r7, #28
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <gyro_set_sensivity>:
 * @param[in] sp        a buffer which contains sensitivities.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_set_sensivity(void *ip, float *sp) {
 8001308:	b480      	push	{r7}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  L3GD20Driver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  
  osalDbgCheck((ip != NULL) && (sp !=NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(L3GD20Driver*, (BaseGyroscope*)ip);
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	60fb      	str	r3, [r7, #12]

  osalDbgAssert((devp->state == L3GD20_READY),
                "gyro_set_sensivity(), invalid state");
  
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e00e      	b.n	8001346 <gyro_set_sensivity+0x3e>
    devp->gyrosensitivity[i] = sp[i];
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	4413      	add	r3, r2
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68f9      	ldr	r1, [r7, #12]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3304      	adds	r3, #4
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	3304      	adds	r3, #4
 800133e:	601a      	str	r2, [r3, #0]
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d9ed      	bls.n	8001328 <gyro_set_sensivity+0x20>
  }
  return msg;
 800134c:	693b      	ldr	r3, [r7, #16]
}
 800134e:	4618      	mov	r0, r3
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <gyro_reset_sensivity>:
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    otherwise.
 */
static msg_t gyro_reset_sensivity(void *ip) {
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  L3GD20Driver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
  
  osalDbgCheck(ip != NULL);

  /* Getting parent instance pointer.*/
  devp = objGetInstance(L3GD20Driver*, (BaseGyroscope*)ip);
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	60fb      	str	r3, [r7, #12]

  osalDbgAssert((devp->state == L3GD20_READY),
                "gyro_reset_sensivity(), invalid state");

  if(devp->config->gyrofullscale == L3GD20_FS_250DPS)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	7c1b      	ldrb	r3, [r3, #16]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d111      	bne.n	80013a2 <gyro_reset_sensivity+0x46>
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	e00a      	b.n	800139a <gyro_reset_sensivity+0x3e>
      devp->gyrosensitivity[i] = L3GD20_GYRO_SENS_250DPS;
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3304      	adds	r3, #4
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	3304      	adds	r3, #4
 8001390:	4a20      	ldr	r2, [pc, #128]	; (8001414 <gyro_reset_sensivity+0xb8>)
 8001392:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	3301      	adds	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d9f1      	bls.n	8001384 <gyro_reset_sensivity+0x28>
 80013a0:	e030      	b.n	8001404 <gyro_reset_sensivity+0xa8>
  else if(devp->config->gyrofullscale == L3GD20_FS_500DPS)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	7c1b      	ldrb	r3, [r3, #16]
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d111      	bne.n	80013d0 <gyro_reset_sensivity+0x74>
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e00a      	b.n	80013c8 <gyro_reset_sensivity+0x6c>
        devp->gyrosensitivity[i] = L3GD20_GYRO_SENS_500DPS;
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3304      	adds	r3, #4
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	3304      	adds	r3, #4
 80013be:	4a16      	ldr	r2, [pc, #88]	; (8001418 <gyro_reset_sensivity+0xbc>)
 80013c0:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d9f1      	bls.n	80013b2 <gyro_reset_sensivity+0x56>
 80013ce:	e019      	b.n	8001404 <gyro_reset_sensivity+0xa8>
  else if(devp->config->gyrofullscale == L3GD20_FS_2000DPS)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	7c1b      	ldrb	r3, [r3, #16]
 80013d6:	2b20      	cmp	r3, #32
 80013d8:	d111      	bne.n	80013fe <gyro_reset_sensivity+0xa2>
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	e00a      	b.n	80013f6 <gyro_reset_sensivity+0x9a>
        devp->gyrosensitivity[i] = L3GD20_GYRO_SENS_2000DPS;
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3304      	adds	r3, #4
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	3304      	adds	r3, #4
 80013ec:	4a0b      	ldr	r2, [pc, #44]	; (800141c <gyro_reset_sensivity+0xc0>)
 80013ee:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d9f1      	bls.n	80013e0 <gyro_reset_sensivity+0x84>
 80013fc:	e002      	b.n	8001404 <gyro_reset_sensivity+0xa8>
  else {
    osalDbgAssert(FALSE, "gyro_reset_sensivity(), full scale issue");
    return MSG_RESET;
 80013fe:	f06f 0301 	mvn.w	r3, #1
 8001402:	e000      	b.n	8001406 <gyro_reset_sensivity+0xaa>
  }
  return msg;
 8001404:	693b      	ldr	r3, [r7, #16]
}
 8001406:	4618      	mov	r0, r3
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	3c0f5c29 	.word	0x3c0f5c29
 8001418:	3c8f5c29 	.word	0x3c8f5c29
 800141c:	3d8f5c29 	.word	0x3d8f5c29

08001420 <gyro_set_full_scale>:
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    otherwise.
 */
static msg_t gyro_set_full_scale(L3GD20Driver *devp, l3gd20_fs_t fs) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
  float newfs, scale;
  uint8_t i, cr;
  msg_t msg = MSG_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
#if L3GD20_USE_SPI
  osalDbgAssert((devp->config->spip->state == SPI_READY),
                "gyro_set_full_scale(), channel not ready");
#endif

  if(fs == L3GD20_FS_250DPS) {
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <gyro_set_full_scale+0x1c>
    newfs = L3GD20_250DPS;
 8001436:	4b3c      	ldr	r3, [pc, #240]	; (8001528 <gyro_set_full_scale+0x108>)
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	e00e      	b.n	800145a <gyro_set_full_scale+0x3a>
  }
  else if(fs == L3GD20_FS_500DPS) {
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	2b10      	cmp	r3, #16
 8001440:	d102      	bne.n	8001448 <gyro_set_full_scale+0x28>
    newfs = L3GD20_500DPS;
 8001442:	4b3a      	ldr	r3, [pc, #232]	; (800152c <gyro_set_full_scale+0x10c>)
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	e008      	b.n	800145a <gyro_set_full_scale+0x3a>
  }
  else if(fs == L3GD20_FS_2000DPS) {
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b20      	cmp	r3, #32
 800144c:	d102      	bne.n	8001454 <gyro_set_full_scale+0x34>
    newfs = L3GD20_2000DPS;
 800144e:	4b38      	ldr	r3, [pc, #224]	; (8001530 <gyro_set_full_scale+0x110>)
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	e002      	b.n	800145a <gyro_set_full_scale+0x3a>
  }
  else {
    return MSG_RESET;
 8001454:	f06f 0301 	mvn.w	r3, #1
 8001458:	e061      	b.n	800151e <gyro_set_full_scale+0xfe>
  }

  if(newfs != devp->gyrofullscale) {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001460:	edd7 7a07 	vldr	s15, [r7, #28]
 8001464:	eeb4 7a67 	vcmp.f32	s14, s15
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	d056      	beq.n	800151c <gyro_set_full_scale+0xfc>
    scale = newfs / devp->gyrofullscale;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001474:	edd7 6a07 	vldr	s13, [r7, #28]
 8001478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147c:	edc7 7a04 	vstr	s15, [r7, #16]
    devp->gyrofullscale = newfs;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
		spiStart(devp->config->spip,
						 devp->config->spicfg);
#endif /* L3GD20_SHARED_SPI */

    /* Updating register.*/
    l3gd20SPIReadRegister(devp->config->spip,
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	f107 030f 	add.w	r3, r7, #15
 8001490:	2201      	movs	r2, #1
 8001492:	2123      	movs	r1, #35	; 0x23
 8001494:	f7ff fd80 	bl	8000f98 <l3gd20SPIReadRegister>

#if	L3GD20_SHARED_SPI
		spiReleaseBus(devp->config->spip);
#endif /* L3GD20_SHARED_SPI */
#endif /* L3GD20_USE_SPI */
    cr &= ~(L3GD20_CTRL_REG4_FS_MASK);
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	73fb      	strb	r3, [r7, #15]
    cr |= fs;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	73fb      	strb	r3, [r7, #15]
		spiAcquireBus(devp->config->spip);
		spiStart(devp->config->spip,
						 devp->config->spicfg);
#endif /* L3GD20_SHARED_SPI */

    l3gd20SPIWriteRegister(devp->config->spip,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	f107 030f 	add.w	r3, r7, #15
 80014b6:	2201      	movs	r2, #1
 80014b8:	2123      	movs	r1, #35	; 0x23
 80014ba:	f7ff fd98 	bl	8000fee <l3gd20SPIWriteRegister>
		spiReleaseBus(devp->config->spip);
#endif /* L3GD20_SHARED_SPI */
#endif /* L3GD20_USE_SPI */

    /* Scaling sensitivity and bias. Re-calibration is suggested anyway. */
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	76fb      	strb	r3, [r7, #27]
 80014c2:	e028      	b.n	8001516 <gyro_set_full_scale+0xf6>
      devp->gyrosensitivity[i] *= scale;
 80014c4:	7efb      	ldrb	r3, [r7, #27]
 80014c6:	7efa      	ldrb	r2, [r7, #27]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	3204      	adds	r2, #4
 80014cc:	0092      	lsls	r2, r2, #2
 80014ce:	440a      	add	r2, r1
 80014d0:	3204      	adds	r2, #4
 80014d2:	ed92 7a00 	vldr	s14, [r2]
 80014d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80014da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	3304      	adds	r3, #4
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3304      	adds	r3, #4
 80014e8:	edc3 7a00 	vstr	s15, [r3]
      devp->gyrobias[i] *= scale;
 80014ec:	7efb      	ldrb	r3, [r7, #27]
 80014ee:	7efa      	ldrb	r2, [r7, #27]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	0092      	lsls	r2, r2, #2
 80014f6:	440a      	add	r2, r1
 80014f8:	ed92 7a00 	vldr	s14, [r2]
 80014fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	3308      	adds	r3, #8
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 8001510:	7efb      	ldrb	r3, [r7, #27]
 8001512:	3301      	adds	r3, #1
 8001514:	76fb      	strb	r3, [r7, #27]
 8001516:	7efb      	ldrb	r3, [r7, #27]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d9d3      	bls.n	80014c4 <gyro_set_full_scale+0xa4>
    }
  }
  return msg;
 800151c:	697b      	ldr	r3, [r7, #20]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	437a0000 	.word	0x437a0000
 800152c:	43fa0000 	.word	0x43fa0000
 8001530:	44fa0000 	.word	0x44fa0000

08001534 <l3gd20ObjectInit>:
 *
 * @param[out] devp     pointer to the @p L3GD20Driver object
 *
 * @init
 */
void l3gd20ObjectInit(L3GD20Driver *devp) {
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  devp->vmt = &vmt_device;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <l3gd20ObjectInit+0x2c>)
 8001540:	601a      	str	r2, [r3, #0]
  devp->gyro_if.vmt = &vmt_gyroscope;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <l3gd20ObjectInit+0x30>)
 8001546:	605a      	str	r2, [r3, #4]
  
  devp->config = NULL;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]

  devp->state  = L3GD20_STOP;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	721a      	strb	r2, [r3, #8]
}
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	08008f1c 	.word	0x08008f1c
 8001564:	08008f24 	.word	0x08008f24

08001568 <l3gd20Start>:
 * @param[in] devp      pointer to the @p L3GD20Driver object
 * @param[in] config    pointer to the @p L3GD20Config object
 *
 * @api
 */
void l3gd20Start(L3GD20Driver *devp, const L3GD20Config *config) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t i;
  uint8_t cr[5] = {0, 0, 0, 0, 0};
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	711a      	strb	r2, [r3, #4]
  osalDbgCheck((devp != NULL) && (config != NULL));

  osalDbgAssert((devp->state == L3GD20_STOP) || (devp->state == L3GD20_READY),
              "l3gd20Start(), invalid state");

  devp->config = config;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	60da      	str	r2, [r3, #12]
             
  /* Control register 1 configuration block.*/
  {
    cr[0] = L3GD20_CTRL_REG1_XEN | L3GD20_CTRL_REG1_YEN | 
          L3GD20_CTRL_REG1_ZEN | L3GD20_CTRL_REG1_PD |
          devp->config->gyrooutputdatarate;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	7c5b      	ldrb	r3, [r3, #17]
    cr[0] = L3GD20_CTRL_REG1_XEN | L3GD20_CTRL_REG1_YEN | 
 8001588:	f043 030f 	orr.w	r3, r3, #15
 800158c:	b2db      	uxtb	r3, r3
 800158e:	733b      	strb	r3, [r7, #12]
#endif
  }
  
  /* Control register 4 configuration block.*/
  {
    cr[3] = devp->config->gyrofullscale;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	7c1b      	ldrb	r3, [r3, #16]
 8001596:	73fb      	strb	r3, [r7, #15]

#if L3GD20_USE_SPI
#if	L3GD20_SHARED_SPI
  spiAcquireBus(devp->config->spip);
#endif /* L3GD20_SHARED_SPI */
  spiStart(devp->config->spip,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	681a      	ldr	r2, [r3, #0]
           devp->config->spicfg);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
  spiStart(devp->config->spip,
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4610      	mov	r0, r2
 80015a8:	f006 fbd2 	bl	8007d50 <spiStart>
           
  l3gd20SPIWriteRegister(devp->config->spip, L3GD20_AD_CTRL_REG1, 
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2205      	movs	r2, #5
 80015b8:	2120      	movs	r1, #32
 80015ba:	f7ff fd18 	bl	8000fee <l3gd20SPIWriteRegister>
  spiReleaseBus(devp->config->spip);
#endif /* L3GD20_SHARED_SPI */
#endif /* L3GD20_USE_SPI */
  
  /* Storing sensitivity information according to full scale.*/
  if(devp->config->gyrofullscale == L3GD20_FS_250DPS) {
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	7c1b      	ldrb	r3, [r3, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d128      	bne.n	800161a <l3gd20Start+0xb2>
    devp->gyrofullscale = L3GD20_250DPS;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a5c      	ldr	r2, [pc, #368]	; (800173c <l3gd20Start+0x1d4>)
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e01e      	b.n	8001612 <l3gd20Start+0xaa>
      if (devp->config->gyrosensitivity == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d108      	bne.n	80015f0 <l3gd20Start+0x88>
        devp->gyrosensitivity[i] = L3GD20_GYRO_SENS_250DPS;
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3304      	adds	r3, #4
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	3304      	adds	r3, #4
 80015ea:	4a55      	ldr	r2, [pc, #340]	; (8001740 <l3gd20Start+0x1d8>)
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	e00d      	b.n	800160c <l3gd20Start+0xa4>
      else
        devp->gyrosensitivity[i] = devp->config->gyrosensitivity[i];
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3304      	adds	r3, #4
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	3304      	adds	r3, #4
 800160a:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3301      	adds	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d9dd      	bls.n	80015d4 <l3gd20Start+0x6c>
 8001618:	e05a      	b.n	80016d0 <l3gd20Start+0x168>
    }
  }
  else if(devp->config->gyrofullscale == L3GD20_FS_500DPS) {
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	7c1b      	ldrb	r3, [r3, #16]
 8001620:	2b10      	cmp	r3, #16
 8001622:	d128      	bne.n	8001676 <l3gd20Start+0x10e>
    devp->gyrofullscale = L3GD20_500DPS;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a47      	ldr	r2, [pc, #284]	; (8001744 <l3gd20Start+0x1dc>)
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e01e      	b.n	800166e <l3gd20Start+0x106>
      if (devp->config->gyrosensitivity == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d108      	bne.n	800164c <l3gd20Start+0xe4>
        devp->gyrosensitivity[i] = L3GD20_GYRO_SENS_500DPS;
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3304      	adds	r3, #4
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	3304      	adds	r3, #4
 8001646:	4a40      	ldr	r2, [pc, #256]	; (8001748 <l3gd20Start+0x1e0>)
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	e00d      	b.n	8001668 <l3gd20Start+0x100>
      else
        devp->gyrosensitivity[i] = devp->config->gyrosensitivity[i];
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3304      	adds	r3, #4
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3304      	adds	r3, #4
 8001666:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	3301      	adds	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d9dd      	bls.n	8001630 <l3gd20Start+0xc8>
 8001674:	e02c      	b.n	80016d0 <l3gd20Start+0x168>
    }
  }
  else if(devp->config->gyrofullscale == L3GD20_FS_2000DPS) {
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	7c1b      	ldrb	r3, [r3, #16]
 800167c:	2b20      	cmp	r3, #32
 800167e:	d127      	bne.n	80016d0 <l3gd20Start+0x168>
    devp->gyrofullscale = L3GD20_2000DPS;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a32      	ldr	r2, [pc, #200]	; (800174c <l3gd20Start+0x1e4>)
 8001684:	62da      	str	r2, [r3, #44]	; 0x2c
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e01e      	b.n	80016ca <l3gd20Start+0x162>
      if (devp->config->gyrosensitivity == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d108      	bne.n	80016a8 <l3gd20Start+0x140>
        devp->gyrosensitivity[i] = L3GD20_GYRO_SENS_2000DPS;
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3304      	adds	r3, #4
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	3304      	adds	r3, #4
 80016a2:	4a2b      	ldr	r2, [pc, #172]	; (8001750 <l3gd20Start+0x1e8>)
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e00d      	b.n	80016c4 <l3gd20Start+0x15c>
      else
        devp->gyrosensitivity[i] = devp->config->gyrosensitivity[i];
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3304      	adds	r3, #4
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	3304      	adds	r3, #4
 80016c2:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d9dd      	bls.n	800168c <l3gd20Start+0x124>
  }
  else
    osalDbgAssert(FALSE, "l3gd20Start(), full scale issue");

  /* Storing bias information.*/
  if(devp->config->gyrobias != NULL) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d016      	beq.n	8001708 <l3gd20Start+0x1a0>
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e00f      	b.n	8001700 <l3gd20Start+0x198>
      devp->gyrobias[i] = devp->config->gyrobias[i];
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3308      	adds	r3, #8
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d9ec      	bls.n	80016e0 <l3gd20Start+0x178>
 8001706:	e010      	b.n	800172a <l3gd20Start+0x1c2>
    }
  }
  else {
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e00a      	b.n	8001724 <l3gd20Start+0x1bc>
      devp->gyrobias[i] = L3GD20_GYRO_BIAS;
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3308      	adds	r3, #8
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d9f1      	bls.n	800170e <l3gd20Start+0x1a6>
  }
  
  /* This is the Gyroscope transient recovery time.*/
  osalThreadSleepMilliseconds(10);
 800172a:	2064      	movs	r0, #100	; 0x64
 800172c:	f7ff fc2a 	bl	8000f84 <osalThreadSleep>

  devp->state = L3GD20_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2202      	movs	r2, #2
 8001734:	721a      	strb	r2, [r3, #8]
} 
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	437a0000 	.word	0x437a0000
 8001740:	3c0f5c29 	.word	0x3c0f5c29
 8001744:	43fa0000 	.word	0x43fa0000
 8001748:	3c8f5c29 	.word	0x3c8f5c29
 800174c:	44fa0000 	.word	0x44fa0000
 8001750:	3d8f5c29 	.word	0x3d8f5c29

08001754 <long_to_string_with_divisor>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  int i;
  char *q;
  long l, ll;

  l = num;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	617b      	str	r3, [r7, #20]
  if (divisor == 0) {
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <long_to_string_with_divisor+0x1e>
    ll = num;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	e001      	b.n	8001776 <long_to_string_with_divisor+0x22>
  } else {
    ll = divisor;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	613b      	str	r3, [r7, #16]
  }

  q = p + MAX_FILLER;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	330b      	adds	r3, #11
 800177a:	61bb      	str	r3, [r7, #24]
  do {
    i = (int)(l % radix);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	fbb3 f2f2 	udiv	r2, r3, r2
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	fb01 f202 	mul.w	r2, r1, r2
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	61fb      	str	r3, [r7, #28]
    i += '0';
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3330      	adds	r3, #48	; 0x30
 8001792:	61fb      	str	r3, [r7, #28]
    if (i > '9')
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	2b39      	cmp	r3, #57	; 0x39
 8001798:	dd02      	ble.n	80017a0 <long_to_string_with_divisor+0x4c>
      i += 'A' - '0' - 10;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3307      	adds	r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
    *--q = i;
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	701a      	strb	r2, [r3, #0]
    l /= radix;
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	617b      	str	r3, [r7, #20]
  } while ((ll /= radix) != 0);
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1d9      	bne.n	800177c <long_to_string_with_divisor+0x28>

  i = (int)(p + MAX_FILLER - q);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	330b      	adds	r3, #11
 80017cc:	461a      	mov	r2, r3
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	61fb      	str	r3, [r7, #28]
  do
    *p++ = *q++;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60fa      	str	r2, [r7, #12]
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	1c51      	adds	r1, r2, #1
 80017de:	61b9      	str	r1, [r7, #24]
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	701a      	strb	r2, [r3, #0]
  while (--i);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	61fb      	str	r3, [r7, #28]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f1      	bne.n	80017d4 <long_to_string_with_divisor+0x80>

  return p;
 80017f0:	68fb      	ldr	r3, [r7, #12]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <ch_ltoa>:

static char *ch_ltoa(char *p, long num, unsigned radix) {
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]

  return long_to_string_with_divisor(p, num, radix, 0);
 800180a:	2300      	movs	r3, #0
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f7ff ff9f 	bl	8001754 <long_to_string_with_divisor>
 8001816:	4603      	mov	r3, r0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <ftoa>:
#if CHPRINTF_USE_FLOAT
static const long pow10[FLOAT_PRECISION] = {
    10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000
};

static char *ftoa(char *p, double num, unsigned long precision) {
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	ed87 0b00 	vstr	d0, [r7]
 800182c:	60b9      	str	r1, [r7, #8]
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <ftoa+0x1a>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b09      	cmp	r3, #9
 8001838:	d901      	bls.n	800183e <ftoa+0x1e>
    precision = FLOAT_PRECISION;
 800183a:	2309      	movs	r3, #9
 800183c:	60bb      	str	r3, [r7, #8]
  precision = pow10[precision - 1];
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	4a22      	ldr	r2, [pc, #136]	; (80018cc <ftoa+0xac>)
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	60bb      	str	r3, [r7, #8]

  l = (long)num;
 800184a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800184e:	f7ff f93d 	bl	8000acc <__aeabi_d2iz>
 8001852:	4603      	mov	r3, r0
 8001854:	617b      	str	r3, [r7, #20]
  p = long_to_string_with_divisor(p, l, 10, 0);
 8001856:	2300      	movs	r3, #0
 8001858:	220a      	movs	r2, #10
 800185a:	6979      	ldr	r1, [r7, #20]
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff ff79 	bl	8001754 <long_to_string_with_divisor>
 8001862:	60f8      	str	r0, [r7, #12]
  *p++ = '.';
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	60fa      	str	r2, [r7, #12]
 800186a:	222e      	movs	r2, #46	; 0x2e
 800186c:	701a      	strb	r2, [r3, #0]
  l = (long)((num - l) * precision);
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7fe feb4 	bl	80005dc <__aeabi_i2d>
 8001874:	4603      	mov	r3, r0
 8001876:	460c      	mov	r4, r1
 8001878:	461a      	mov	r2, r3
 800187a:	4623      	mov	r3, r4
 800187c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001880:	f7fe fd5e 	bl	8000340 <__aeabi_dsub>
 8001884:	4603      	mov	r3, r0
 8001886:	460c      	mov	r4, r1
 8001888:	4625      	mov	r5, r4
 800188a:	461c      	mov	r4, r3
 800188c:	68b8      	ldr	r0, [r7, #8]
 800188e:	f7fe fe95 	bl	80005bc <__aeabi_ui2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4620      	mov	r0, r4
 8001898:	4629      	mov	r1, r5
 800189a:	f7fe ff05 	bl	80006a8 <__aeabi_dmul>
 800189e:	4603      	mov	r3, r0
 80018a0:	460c      	mov	r4, r1
 80018a2:	4618      	mov	r0, r3
 80018a4:	4621      	mov	r1, r4
 80018a6:	f7ff f911 	bl	8000acc <__aeabi_d2iz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	617b      	str	r3, [r7, #20]
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <ftoa+0xb0>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	08db      	lsrs	r3, r3, #3
 80018b8:	220a      	movs	r2, #10
 80018ba:	6979      	ldr	r1, [r7, #20]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff ff49 	bl	8001754 <long_to_string_with_divisor>
 80018c2:	4603      	mov	r3, r0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bdb0      	pop	{r4, r5, r7, pc}
 80018cc:	08008f48 	.word	0x08008f48
 80018d0:	cccccccd 	.word	0xcccccccd

080018d4 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b094      	sub	sp, #80	; 0x50
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60ba      	str	r2, [r7, #8]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (c == 0)
 80018f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <chvprintf+0x28>
      return n;
 80018f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fa:	e23c      	b.n	8001d76 <chvprintf+0x4a2>
    if (c != '%') {
 80018fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001900:	2b25      	cmp	r3, #37	; 0x25
 8001902:	d00b      	beq.n	800191c <chvprintf+0x48>
      streamPut(chp, (uint8_t)c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800190e:	4611      	mov	r1, r2
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	4798      	blx	r3
      n++;
 8001914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001916:	3301      	adds	r3, #1
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
 800191a:	e7e3      	b.n	80018e4 <chvprintf+0x10>
      continue;
    }
    p = tmpbuf;
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	64fb      	str	r3, [r7, #76]	; 0x4c
    s = tmpbuf;
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48
    left_align = FALSE;
 8001928:	2300      	movs	r3, #0
 800192a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if (*fmt == '-') {
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b2d      	cmp	r3, #45	; 0x2d
 8001934:	d105      	bne.n	8001942 <chvprintf+0x6e>
      fmt++;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3301      	adds	r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
      left_align = TRUE;
 800193c:	2301      	movs	r3, #1
 800193e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    }
    filler = ' ';
 8001942:	2320      	movs	r3, #32
 8001944:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    if (*fmt == '0') {
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b30      	cmp	r3, #48	; 0x30
 800194e:	d105      	bne.n	800195c <chvprintf+0x88>
      fmt++;
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	3301      	adds	r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
      filler = '0';
 8001956:	2330      	movs	r3, #48	; 0x30
 8001958:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    width = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
    while (TRUE) {
      c = *fmt++;
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	60ba      	str	r2, [r7, #8]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      if (c >= '0' && c <= '9')
 800196c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001970:	2b2f      	cmp	r3, #47	; 0x2f
 8001972:	d909      	bls.n	8001988 <chvprintf+0xb4>
 8001974:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001978:	2b39      	cmp	r3, #57	; 0x39
 800197a:	d805      	bhi.n	8001988 <chvprintf+0xb4>
        c -= '0';
 800197c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001980:	3b30      	subs	r3, #48	; 0x30
 8001982:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001986:	e009      	b.n	800199c <chvprintf+0xc8>
      else if (c == '*')
 8001988:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800198c:	2b2a      	cmp	r3, #42	; 0x2a
 800198e:	d110      	bne.n	80019b2 <chvprintf+0xde>
        c = va_arg(ap, int);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	1d1a      	adds	r2, r3, #4
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      else
        break;
      width = width * 10 + c;
 800199c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	461a      	mov	r2, r3
 80019a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019ac:	4413      	add	r3, r2
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80019b0:	e7d6      	b.n	8001960 <chvprintf+0x8c>
    }
    precision = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (c == '.') {
 80019b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019ba:	2b2e      	cmp	r3, #46	; 0x2e
 80019bc:	d129      	bne.n	8001a12 <chvprintf+0x13e>
      while (TRUE) {
        c = *fmt++;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	60ba      	str	r2, [r7, #8]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (c >= '0' && c <= '9')
 80019ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019ce:	2b2f      	cmp	r3, #47	; 0x2f
 80019d0:	d909      	bls.n	80019e6 <chvprintf+0x112>
 80019d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019d6:	2b39      	cmp	r3, #57	; 0x39
 80019d8:	d805      	bhi.n	80019e6 <chvprintf+0x112>
          c -= '0';
 80019da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019de:	3b30      	subs	r3, #48	; 0x30
 80019e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80019e4:	e009      	b.n	80019fa <chvprintf+0x126>
        else if (c == '*')
 80019e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019ea:	2b2a      	cmp	r3, #42	; 0x2a
 80019ec:	d111      	bne.n	8001a12 <chvprintf+0x13e>
          c = va_arg(ap, int);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	1d1a      	adds	r2, r3, #4
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        else
          break;
        precision *= 10;
 80019fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        precision += c;
 8001a06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a0c:	4413      	add	r3, r2
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a10:	e7d5      	b.n	80019be <chvprintf+0xea>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8001a12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a16:	2b6c      	cmp	r3, #108	; 0x6c
 8001a18:	d003      	beq.n	8001a22 <chvprintf+0x14e>
 8001a1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a1e:	2b4c      	cmp	r3, #76	; 0x4c
 8001a20:	d10d      	bne.n	8001a3e <chvprintf+0x16a>
      is_long = TRUE;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      if (*fmt)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01a      	beq.n	8001a66 <chvprintf+0x192>
        c = *fmt++;
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	60ba      	str	r2, [r7, #8]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001a3c:	e014      	b.n	8001a68 <chvprintf+0x194>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
 8001a3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a42:	2b40      	cmp	r3, #64	; 0x40
 8001a44:	d905      	bls.n	8001a52 <chvprintf+0x17e>
 8001a46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a4a:	2b5a      	cmp	r3, #90	; 0x5a
 8001a4c:	d801      	bhi.n	8001a52 <chvprintf+0x17e>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <chvprintf+0x180>
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001a58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001a64:	e000      	b.n	8001a68 <chvprintf+0x194>
        c = *fmt++;
 8001a66:	bf00      	nop

    /* Command decoding.*/
    switch (c) {
 8001a68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a6c:	3b44      	subs	r3, #68	; 0x44
 8001a6e:	2b34      	cmp	r3, #52	; 0x34
 8001a70:	f200 8111 	bhi.w	8001c96 <chvprintf+0x3c2>
 8001a74:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <chvprintf+0x1a8>)
 8001a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7a:	bf00      	nop
 8001a7c:	08001bb3 	.word	0x08001bb3
 8001a80:	08001c97 	.word	0x08001c97
 8001a84:	08001c97 	.word	0x08001c97
 8001a88:	08001c97 	.word	0x08001c97
 8001a8c:	08001c97 	.word	0x08001c97
 8001a90:	08001bb3 	.word	0x08001bb3
 8001a94:	08001c97 	.word	0x08001c97
 8001a98:	08001c97 	.word	0x08001c97
 8001a9c:	08001c97 	.word	0x08001c97
 8001aa0:	08001c97 	.word	0x08001c97
 8001aa4:	08001c97 	.word	0x08001c97
 8001aa8:	08001c61 	.word	0x08001c61
 8001aac:	08001c97 	.word	0x08001c97
 8001ab0:	08001c97 	.word	0x08001c97
 8001ab4:	08001c97 	.word	0x08001c97
 8001ab8:	08001c97 	.word	0x08001c97
 8001abc:	08001c97 	.word	0x08001c97
 8001ac0:	08001c59 	.word	0x08001c59
 8001ac4:	08001c97 	.word	0x08001c97
 8001ac8:	08001c97 	.word	0x08001c97
 8001acc:	08001c51 	.word	0x08001c51
 8001ad0:	08001c97 	.word	0x08001c97
 8001ad4:	08001c97 	.word	0x08001c97
 8001ad8:	08001c97 	.word	0x08001c97
 8001adc:	08001c97 	.word	0x08001c97
 8001ae0:	08001c97 	.word	0x08001c97
 8001ae4:	08001c97 	.word	0x08001c97
 8001ae8:	08001c97 	.word	0x08001c97
 8001aec:	08001c97 	.word	0x08001c97
 8001af0:	08001c97 	.word	0x08001c97
 8001af4:	08001c97 	.word	0x08001c97
 8001af8:	08001b51 	.word	0x08001b51
 8001afc:	08001bb3 	.word	0x08001bb3
 8001b00:	08001c97 	.word	0x08001c97
 8001b04:	08001bf5 	.word	0x08001bf5
 8001b08:	08001c97 	.word	0x08001c97
 8001b0c:	08001c97 	.word	0x08001c97
 8001b10:	08001bb3 	.word	0x08001bb3
 8001b14:	08001c97 	.word	0x08001c97
 8001b18:	08001c97 	.word	0x08001c97
 8001b1c:	08001c97 	.word	0x08001c97
 8001b20:	08001c97 	.word	0x08001c97
 8001b24:	08001c97 	.word	0x08001c97
 8001b28:	08001c61 	.word	0x08001c61
 8001b2c:	08001c97 	.word	0x08001c97
 8001b30:	08001c97 	.word	0x08001c97
 8001b34:	08001c97 	.word	0x08001c97
 8001b38:	08001b6b 	.word	0x08001b6b
 8001b3c:	08001c97 	.word	0x08001c97
 8001b40:	08001c59 	.word	0x08001c59
 8001b44:	08001c97 	.word	0x08001c97
 8001b48:	08001c97 	.word	0x08001c97
 8001b4c:	08001c51 	.word	0x08001c51
    case 'c':
      filler = ' ';
 8001b50:	2320      	movs	r3, #32
 8001b52:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      *p++ = va_arg(ap, int);
 8001b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	1d11      	adds	r1, r2, #4
 8001b60:	6079      	str	r1, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	e09b      	b.n	8001ca2 <chvprintf+0x3ce>
      break;
    case 's':
      filler = ' ';
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      if ((s = va_arg(ap, char *)) == 0)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	1d1a      	adds	r2, r3, #4
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <chvprintf+0x2b0>
        s = "(null)";
 8001b80:	4b7f      	ldr	r3, [pc, #508]	; (8001d80 <chvprintf+0x4ac>)
 8001b82:	64bb      	str	r3, [r7, #72]	; 0x48
      if (precision == 0)
 8001b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d102      	bne.n	8001b90 <chvprintf+0x2bc>
        precision = 32767;
 8001b8a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      for (p = s; *p && (--precision >= 0); p++)
 8001b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b94:	e002      	b.n	8001b9c <chvprintf+0x2c8>
 8001b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b98:	3301      	adds	r3, #1
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d07e      	beq.n	8001ca2 <chvprintf+0x3ce>
 8001ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	daf2      	bge.n	8001b96 <chvprintf+0x2c2>
 8001bb0:	e077      	b.n	8001ca2 <chvprintf+0x3ce>
      break;
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
 8001bb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <chvprintf+0x2f2>
        l = va_arg(ap, long);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	1d1a      	adds	r2, r3, #4
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc4:	e004      	b.n	8001bd0 <chvprintf+0x2fc>
      else
        l = va_arg(ap, int);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	1d1a      	adds	r2, r3, #4
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (l < 0) {
 8001bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	da07      	bge.n	8001be6 <chvprintf+0x312>
        *p++ = '-';
 8001bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001bdc:	222d      	movs	r2, #45	; 0x2d
 8001bde:	701a      	strb	r2, [r3, #0]
        l = -l;
 8001be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be2:	425b      	negs	r3, r3
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      p = ch_ltoa(p, l, 10);
 8001be6:	220a      	movs	r2, #10
 8001be8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001bec:	f7ff fe07 	bl	80017fe <ch_ltoa>
 8001bf0:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001bf2:	e056      	b.n	8001ca2 <chvprintf+0x3ce>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3307      	adds	r3, #7
 8001bf8:	f023 0307 	bic.w	r3, r3, #7
 8001bfc:	f103 0208 	add.w	r2, r3, #8
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	cb18      	ldmia	r3, {r3, r4}
 8001c04:	4618      	mov	r0, r3
 8001c06:	4621      	mov	r1, r4
 8001c08:	f7fe ff88 	bl	8000b1c <__aeabi_d2f>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
      if (f < 0) {
 8001c10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1c:	d50a      	bpl.n	8001c34 <chvprintf+0x360>
        *p++ = '-';
 8001c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001c24:	222d      	movs	r2, #45	; 0x2d
 8001c26:	701a      	strb	r2, [r3, #0]
        f = -f;
 8001c28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c2c:	eef1 7a67 	vneg.f32	s15, s15
 8001c30:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      }
      p = ftoa(p, f, precision);
 8001c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c36:	f7fe fce3 	bl	8000600 <__aeabi_f2d>
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	460d      	mov	r5, r1
 8001c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c40:	4619      	mov	r1, r3
 8001c42:	ec45 4b10 	vmov	d0, r4, r5
 8001c46:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c48:	f7ff fdea 	bl	8001820 <ftoa>
 8001c4c:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001c4e:	e028      	b.n	8001ca2 <chvprintf+0x3ce>
      break;
#endif
    case 'X':
    case 'x':
      c = 16;
 8001c50:	2310      	movs	r3, #16
 8001c52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001c56:	e006      	b.n	8001c66 <chvprintf+0x392>
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
 8001c58:	230a      	movs	r3, #10
 8001c5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001c5e:	e002      	b.n	8001c66 <chvprintf+0x392>
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
 8001c60:	2308      	movs	r3, #8
 8001c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
unsigned_common:
      if (is_long)
 8001c66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <chvprintf+0x3a6>
        l = va_arg(ap, unsigned long);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	1d1a      	adds	r2, r3, #4
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c78:	e004      	b.n	8001c84 <chvprintf+0x3b0>
      else
        l = va_arg(ap, unsigned int);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	1d1a      	adds	r2, r3, #4
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
      p = ch_ltoa(p, l, c);
 8001c84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c88:	461a      	mov	r2, r3
 8001c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c8c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c8e:	f7ff fdb6 	bl	80017fe <ch_ltoa>
 8001c92:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001c94:	e005      	b.n	8001ca2 <chvprintf+0x3ce>
      break;
    default:
      *p++ = c;
 8001c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001c9c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001ca0:	701a      	strb	r2, [r3, #0]
      break;
    }
    i = (int)(p - s);
 8001ca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	643b      	str	r3, [r7, #64]	; 0x40
    if ((width -= i) < 0)
 8001caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	da01      	bge.n	8001cbc <chvprintf+0x3e8>
      width = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
    if (left_align == FALSE)
 8001cbc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001cc0:	f083 0301 	eor.w	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <chvprintf+0x3fc>
      width = -width;
 8001cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ccc:	425b      	negs	r3, r3
 8001cce:	63bb      	str	r3, [r7, #56]	; 0x38
    if (width < 0) {
 8001cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	da36      	bge.n	8001d44 <chvprintf+0x470>
      if (*s == '-' && filler == '0') {
 8001cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b2d      	cmp	r3, #45	; 0x2d
 8001cdc:	d113      	bne.n	8001d06 <chvprintf+0x432>
 8001cde:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001ce2:	2b30      	cmp	r3, #48	; 0x30
 8001ce4:	d10f      	bne.n	8001d06 <chvprintf+0x432>
        streamPut(chp, (uint8_t)*s++);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cee:	1c59      	adds	r1, r3, #1
 8001cf0:	64b9      	str	r1, [r7, #72]	; 0x48
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	4790      	blx	r2
        n++;
 8001cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
        i--;
 8001d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d02:	3b01      	subs	r3, #1
 8001d04:	643b      	str	r3, [r7, #64]	; 0x40
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001d10:	4611      	mov	r1, r2
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	4798      	blx	r3
        n++;
 8001d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d18:	3301      	adds	r3, #1
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
      } while (++width != 0);
 8001d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1e:	3301      	adds	r3, #1
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1ee      	bne.n	8001d06 <chvprintf+0x432>
 8001d28:	e00c      	b.n	8001d44 <chvprintf+0x470>
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d32:	1c59      	adds	r1, r3, #1
 8001d34:	64b9      	str	r1, [r7, #72]	; 0x48
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	4790      	blx	r2
      n++;
 8001d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d40:	3301      	adds	r3, #1
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
    while (--i >= 0) {
 8001d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d46:	3b01      	subs	r3, #1
 8001d48:	643b      	str	r3, [r7, #64]	; 0x40
 8001d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	daec      	bge.n	8001d2a <chvprintf+0x456>
 8001d50:	e00d      	b.n	8001d6e <chvprintf+0x49a>
    }

    while (width) {
      streamPut(chp, (uint8_t)filler);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	4798      	blx	r3
      n++;
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d64:	3301      	adds	r3, #1
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
      width--;
 8001d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	63bb      	str	r3, [r7, #56]	; 0x38
    while (width) {
 8001d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ee      	bne.n	8001d52 <chvprintf+0x47e>
 8001d74:	e5b6      	b.n	80018e4 <chvprintf+0x10>
    }
  }
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3750      	adds	r7, #80	; 0x50
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	08008f6c 	.word	0x08008f6c

08001d84 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001d84:	b40e      	push	{r1, r2, r3}
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001d8e:	f107 0320 	add.w	r3, r7, #32
 8001d92:	60bb      	str	r3, [r7, #8]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	69f9      	ldr	r1, [r7, #28]
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff fd9b 	bl	80018d4 <chvprintf>
 8001d9e:	60f8      	str	r0, [r7, #12]
  va_end(ap);

  return formatted_bytes;
 8001da0:	68fb      	ldr	r3, [r7, #12]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dac:	b003      	add	sp, #12
 8001dae:	4770      	bx	lr

08001db0 <port_lock.lto_priv.2>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	2320      	movs	r3, #32
 8001db8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <port_unlock.lto_priv.0>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <port_lock_from_isr.lto_priv.7>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0

  port_lock();
 8001de8:	f7ff ffe2 	bl	8001db0 <port_lock.lto_priv.2>
}
 8001dec:	bd80      	pop	{r7, pc}

08001dee <port_unlock_from_isr.lto_priv.5>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8001dee:	b580      	push	{r7, lr}
 8001df0:	af00      	add	r7, sp, #0

  port_unlock();
 8001df2:	f7ff ffea 	bl	8001dca <port_unlock.lto_priv.0>
}
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 8001dfc:	f7ff fff2 	bl	8001de4 <port_lock_from_isr.lto_priv.7>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 8001e06:	f7ff fff2 	bl	8001dee <port_unlock_from_isr.lto_priv.5>
}
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <osalSysLockFromISR>:
static inline void osalSysLockFromISR(void) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  chSysLockFromISR();
 8001e10:	f7ff fff2 	bl	8001df8 <chSysLockFromISR>
}
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <osalSysUnlockFromISR>:
static inline void osalSysUnlockFromISR(void) {
 8001e16:	b580      	push	{r7, lr}
 8001e18:	af00      	add	r7, sp, #0
  chSysUnlockFromISR();
 8001e1a:	f7ff fff2 	bl	8001e02 <chSysUnlockFromISR>
}
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <get_descriptor>:
 * handled here.
 */
static const USBDescriptor *get_descriptor(USBDriver *usbp,
                                           uint8_t dtype,
                                           uint8_t dindex,
                                           uint16_t lang) {
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	4608      	mov	r0, r1
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4603      	mov	r3, r0
 8001e30:	70fb      	strb	r3, [r7, #3]
 8001e32:	460b      	mov	r3, r1
 8001e34:	70bb      	strb	r3, [r7, #2]
 8001e36:	4613      	mov	r3, r2
 8001e38:	803b      	strh	r3, [r7, #0]

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d005      	beq.n	8001e4c <get_descriptor+0x2c>
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d005      	beq.n	8001e50 <get_descriptor+0x30>
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10b      	bne.n	8001e60 <get_descriptor+0x40>
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <get_descriptor+0x50>)
 8001e4a:	e00a      	b.n	8001e62 <get_descriptor+0x42>
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <get_descriptor+0x54>)
 8001e4e:	e008      	b.n	8001e62 <get_descriptor+0x42>
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8001e50:	78bb      	ldrb	r3, [r7, #2]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d804      	bhi.n	8001e60 <get_descriptor+0x40>
      return &vcom_strings[dindex];
 8001e56:	78bb      	ldrb	r3, [r7, #2]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <get_descriptor+0x58>)
 8001e5c:	4413      	add	r3, r2
 8001e5e:	e000      	b.n	8001e62 <get_descriptor+0x42>
  }
  return NULL;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	08008f88 	.word	0x08008f88
 8001e74:	08008fd4 	.word	0x08008fd4
 8001e78:	08009048 	.word	0x08009048

08001e7c <usb_event>:
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
  extern SerialUSBDriver SDU1;

  switch (event) {
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d831      	bhi.n	8001ef2 <usb_event+0x76>
 8001e8e:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <usb_event+0x18>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001ed5 	.word	0x08001ed5
 8001e98:	08001ef3 	.word	0x08001ef3
 8001e9c:	08001eb1 	.word	0x08001eb1
 8001ea0:	08001ed5 	.word	0x08001ed5
 8001ea4:	08001ed5 	.word	0x08001ed5
 8001ea8:	08001ee5 	.word	0x08001ee5
 8001eac:	08001ef3 	.word	0x08001ef3
  case USB_EVENT_ADDRESS:
    return;
  case USB_EVENT_CONFIGURED:
    chSysLockFromISR();
 8001eb0:	f7ff ffa2 	bl	8001df8 <chSysLockFromISR>

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8001eb4:	4a10      	ldr	r2, [pc, #64]	; (8001ef8 <usb_event+0x7c>)
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f004 fb90 	bl	80065de <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <usb_event+0x80>)
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f004 fb8b 	bl	80065de <usbInitEndpointI>

    /* Resetting the state of the CDC subsystem.*/
    sduConfigureHookI(&SDU1);
 8001ec8:	480d      	ldr	r0, [pc, #52]	; (8001f00 <usb_event+0x84>)
 8001eca:	f005 fd93 	bl	80079f4 <sduConfigureHookI>

    chSysUnlockFromISR();
 8001ece:	f7ff ff98 	bl	8001e02 <chSysUnlockFromISR>
 8001ed2:	e00e      	b.n	8001ef2 <usb_event+0x76>
  case USB_EVENT_RESET:
    /* Falls into.*/
  case USB_EVENT_UNCONFIGURED:
    /* Falls into.*/
  case USB_EVENT_SUSPEND:
    chSysLockFromISR();
 8001ed4:	f7ff ff90 	bl	8001df8 <chSysLockFromISR>

    /* Disconnection event on suspend.*/
    sduSuspendHookI(&SDU1);
 8001ed8:	4809      	ldr	r0, [pc, #36]	; (8001f00 <usb_event+0x84>)
 8001eda:	f005 fd55 	bl	8007988 <sduSuspendHookI>

    chSysUnlockFromISR();
 8001ede:	f7ff ff90 	bl	8001e02 <chSysUnlockFromISR>
 8001ee2:	e006      	b.n	8001ef2 <usb_event+0x76>
    return;
  case USB_EVENT_WAKEUP:
    chSysLockFromISR();
 8001ee4:	f7ff ff88 	bl	8001df8 <chSysLockFromISR>

    /* Disconnection event on suspend.*/
    sduWakeupHookI(&SDU1);
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <usb_event+0x84>)
 8001eea:	f005 fd6f 	bl	80079cc <sduWakeupHookI>

    chSysUnlockFromISR();
 8001eee:	f7ff ff88 	bl	8001e02 <chSysUnlockFromISR>
    return;
  case USB_EVENT_STALLED:
    return;
  }
  return;
}
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	08009068 	.word	0x08009068
 8001efc:	0800908c 	.word	0x0800908c
 8001f00:	20000cc8 	.word	0x20000cc8

08001f04 <sof_handler>:

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  (void)usbp;

  osalSysLockFromISR();
 8001f0c:	f7ff ff7e 	bl	8001e0c <osalSysLockFromISR>
  sduSOFHookI(&SDU1);
 8001f10:	4803      	ldr	r0, [pc, #12]	; (8001f20 <sof_handler+0x1c>)
 8001f12:	f005 fdd3 	bl	8007abc <sduSOFHookI>
  osalSysUnlockFromISR();
 8001f16:	f7ff ff7e 	bl	8001e16 <osalSysUnlockFromISR>
}
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000cc8 	.word	0x20000cc8

08001f24 <port_lock.lto_priv.3>:
static inline void port_lock(void) {
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	2320      	movs	r3, #32
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f383 8811 	msr	BASEPRI, r3
}
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <port_unlock.lto_priv.1>:
static inline void port_unlock(void) {
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f383 8811 	msr	BASEPRI, r3
}
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <st_lld_get_counter>:
 *
 * @return              The counter value.
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  return (systime_t)STM32_ST_TIM->CNT;
 8001f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <port_timer_get_time>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0

  return stGetCounter();
 8001f70:	f7ff fff2 	bl	8001f58 <st_lld_get_counter>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <chSysLock>:
static inline void chSysLock(void) {
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	af00      	add	r7, sp, #0
  port_lock();
 8001f7e:	f7ff ffd1 	bl	8001f24 <port_lock.lto_priv.3>
}
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <chSysUnlock>:
static inline void chSysUnlock(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  port_unlock();
 8001f88:	f7ff ffd9 	bl	8001f3e <port_unlock.lto_priv.1>
}
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <chVTGetSystemTimeX>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	af00      	add	r7, sp, #0

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 8001f92:	f7ff ffeb 	bl	8001f6c <port_timer_get_time>
 8001f96:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <chVTGetSystemTime>:
 *
 * @return              The system time in ticks.
 *
 * @api
 */
static inline systime_t chVTGetSystemTime(void) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  systime_t systime;

  chSysLock();
 8001fa2:	f7ff ffea 	bl	8001f7a <chSysLock>
  systime = chVTGetSystemTimeX();
 8001fa6:	f7ff fff2 	bl	8001f8e <chVTGetSystemTimeX>
 8001faa:	6078      	str	r0, [r7, #4]
  chSysUnlock();
 8001fac:	f7ff ffea 	bl	8001f84 <chSysUnlock>

  return systime;
 8001fb0:	687b      	ldr	r3, [r7, #4]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <chRegSetThreadName>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <chRegSetThreadName+0x1c>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
#else
  (void)name;
#endif
}
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000be8 	.word	0x20000be8

08001fdc <Thread1>:

/*
 * LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8001fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe0:	b091      	sub	sp, #68	; 0x44
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6378      	str	r0, [r7, #52]	; 0x34

  (void)arg;
modbus_driver_thread();
 8001fe6:	f000 fa57 	bl	8002498 <modbus_driver_thread>
  chRegSetThreadName("blinker");
 8001fea:	4856      	ldr	r0, [pc, #344]	; (8002144 <Thread1+0x168>)
 8001fec:	f7ff ffe6 	bl	8001fbc <chRegSetThreadName>
  while (true) {
    systime_t time;

    time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 8001ff0:	4b55      	ldr	r3, [pc, #340]	; (8002148 <Thread1+0x16c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d101      	bne.n	8001ffe <Thread1+0x22>
 8001ffa:	23fa      	movs	r3, #250	; 0xfa
 8001ffc:	e001      	b.n	8002002 <Thread1+0x26>
 8001ffe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
    palClearLine(LINE_LED5);
 8002004:	4a51      	ldr	r2, [pc, #324]	; (800214c <Thread1+0x170>)
 8002006:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800200a:	8353      	strh	r3, [r2, #26]
    chThdSleepMilliseconds(time);
 800200c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800200e:	4619      	mov	r1, r3
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	460b      	mov	r3, r1
 8002016:	4614      	mov	r4, r2
 8002018:	00a0      	lsls	r0, r4, #2
 800201a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800201c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800201e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
 8002022:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
 8002028:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800202c:	185b      	adds	r3, r3, r1
 800202e:	eb44 0402 	adc.w	r4, r4, r2
 8002032:	00e0      	lsls	r0, r4, #3
 8002034:	6278      	str	r0, [r7, #36]	; 0x24
 8002036:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002038:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800203c:	6278      	str	r0, [r7, #36]	; 0x24
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	623b      	str	r3, [r7, #32]
 8002042:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002046:	1a5b      	subs	r3, r3, r1
 8002048:	eb64 0402 	sbc.w	r4, r4, r2
 800204c:	0120      	lsls	r0, r4, #4
 800204e:	61f8      	str	r0, [r7, #28]
 8002050:	69f8      	ldr	r0, [r7, #28]
 8002052:	ea40 7013 	orr.w	r0, r0, r3, lsr #28
 8002056:	61f8      	str	r0, [r7, #28]
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002060:	185b      	adds	r3, r3, r1
 8002062:	eb44 0402 	adc.w	r4, r4, r2
 8002066:	0122      	lsls	r2, r4, #4
 8002068:	617a      	str	r2, [r7, #20]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8002070:	617a      	str	r2, [r7, #20]
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800207a:	4619      	mov	r1, r3
 800207c:	4622      	mov	r2, r4
 800207e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002082:	f04f 0400 	mov.w	r4, #0
 8002086:	18cd      	adds	r5, r1, r3
 8002088:	eb42 0604 	adc.w	r6, r2, r4
 800208c:	4628      	mov	r0, r5
 800208e:	4631      	mov	r1, r6
 8002090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	f7fe fd90 	bl	8000bbc <__aeabi_uldivmod>
 800209c:	4603      	mov	r3, r0
 800209e:	460c      	mov	r4, r1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fd19 	bl	8002ad8 <chThdSleep>
    palSetLine(LINE_LED5);
 80020a6:	4a29      	ldr	r2, [pc, #164]	; (800214c <Thread1+0x170>)
 80020a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ac:	8313      	strh	r3, [r2, #24]
    chThdSleepMilliseconds(time);
 80020ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4614      	mov	r4, r2
 80020ba:	00a0      	lsls	r0, r4, #2
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80020ce:	185b      	adds	r3, r3, r1
 80020d0:	eb44 0402 	adc.w	r4, r4, r2
 80020d4:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 80020d8:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 80020dc:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 80020e0:	4653      	mov	r3, sl
 80020e2:	465c      	mov	r4, fp
 80020e4:	1a5b      	subs	r3, r3, r1
 80020e6:	eb64 0402 	sbc.w	r4, r4, r2
 80020ea:	ea4f 1904 	mov.w	r9, r4, lsl #4
 80020ee:	ea49 7913 	orr.w	r9, r9, r3, lsr #28
 80020f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020f6:	4643      	mov	r3, r8
 80020f8:	464c      	mov	r4, r9
 80020fa:	185b      	adds	r3, r3, r1
 80020fc:	eb44 0402 	adc.w	r4, r4, r2
 8002100:	0122      	lsls	r2, r4, #4
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002114:	4619      	mov	r1, r3
 8002116:	4622      	mov	r2, r4
 8002118:	f240 33e7 	movw	r3, #999	; 0x3e7
 800211c:	f04f 0400 	mov.w	r4, #0
 8002120:	18cd      	adds	r5, r1, r3
 8002122:	eb42 0604 	adc.w	r6, r2, r4
 8002126:	4628      	mov	r0, r5
 8002128:	4631      	mov	r1, r6
 800212a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	f7fe fd43 	bl	8000bbc <__aeabi_uldivmod>
 8002136:	4603      	mov	r3, r0
 8002138:	460c      	mov	r4, r1
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fccc 	bl	8002ad8 <chThdSleep>
 8002140:	e756      	b.n	8001ff0 <Thread1+0x14>
 8002142:	bf00      	nop
 8002144:	080090dc 	.word	0x080090dc
 8002148:	080090c0 	.word	0x080090c0
 800214c:	40020c00 	.word	0x40020c00

08002150 <main>:
}

/*
 * Application entry point.
 */
int main(void) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af02      	add	r7, sp, #8
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
#if 1
  halInit();
 8002156:	f005 feeb 	bl	8007f30 <halInit>
  chSysInit();
 800215a:	f001 f901 	bl	8003360 <chSysInit>

  /* Initializes a serial-over-USB CDC driver.*/
  sduObjectInit(&SDU1);
 800215e:	4833      	ldr	r0, [pc, #204]	; (800222c <main+0xdc>)
 8002160:	f005 fba4 	bl	80078ac <sduObjectInit>
  sduStart(&SDU1, &serusbcfg);
 8002164:	4932      	ldr	r1, [pc, #200]	; (8002230 <main+0xe0>)
 8002166:	4831      	ldr	r0, [pc, #196]	; (800222c <main+0xdc>)
 8002168:	f005 fbda 	bl	8007920 <sduStart>
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 800216c:	4b30      	ldr	r3, [pc, #192]	; (8002230 <main+0xe0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	4a2f      	ldr	r2, [pc, #188]	; (8002230 <main+0xe0>)
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002178:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800217a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
  chThdSleepMilliseconds(1500);
 8002180:	f643 2098 	movw	r0, #15000	; 0x3a98
 8002184:	f000 fca8 	bl	8002ad8 <chThdSleep>
  usbStart(serusbcfg.usbp, &usbcfg);
 8002188:	4b29      	ldr	r3, [pc, #164]	; (8002230 <main+0xe0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4929      	ldr	r1, [pc, #164]	; (8002234 <main+0xe4>)
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fa00 	bl	8006594 <usbStart>
  usbConnectBus(serusbcfg.usbp);
 8002194:	4b26      	ldr	r3, [pc, #152]	; (8002230 <main+0xe0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219a:	4a25      	ldr	r2, [pc, #148]	; (8002230 <main+0xe0>)
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80021a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021a2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80021a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Creates the blinker thread.*/
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80021a8:	2300      	movs	r3, #0
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	4b22      	ldr	r3, [pc, #136]	; (8002238 <main+0xe8>)
 80021ae:	2280      	movs	r2, #128	; 0x80
 80021b0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80021b4:	4821      	ldr	r0, [pc, #132]	; (800223c <main+0xec>)
 80021b6:	f000 fc11 	bl	80029dc <chThdCreateStatic>

  /* L3GD20 Object Initialization.*/
  l3gd20ObjectInit(&L3GD20D1);
 80021ba:	4821      	ldr	r0, [pc, #132]	; (8002240 <main+0xf0>)
 80021bc:	f7ff f9ba 	bl	8001534 <l3gd20ObjectInit>

  /* Activates the L3GD20 driver.*/
  l3gd20Start(&L3GD20D1, &l3gd20cfg);
 80021c0:	4920      	ldr	r1, [pc, #128]	; (8002244 <main+0xf4>)
 80021c2:	481f      	ldr	r0, [pc, #124]	; (8002240 <main+0xf0>)
 80021c4:	f7ff f9d0 	bl	8001568 <l3gd20Start>

  /* Normal main() thread activity, printing MEMS data on the SDU1.*/
  while (true) {
    l3gd20GyroscopeReadRaw(&L3GD20D1, gyroraw);
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <main+0xf0>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	491e      	ldr	r1, [pc, #120]	; (8002248 <main+0xf8>)
 80021d0:	481e      	ldr	r0, [pc, #120]	; (800224c <main+0xfc>)
 80021d2:	4798      	blx	r3
    //chprintf(chp, "L3GD20 Gyroscope raw data...\r\n");
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <main+0x100>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e004      	b.n	80021e6 <main+0x96>
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <main+0x100>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <main+0x100>)
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <main+0x100>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d9f6      	bls.n	80021dc <main+0x8c>
      //chprintf(chp, "%c-axis: %d\r\n", axisID[i], gyroraw[i]);
    }

    l3gd20GyroscopeReadCooked(&L3GD20D1, gyrocooked);
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <main+0xf0>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4917      	ldr	r1, [pc, #92]	; (8002254 <main+0x104>)
 80021f6:	4815      	ldr	r0, [pc, #84]	; (800224c <main+0xfc>)
 80021f8:	4798      	blx	r3
    //chprintf(chp, "L3GD20 Gyroscope cooked data...\r\n");
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <main+0x100>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e004      	b.n	800220c <main+0xbc>
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <main+0x100>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	4a11      	ldr	r2, [pc, #68]	; (8002250 <main+0x100>)
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <main+0x100>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d9f6      	bls.n	8002202 <main+0xb2>
      //chprintf(chp, "%c-axis: %.3f\r\n", axisID[i], gyrocooked[i]);
    }

    chThdSleepMilliseconds(100);
 8002214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002218:	f000 fc5e 	bl	8002ad8 <chThdSleep>
    cls(chp);
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <main+0x108>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	490e      	ldr	r1, [pc, #56]	; (800225c <main+0x10c>)
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fdae 	bl	8001d84 <chprintf>
 8002228:	e7ce      	b.n	80021c8 <main+0x78>
 800222a:	bf00      	nop
 800222c:	20000cc8 	.word	0x20000cc8
 8002230:	080090c0 	.word	0x080090c0
 8002234:	080090b0 	.word	0x080090b0
 8002238:	08001fdd 	.word	0x08001fdd
 800223c:	200011d8 	.word	0x200011d8
 8002240:	20001188 	.word	0x20001188
 8002244:	20000828 	.word	0x20000828
 8002248:	200011b8 	.word	0x200011b8
 800224c:	2000118c 	.word	0x2000118c
 8002250:	200011d0 	.word	0x200011d0
 8002254:	200011c4 	.word	0x200011c4
 8002258:	2000083c 	.word	0x2000083c
 800225c:	080090e4 	.word	0x080090e4

08002260 <timer_expired>:
systime_t start_time;
systime_t timeout;
#endif

bool timer_expired()
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
	return false;//((get_time()-start_time) >= timeout);
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <stop_timer>:

void stop_timer()
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
	start_time = 0;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <stop_timer+0x14>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
}
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	200013c0 	.word	0x200013c0

08002288 <restart_timer>:

void restart_timer()
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
#if __linux__
	start_time = get_time();
#else
	start_time = chVTGetSystemTime();
 800228c:	f7ff fe86 	bl	8001f9c <chVTGetSystemTime>
 8002290:	4602      	mov	r2, r0
 8002292:	4b01      	ldr	r3, [pc, #4]	; (8002298 <restart_timer+0x10>)
 8002294:	601a      	str	r2, [r3, #0]
#endif
}
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200013c0 	.word	0x200013c0

0800229c <construct_response>:
uint16_t construct_response(uint8_t* modbus_tx_frame, uint8_t* modbus_rx_frame,
                        uint16_t tx_data_len)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	4613      	mov	r3, r2
 80022a8:	80fb      	strh	r3, [r7, #6]
    //reconstruct packet
    //
    modbus_tx_frame[MB_TX_FRAME_ADDR] = modbus_rx_frame[MB_FRAME_SLAVE_ADDR];
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	701a      	strb	r2, [r3, #0]
    modbus_tx_frame[MB_TX_FRAME_FUNCTION] = modbus_rx_frame[MB_FRAME_FUNCTION];
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3301      	adds	r3, #1
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	7852      	ldrb	r2, [r2, #1]
 80022ba:	701a      	strb	r2, [r3, #0]
    modbus_tx_frame[MB_TX_FRAME_COUNT] = tx_data_len;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3302      	adds	r3, #2
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]

    uint16_t crc_index = tx_data_len + 2;
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	3302      	adds	r3, #2
 80022ca:	82fb      	strh	r3, [r7, #22]

    uint16_t calculated_crc = usMBCRC16(modbus_tx_frame, crc_index);
 80022cc:	8afb      	ldrh	r3, [r7, #22]
 80022ce:	4619      	mov	r1, r3
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f935 	bl	8002540 <usMBCRC16>
 80022d6:	4603      	mov	r3, r0
 80022d8:	82bb      	strh	r3, [r7, #20]

    modbus_tx_frame[crc_index] = (uint8_t)calculated_crc;
 80022da:	8afb      	ldrh	r3, [r7, #22]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	8aba      	ldrh	r2, [r7, #20]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]
    modbus_tx_frame[crc_index+1] = (uint8_t)(calculated_crc >> 8);
 80022e6:	8afb      	ldrh	r3, [r7, #22]
 80022e8:	3301      	adds	r3, #1
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4413      	add	r3, r2
 80022ee:	8aba      	ldrh	r2, [r7, #20]
 80022f0:	0a12      	lsrs	r2, r2, #8
 80022f2:	b292      	uxth	r2, r2
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	701a      	strb	r2, [r3, #0]

    return crc_index + 2;
 80022f8:	8afb      	ldrh	r3, [r7, #22]
 80022fa:	3302      	adds	r3, #2
 80022fc:	b29b      	uxth	r3, r3
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <send_response>:
#if __linux__
int fd = 0;
#endif

void send_response(uint8_t* modbus_frame, uint16_t len)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
    //send packets to uart here
#if __linux__
	int bytes_written = write(fd, modbus_frame, len);
#else
	uartStartSend(chp, len, modbus_frame);
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <send_response+0x20>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	8879      	ldrh	r1, [r7, #2]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4618      	mov	r0, r3
 800231e:	f003 fe72 	bl	8006006 <uartStartSend>
#endif
}
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	2000083c 	.word	0x2000083c

0800232c <is_frame_valid>:

bool is_frame_valid(uint8_t* mb_frame, uint16_t len)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
	bool ret_val = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]
	uint16_t calculated_crc = usMBCRC16(mb_frame, len);
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	4619      	mov	r1, r3
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f8fd 	bl	8002540 <usMBCRC16>
 8002346:	4603      	mov	r3, r0
 8002348:	81bb      	strh	r3, [r7, #12]
	uint16_t aquired_crc = (mb_frame[MB_FRAME_CRC_HI] & 0x00FF)<<8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3306      	adds	r3, #6
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	021b      	lsls	r3, r3, #8
				| mb_frame[MB_FRAME_CRC_LOW];
 8002352:	b21a      	sxth	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3307      	adds	r3, #7
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b21b      	sxth	r3, r3
 800235c:	4313      	orrs	r3, r2
 800235e:	b21b      	sxth	r3, r3
	uint16_t aquired_crc = (mb_frame[MB_FRAME_CRC_HI] & 0x00FF)<<8
 8002360:	817b      	strh	r3, [r7, #10]

	if (calculated_crc == aquired_crc) {
 8002362:	89ba      	ldrh	r2, [r7, #12]
 8002364:	897b      	ldrh	r3, [r7, #10]
 8002366:	429a      	cmp	r2, r3
 8002368:	d101      	bne.n	800236e <is_frame_valid+0x42>
		ret_val = true;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
	}
	return ret_val;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <process_request>:

bool process_request(uint8_t* frame, uint16_t len, uint16_t num_reg_requested,
			uint16_t start_addr)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	4608      	mov	r0, r1
 8002382:	4611      	mov	r1, r2
 8002384:	461a      	mov	r2, r3
 8002386:	4603      	mov	r3, r0
 8002388:	817b      	strh	r3, [r7, #10]
 800238a:	460b      	mov	r3, r1
 800238c:	813b      	strh	r3, [r7, #8]
 800238e:	4613      	mov	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]
	if ((num_reg_requested + start_addr) > MAX_NUM_MODBUS_REGISTERS) {
 8002392:	893a      	ldrh	r2, [r7, #8]
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	4413      	add	r3, r2
 8002398:	2b0c      	cmp	r3, #12
 800239a:	dd01      	ble.n	80023a0 <process_request+0x28>
		//construct and return error
        return false;
 800239c:	2300      	movs	r3, #0
 800239e:	e00a      	b.n	80023b6 <process_request+0x3e>
	}

    memcpy(&frame[MB_TX_FRAME_DATA], &modbus_registers[start_addr], num_reg_requested);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1cd8      	adds	r0, r3, #3
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <process_request+0x48>)
 80023aa:	4413      	add	r3, r2
 80023ac:	893a      	ldrh	r2, [r7, #8]
 80023ae:	4619      	mov	r1, r3
 80023b0:	f006 fc48 	bl	8008c44 <memcpy>

    return true;
 80023b4:	2301      	movs	r3, #1
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200013a8 	.word	0x200013a8

080023c4 <poll_uart_for_character>:

int8_t poll_uart_for_character()
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
    int8_t ch = -1;
 80023ca:	23ff      	movs	r3, #255	; 0xff
 80023cc:	71fb      	strb	r3, [r7, #7]
        return -1;//perror("Error is");
    } else {
        return -1;
    }
#else
	uartStartReceive(chp, 1, (void*)&ch);
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <poll_uart_for_character+0x24>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	1dfa      	adds	r2, r7, #7
 80023d4:	2101      	movs	r1, #1
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 fe2a 	bl	8006030 <uartStartReceive>
	return ch;
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
#endif
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	2000083c 	.word	0x2000083c

080023ec <handle_rx_packet>:
    }
}


void handle_rx_packet(uint8_t* mb_frame, uint16_t mb_frame_size)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
	int16_t ch = -1;
 80023f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023fc:	81fb      	strh	r3, [r7, #14]
	uint8_t frame_ptr = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	737b      	strb	r3, [r7, #13]
    bool packet_received = false;
 8002402:	2300      	movs	r3, #0
 8002404:	733b      	strb	r3, [r7, #12]
 8002406:	e039      	b.n	800247c <handle_rx_packet+0x90>
    //wait_for_start_signal();
	while (!packet_received) {
		while (ch < 0) {
			ch = poll_uart_for_character();
 8002408:	f7ff ffdc 	bl	80023c4 <poll_uart_for_character>
 800240c:	4603      	mov	r3, r0
 800240e:	81fb      	strh	r3, [r7, #14]
			if (frame_ptr == mb_frame_size) {
 8002410:	7b7b      	ldrb	r3, [r7, #13]
 8002412:	b29b      	uxth	r3, r3
 8002414:	887a      	ldrh	r2, [r7, #2]
 8002416:	429a      	cmp	r2, r3
 8002418:	d104      	bne.n	8002424 <handle_rx_packet+0x38>
				if (timer_expired()) {
 800241a:	f7ff ff21 	bl	8002260 <timer_expired>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <handle_rx_packet+0x40>
		while (ch < 0) {
 8002424:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002428:	2b00      	cmp	r3, #0
 800242a:	dbed      	blt.n	8002408 <handle_rx_packet+0x1c>
					break;
				}
			}
		}

		chprintf(chp, "got a char: %d\r\n", ch);
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <handle_rx_packet+0xa4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002434:	4917      	ldr	r1, [pc, #92]	; (8002494 <handle_rx_packet+0xa8>)
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fca4 	bl	8001d84 <chprintf>
		if (timer_expired()) {
 800243c:	f7ff ff10 	bl	8002260 <timer_expired>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00c      	beq.n	8002460 <handle_rx_packet+0x74>
			if (frame_ptr == mb_frame_size) {
 8002446:	7b7b      	ldrb	r3, [r7, #13]
 8002448:	b29b      	uxth	r3, r3
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	429a      	cmp	r2, r3
 800244e:	d102      	bne.n	8002456 <handle_rx_packet+0x6a>
                packet_received = true;
 8002450:	2301      	movs	r3, #1
 8002452:	733b      	strb	r3, [r7, #12]
			} else {

                frame_ptr = 0;
				stop_timer();
 8002454:	e00d      	b.n	8002472 <handle_rx_packet+0x86>
                frame_ptr = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	737b      	strb	r3, [r7, #13]
				stop_timer();
 800245a:	f7ff ff09 	bl	8002270 <stop_timer>
 800245e:	e008      	b.n	8002472 <handle_rx_packet+0x86>
			}
		} else {

                //printf("timer not expFrame ptr is: %d\n", frame_ptr);
			mb_frame[frame_ptr] = ch;
 8002460:	7b7b      	ldrb	r3, [r7, #13]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	89fa      	ldrh	r2, [r7, #14]
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]
			frame_ptr++;
 800246c:	7b7b      	ldrb	r3, [r7, #13]
 800246e:	3301      	adds	r3, #1
 8002470:	737b      	strb	r3, [r7, #13]
		}
        ch = -1;
 8002472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002476:	81fb      	strh	r3, [r7, #14]
        restart_timer();
 8002478:	f7ff ff06 	bl	8002288 <restart_timer>
	while (!packet_received) {
 800247c:	7b3b      	ldrb	r3, [r7, #12]
 800247e:	f083 0301 	eor.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1cd      	bne.n	8002424 <handle_rx_packet+0x38>
	}
}
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2000083c 	.word	0x2000083c
 8002494:	080090f0 	.word	0x080090f0

08002498 <modbus_driver_thread>:
#endif

#define MY_MB_ADDRESS 1

void modbus_driver_thread()
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
	uint8_t modbus_tx_frame[MODBUS_TX_FRAME_SIZE];
	uint8_t modbus_rx_frame[MODBUS_RX_FRAME_SIZE];

	timeout = TIME_US2I(2000);
 800249e:	4b25      	ldr	r3, [pc, #148]	; (8002534 <modbus_driver_thread+0x9c>)
 80024a0:	2214      	movs	r2, #20
 80024a2:	601a      	str	r2, [r3, #0]
	set_blocking (fd, 1);
#else
	/*
   * Activates the serial driver 1, PA9 and PA10 are routed to USART2.
   */
  uartStart(&UARTD6, &uart_cfg_1);
 80024a4:	4924      	ldr	r1, [pc, #144]	; (8002538 <modbus_driver_thread+0xa0>)
 80024a6:	4825      	ldr	r0, [pc, #148]	; (800253c <modbus_driver_thread+0xa4>)
 80024a8:	f003 fd98 	bl	8005fdc <uartStart>

#endif

	while (1) {
		handle_rx_packet(modbus_rx_frame, MODBUS_RX_FRAME_SIZE);
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	2108      	movs	r1, #8
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff9b 	bl	80023ec <handle_rx_packet>

        if((modbus_rx_frame[MB_FRAME_SLAVE_ADDR] == MY_MB_ADDRESS)
 80024b6:	793b      	ldrb	r3, [r7, #4]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d1f7      	bne.n	80024ac <modbus_driver_thread+0x14>
            && ((modbus_rx_frame[MB_FRAME_FUNCTION] == 0x03)
 80024bc:	797b      	ldrb	r3, [r7, #5]
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d002      	beq.n	80024c8 <modbus_driver_thread+0x30>
           || (modbus_rx_frame[MB_FRAME_FUNCTION] == 0x00))) {
 80024c2:	797b      	ldrb	r3, [r7, #5]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f1      	bne.n	80024ac <modbus_driver_thread+0x14>

            if (is_frame_valid(modbus_rx_frame, MODBUS_RX_FRAME_SIZE)) {
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	2108      	movs	r1, #8
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff2d 	bl	800232c <is_frame_valid>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0e9      	beq.n	80024ac <modbus_driver_thread+0x14>
                uint16_t num_reg_requested = (modbus_rx_frame[MB_FRAME_NO_REG_HI] & 0x00FF)<<8
 80024d8:	7a3b      	ldrb	r3, [r7, #8]
 80024da:	021b      	lsls	r3, r3, #8
                            | modbus_rx_frame[MB_FRAME_NO_REG_LOW];
 80024dc:	b21a      	sxth	r2, r3
 80024de:	7a7b      	ldrb	r3, [r7, #9]
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	4313      	orrs	r3, r2
 80024e4:	b21b      	sxth	r3, r3
                uint16_t num_reg_requested = (modbus_rx_frame[MB_FRAME_NO_REG_HI] & 0x00FF)<<8
 80024e6:	84fb      	strh	r3, [r7, #38]	; 0x26


                uint16_t start_addr = (modbus_rx_frame[MB_FRAME_STARTING_ADDR_HI] & 0x00FF)<<8
 80024e8:	79bb      	ldrb	r3, [r7, #6]
 80024ea:	021b      	lsls	r3, r3, #8
                            | modbus_rx_frame[MB_FRAME_STARTING_ADDR_LOW];
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	b21b      	sxth	r3, r3
 80024f2:	4313      	orrs	r3, r2
 80024f4:	b21b      	sxth	r3, r3
                uint16_t start_addr = (modbus_rx_frame[MB_FRAME_STARTING_ADDR_HI] & 0x00FF)<<8
 80024f6:	84bb      	strh	r3, [r7, #36]	; 0x24

                if (process_request(modbus_tx_frame, MODBUS_TX_FRAME_SIZE,
 80024f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80024fc:	f107 000c 	add.w	r0, r7, #12
 8002500:	2114      	movs	r1, #20
 8002502:	f7ff ff39 	bl	8002378 <process_request>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0cf      	beq.n	80024ac <modbus_driver_thread+0x14>
                                    num_reg_requested, start_addr)) {
                    uint16_t tx_packet_len = construct_response(modbus_tx_frame, modbus_rx_frame, num_reg_requested * 2);
 800250c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	1d39      	adds	r1, r7, #4
 8002514:	f107 030c 	add.w	r3, r7, #12
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff febf 	bl	800229c <construct_response>
 800251e:	4603      	mov	r3, r0
 8002520:	847b      	strh	r3, [r7, #34]	; 0x22
                    send_response(modbus_tx_frame, tx_packet_len);
 8002522:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff feec 	bl	8002308 <send_response>
 8002530:	e7bc      	b.n	80024ac <modbus_driver_thread+0x14>
 8002532:	bf00      	nop
 8002534:	200013c4 	.word	0x200013c4
 8002538:	20000808 	.word	0x20000808
 800253c:	20000a68 	.word	0x20000a68

08002540 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

int
usMBCRC16( unsigned char * pucFrame, int usLen )
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
    unsigned char           ucCRCHi = 0xFF;
 800254a:	23ff      	movs	r3, #255	; 0xff
 800254c:	73fb      	strb	r3, [r7, #15]
    unsigned char           ucCRCLo = 0xFF;
 800254e:	23ff      	movs	r3, #255	; 0xff
 8002550:	73bb      	strb	r3, [r7, #14]
 8002552:	e013      	b.n	800257c <usMBCRC16+0x3c>
    int             iIndex;

    while( usLen-- )
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	781a      	ldrb	r2, [r3, #0]
 800255c:	7bbb      	ldrb	r3, [r7, #14]
 800255e:	4053      	eors	r3, r2
 8002560:	b2db      	uxtb	r3, r3
 8002562:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( unsigned char )( ucCRCHi ^ aucCRCHi[iIndex] );
 8002564:	4a0d      	ldr	r2, [pc, #52]	; (800259c <usMBCRC16+0x5c>)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4413      	add	r3, r2
 800256a:	781a      	ldrb	r2, [r3, #0]
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	4053      	eors	r3, r2
 8002570:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8002572:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <usMBCRC16+0x60>)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4413      	add	r3, r2
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	1e5a      	subs	r2, r3, #1
 8002580:	603a      	str	r2, [r7, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1e6      	bne.n	8002554 <usMBCRC16+0x14>
    }
    return ( int )( ucCRCHi << 8 | ucCRCLo );
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	021a      	lsls	r2, r3, #8
 800258a:	7bbb      	ldrb	r3, [r7, #14]
 800258c:	4313      	orrs	r3, r2
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	08009104 	.word	0x08009104
 80025a0:	08009204 	.word	0x08009204

080025a4 <port_lock.lto_priv.36>:
static inline void port_lock(void) {
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	2320      	movs	r3, #32
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f383 8811 	msr	BASEPRI, r3
}
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <port_unlock.lto_priv.33>:
static inline void port_unlock(void) {
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f383 8811 	msr	BASEPRI, r3
}
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <chSysLock.lto_priv.41>:
static inline void chSysLock(void) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  port_lock();
 80025dc:	f7ff ffe2 	bl	80025a4 <port_lock.lto_priv.36>
}
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <chSysUnlock.lto_priv.39>:
static inline void chSysUnlock(void) {
 80025e2:	b580      	push	{r7, lr}
 80025e4:	af00      	add	r7, sp, #0
  port_unlock();
 80025e6:	f7ff ffea 	bl	80025be <port_unlock.lto_priv.33>
}
 80025ea:	bd80      	pop	{r7, pc}

080025ec <_core_init>:
/**
 * @brief   Low level memory manager initialization.
 *
 * @notapi
 */
void _core_init(void) {
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <_core_init+0x18>)
 80025f2:	4a05      	ldr	r2, [pc, #20]	; (8002608 <_core_init+0x1c>)
 80025f4:	601a      	str	r2, [r3, #0]
  ch_memcore.endmem  = __heap_end__;
 80025f6:	4b03      	ldr	r3, [pc, #12]	; (8002604 <_core_init+0x18>)
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <_core_init+0x20>)
 80025fa:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.nextmem = &static_heap[0];
  ch_memcore.endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	20000c60 	.word	0x20000c60
 8002608:	200013c8 	.word	0x200013c8
 800260c:	20010000 	.word	0x20010000

08002610 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4413      	add	r3, r2
 8002622:	1e5a      	subs	r2, r3, #1
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	425b      	negs	r3, r3
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <chCoreAllocAlignedWithOffsetI+0x68>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	461a      	mov	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	4413      	add	r3, r2
 800263a:	1e5a      	subs	r2, r3, #1
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	425b      	negs	r3, r3
 8002640:	4013      	ands	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
  next = p + size;
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4413      	add	r3, r2
 800264a:	613b      	str	r3, [r7, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <chCoreAllocAlignedWithOffsetI+0x68>)
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	429a      	cmp	r2, r3
 8002654:	d304      	bcc.n	8002660 <chCoreAllocAlignedWithOffsetI+0x50>
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <chCoreAllocAlignedWithOffsetI+0x68>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	429a      	cmp	r2, r3
 800265e:	d901      	bls.n	8002664 <chCoreAllocAlignedWithOffsetI+0x54>
    return NULL;
 8002660:	2300      	movs	r3, #0
 8002662:	e003      	b.n	800266c <chCoreAllocAlignedWithOffsetI+0x5c>
  }

  ch_memcore.nextmem = next;
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <chCoreAllocAlignedWithOffsetI+0x68>)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	6013      	str	r3, [r2, #0]

  return p;
 800266a:	697b      	ldr	r3, [r7, #20]
}
 800266c:	4618      	mov	r0, r3
 800266e:	371c      	adds	r7, #28
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	20000c60 	.word	0x20000c60

0800267c <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  void *p;

  chSysLock();
 8002688:	f7ff ffa6 	bl	80025d8 <chSysLock.lto_priv.41>
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff ffbd 	bl	8002610 <chCoreAllocAlignedWithOffsetI>
 8002696:	6178      	str	r0, [r7, #20]
  chSysUnlock();
 8002698:	f7ff ffa3 	bl	80025e2 <chSysUnlock.lto_priv.39>

  return p;
 800269c:	697b      	ldr	r3, [r7, #20]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <_heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <_heap_init+0x20>)
 80026ae:	4a07      	ldr	r2, [pc, #28]	; (80026cc <_heap_init+0x24>)
 80026b0:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <_heap_init+0x20>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	605a      	str	r2, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <_heap_init+0x20>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 80026be:	4804      	ldr	r0, [pc, #16]	; (80026d0 <_heap_init+0x28>)
 80026c0:	f000 f8a0 	bl	8002804 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000c68 	.word	0x20000c68
 80026cc:	0800267d 	.word	0x0800267d
 80026d0:	20000c74 	.word	0x20000c74

080026d4 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	605a      	str	r2, [r3, #4]
  mp->align = align;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	609a      	str	r2, [r3, #8]
  mp->provider = provider;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	60da      	str	r2, [r3, #12]
}
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 800270e:	2200      	movs	r2, #0
 8002710:	6839      	ldr	r1, [r7, #0]
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff ff7c 	bl	8002610 <chCoreAllocAlignedWithOffsetI>
 8002718:	4603      	mov	r3, r0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <chPoolObjectInit>:
 *
 * @init
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2204      	movs	r2, #4
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f7ff ffcd 	bl	80026d4 <chPoolObjectInitAligned>
}
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <dyn_list_init>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  dlp->next = (dyn_element_t *)dlp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	601a      	str	r2, [r3, #0]
}
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <_factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void _factory_init(void) {
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 800275c:	480e      	ldr	r0, [pc, #56]	; (8002798 <_factory_init+0x40>)
 800275e:	f000 f851 	bl	8002804 <chMtxObjectInit>
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
#endif

#if CH_CFG_FACTORY_OBJECTS_REGISTRY == TRUE
  dyn_list_init(&ch_factory.obj_list);
 8002762:	480e      	ldr	r0, [pc, #56]	; (800279c <_factory_init+0x44>)
 8002764:	f7ff ffec 	bl	8002740 <dyn_list_init>
  chPoolObjectInit(&ch_factory.obj_pool,
 8002768:	4a0d      	ldr	r2, [pc, #52]	; (80027a0 <_factory_init+0x48>)
 800276a:	2114      	movs	r1, #20
 800276c:	480d      	ldr	r0, [pc, #52]	; (80027a4 <_factory_init+0x4c>)
 800276e:	f7ff ffd8 	bl	8002722 <chPoolObjectInit>
                   sizeof (registered_object_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_GENERIC_BUFFERS == TRUE
  dyn_list_init(&ch_factory.buf_list);
 8002772:	480d      	ldr	r0, [pc, #52]	; (80027a8 <_factory_init+0x50>)
 8002774:	f7ff ffe4 	bl	8002740 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_SEMAPHORES == TRUE
  dyn_list_init(&ch_factory.sem_list);
 8002778:	480c      	ldr	r0, [pc, #48]	; (80027ac <_factory_init+0x54>)
 800277a:	f7ff ffe1 	bl	8002740 <dyn_list_init>
  chPoolObjectInit(&ch_factory.sem_pool,
 800277e:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <_factory_init+0x48>)
 8002780:	211c      	movs	r1, #28
 8002782:	480b      	ldr	r0, [pc, #44]	; (80027b0 <_factory_init+0x58>)
 8002784:	f7ff ffcd 	bl	8002722 <chPoolObjectInit>
                   sizeof (dyn_semaphore_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_MAILBOXES == TRUE
  dyn_list_init(&ch_factory.mbx_list);
 8002788:	480a      	ldr	r0, [pc, #40]	; (80027b4 <_factory_init+0x5c>)
 800278a:	f7ff ffd9 	bl	8002740 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
 800278e:	480a      	ldr	r0, [pc, #40]	; (80027b8 <_factory_init+0x60>)
 8002790:	f7ff ffd6 	bl	8002740 <dyn_list_init>
#endif
}
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000c84 	.word	0x20000c84
 800279c:	20000c94 	.word	0x20000c94
 80027a0:	08002705 	.word	0x08002705
 80027a4:	20000c98 	.word	0x20000c98
 80027a8:	20000ca8 	.word	0x20000ca8
 80027ac:	20000cac 	.word	0x20000cac
 80027b0:	20000cb0 	.word	0x20000cb0
 80027b4:	20000cc0 	.word	0x20000cc0
 80027b8:	20000cc4 	.word	0x20000cc4

080027bc <port_lock.lto_priv.38>:
static inline void port_lock(void) {
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	2320      	movs	r3, #32
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f383 8811 	msr	BASEPRI, r3
}
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <port_unlock.lto_priv.35>:
static inline void port_unlock(void) {
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	2300      	movs	r3, #0
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f383 8811 	msr	BASEPRI, r3
}
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <port_lock_from_isr.lto_priv.6>:
static inline void port_lock_from_isr(void) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  port_lock();
 80027f4:	f7ff ffe2 	bl	80027bc <port_lock.lto_priv.38>
}
 80027f8:	bd80      	pop	{r7, pc}

080027fa <port_unlock_from_isr.lto_priv.4>:
static inline void port_unlock_from_isr(void) {
 80027fa:	b580      	push	{r7, lr}
 80027fc:	af00      	add	r7, sp, #0
  port_unlock();
 80027fe:	f7ff ffea 	bl	80027d6 <port_unlock.lto_priv.35>
}
 8002802:	bd80      	pop	{r7, pc}

08002804 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fa80 	bl	8002d14 <queue_init.lto_priv.57>
  mp->owner = NULL;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	e01a      	b.n	8002868 <chEvtBroadcastFlagsI+0x48>
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	431a      	orrs	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d006      	beq.n	8002852 <chEvtBroadcastFlagsI+0x32>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <chEvtBroadcastFlagsI+0x42>
      chEvtSignalI(elp->listener, elp->events);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	4619      	mov	r1, r3
 800285c:	4610      	mov	r0, r2
 800285e:	f000 f80a 	bl	8002876 <chEvtSignalI>
    }
    elp = elp->next;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]
  while (elp != (event_listener_t *)esp) {
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	d1e0      	bne.n	8002832 <chEvtBroadcastFlagsI+0x12>
  }
}
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002892:	2b0a      	cmp	r3, #10
 8002894:	d106      	bne.n	80028a4 <chEvtSignalI+0x2e>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	4013      	ands	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10d      	bne.n	80028c0 <chEvtSignalI+0x4a>
      ((tp->state == CH_STATE_WTANDEVT) &&
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3020 	ldrb.w	r3, [r3, #32]
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80028aa:	2b0b      	cmp	r3, #11
 80028ac:	d10e      	bne.n	80028cc <chEvtSignalI+0x56>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	401a      	ands	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80028bc:	429a      	cmp	r2, r3
 80028be:	d105      	bne.n	80028cc <chEvtSignalI+0x56>
    tp->u.rdymsg = MSG_OK;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 ffca 	bl	8003860 <chSchReadyI>
  }
}
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]

  tp->prio      = prio;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	609a      	str	r2, [r3, #8]
  tp->state     = CH_STATE_WTSTART;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2202      	movs	r2, #2
 80028ea:	f883 2020 	strb.w	r2, [r3, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	63da      	str	r2, [r3, #60]	; 0x3c
  tp->mtxlist   = NULL;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	639a      	str	r2, [r3, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	635a      	str	r2, [r3, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  tp->name      = name;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	619a      	str	r2, [r3, #24]
  REG_INSERT(tp);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <_thread_init+0x7c>)
 800291a:	611a      	str	r2, [r3, #16]
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <_thread_init+0x7c>)
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	615a      	str	r2, [r3, #20]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	611a      	str	r2, [r3, #16]
 800292c:	4a08      	ldr	r2, [pc, #32]	; (8002950 <_thread_init+0x7c>)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6153      	str	r3, [r2, #20]
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3328      	adds	r3, #40	; 0x28
 8002936:	4618      	mov	r0, r3
 8002938:	f001 f8f6 	bl	8003b28 <list_init.lto_priv.107>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	332c      	adds	r3, #44	; 0x2c
 8002940:	4618      	mov	r0, r3
 8002942:	f001 f90f 	bl	8003b64 <queue_init.lto_priv.93>
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
 8002946:	68fb      	ldr	r3, [r7, #12]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000be8 	.word	0x20000be8

08002954 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	3b48      	subs	r3, #72	; 0x48
 8002962:	60fb      	str	r3, [r7, #12]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6912      	ldr	r2, [r2, #16]
 800297e:	641a      	str	r2, [r3, #64]	; 0x40
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6952      	ldr	r2, [r2, #20]
 8002988:	645a      	str	r2, [r3, #68]	; 0x44
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4a07      	ldr	r2, [pc, #28]	; (80029ac <chThdCreateSuspendedI+0x58>)
 8002990:	661a      	str	r2, [r3, #96]	; 0x60

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6819      	ldr	r1, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	461a      	mov	r2, r3
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7ff ff99 	bl	80028d4 <_thread_init>
 80029a2:	4603      	mov	r3, r0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	08000321 	.word	0x08000321

080029b0 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  _thread_memfill((uint8_t *)tdp->wbase,
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 80029b8:	f001 f935 	bl	8003c26 <chSysLock.lto_priv.88>
  tp = chThdCreateSuspendedI(tdp);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ffc9 	bl	8002954 <chThdCreateSuspendedI>
 80029c2:	60f8      	str	r0, [r7, #12]
  chSchWakeupS(tp, MSG_OK);
 80029c4:	2100      	movs	r1, #0
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f001 f830 	bl	8003a2c <chSchWakeupS>
  chSysUnlock();
 80029cc:	f001 f930 	bl	8003c30 <chSysUnlock.lto_priv.85>

  return tp;
 80029d0:	68fb      	ldr	r3, [r7, #12]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
  _thread_memfill((uint8_t *)wsp,
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 80029ea:	f001 f91c 	bl	8003c26 <chSysLock.lto_priv.88>

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	3b48      	subs	r3, #72	; 0x48
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4413      	add	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	60da      	str	r2, [r3, #12]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	6a3a      	ldr	r2, [r7, #32]
 8002a16:	645a      	str	r2, [r3, #68]	; 0x44
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <chThdCreateStatic+0x68>)
 8002a1e:	661a      	str	r2, [r3, #96]	; 0x60

  tp = _thread_init(tp, "noname", prio);
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	4909      	ldr	r1, [pc, #36]	; (8002a48 <chThdCreateStatic+0x6c>)
 8002a24:	6978      	ldr	r0, [r7, #20]
 8002a26:	f7ff ff55 	bl	80028d4 <_thread_init>
 8002a2a:	6178      	str	r0, [r7, #20]

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	6978      	ldr	r0, [r7, #20]
 8002a30:	f000 fffc 	bl	8003a2c <chSchWakeupS>
  chSysUnlock();
 8002a34:	f001 f8fc 	bl	8003c30 <chSysUnlock.lto_priv.85>

  return tp;
 8002a38:	697b      	ldr	r3, [r7, #20]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	08000321 	.word	0x08000321
 8002a48:	08009304 	.word	0x08009304

08002a4c <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  chSysLock();
 8002a54:	f001 f8e7 	bl	8003c26 <chSysLock.lto_priv.88>
  chThdExitS(msg);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f803 	bl	8002a64 <chThdExitS>
  /* The thread never returns here.*/
}
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  thread_t *tp = currp;
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <chThdExitS+0x70>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24
 8002a78:	e008      	b.n	8002a8c <chThdExitS+0x28>
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
    (void) chSchReadyI(list_remove(&tp->waiting));
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3328      	adds	r3, #40	; 0x28
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f001 f891 	bl	8003ba6 <list_remove.lto_priv.106>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 feea 	bl	8003860 <chSchReadyI>
  while (list_notempty(&tp->waiting)) {
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3328      	adds	r3, #40	; 0x28
 8002a90:	4618      	mov	r0, r3
 8002a92:	f001 f855 	bl	8003b40 <list_notempty.lto_priv.105>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1ee      	bne.n	8002a7a <chThdExitS+0x16>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d110      	bne.n	8002ac8 <chThdExitS+0x64>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aac:	f003 0303 	and.w	r3, r3, #3
  if ((tp->refs == (trefs_t)0) &&
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <chThdExitS+0x64>
    REG_REMOVE(tp);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	6912      	ldr	r2, [r2, #16]
 8002abc:	611a      	str	r2, [r3, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	6952      	ldr	r2, [r2, #20]
 8002ac6:	615a      	str	r2, [r3, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8002ac8:	200f      	movs	r0, #15
 8002aca:	f000 ff1d 	bl	8003908 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000be8 	.word	0x20000be8

08002ad8 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  chSysLock();
 8002ae0:	f001 f8a1 	bl	8003c26 <chSysLock.lto_priv.88>
  chThdSleepS(time);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f001 f8b5 	bl	8003c54 <chThdSleepS.lto_priv.100>
  chSysUnlock();
 8002aea:	f001 f8a1 	bl	8003c30 <chSysUnlock.lto_priv.85>
}
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <chThdSuspendTimeoutS>:
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  thread_t *tp = chThdGetSelfX();
 8002afe:	f001 f89d 	bl	8003c3c <chThdGetSelfX.lto_priv.98>
 8002b02:	60f8      	str	r0, [r7, #12]

  chDbgAssert(*trp == NULL, "not NULL");

  if (TIME_IMMEDIATE == timeout) {
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <chThdSuspendTimeoutS+0x1c>
    return MSG_TIMEOUT;
 8002b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b0e:	e00a      	b.n	8002b26 <chThdSuspendTimeoutS+0x32>
  }

  *trp = tp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	601a      	str	r2, [r3, #0]
  tp->u.wttrp = trp;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	2003      	movs	r0, #3
 8002b20:	f000 ff50 	bl	80039c4 <chSchGoSleepTimeoutS>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]

  if (*trp != NULL) {
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00b      	beq.n	8002b58 <chThdResumeI+0x2a>
    thread_t *tp = *trp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60fb      	str	r3, [r7, #12]

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fe84 	bl	8003860 <chSchReadyI>
  }
}
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]

  if (TIME_IMMEDIATE == timeout) {
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <chThdEnqueueTimeoutS+0x16>
    return MSG_TIMEOUT;
 8002b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b74:	e00a      	b.n	8002b8c <chThdEnqueueTimeoutS+0x2c>
  }

  queue_insert(currp, tqp);
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <chThdEnqueueTimeoutS+0x34>)
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 f824 	bl	8003bca <queue_insert.lto_priv.91>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002b82:	6839      	ldr	r1, [r7, #0]
 8002b84:	2004      	movs	r0, #4
 8002b86:	f000 ff1d 	bl	80039c4 <chSchGoSleepTimeoutS>
 8002b8a:	4603      	mov	r3, r0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000be8 	.word	0x20000be8

08002b98 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]

  if (queue_notempty(tqp)) {
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 ffed 	bl	8003b82 <queue_notempty.lto_priv.77>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <chThdDequeueNextI+0x1e>
    chThdDoDequeueNextI(tqp, msg);
 8002bae:	6839      	ldr	r1, [r7, #0]
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f001 f85a 	bl	8003c6a <chThdDoDequeueNextI.lto_priv.97>
  }
}
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
 8002bc6:	e003      	b.n	8002bd0 <chThdDequeueAllI+0x14>

  while (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
 8002bc8:	6839      	ldr	r1, [r7, #0]
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f001 f84d 	bl	8003c6a <chThdDoDequeueNextI.lto_priv.97>
  while (queue_notempty(tqp)) {
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 ffd6 	bl	8003b82 <queue_notempty.lto_priv.77>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f5      	bne.n	8002bc8 <chThdDequeueAllI+0xc>
  }
}
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <port_rt_get_counter_value>:
/**
 * @brief   Returns the current value of the realtime counter.
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0

  return DWT->CYCCNT;
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <port_rt_get_counter_value+0x14>)
 8002bea:	685b      	ldr	r3, [r3, #4]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e0001000 	.word	0xe0001000

08002bfc <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
 8002bfc:	b490      	push	{r4, r7}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]

  tmp->n++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	1ad2      	subs	r2, r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	1ad2      	subs	r2, r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f04f 0400 	mov.w	r4, #0
 8002c30:	185b      	adds	r3, r3, r1
 8002c32:	eb44 0402 	adc.w	r4, r4, r2
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	e9c2 3404 	strd	r3, r4, [r2, #16]
  if (tmp->last > tmp->worst) {
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d903      	bls.n	8002c50 <tm_stop+0x54>
    tmp->worst = tmp->last;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d203      	bcs.n	8002c64 <tm_stop+0x68>
    tmp->best = tmp->last;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	601a      	str	r2, [r3, #0]
  }
}
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc90      	pop	{r4, r7}
 8002c6a:	4770      	bx	lr

08002c6c <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <_tm_init+0x30>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	675a      	str	r2, [r3, #116]	; 0x74
  chTMObjectInit(&tm);
 8002c78:	463b      	mov	r3, r7
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 f810 	bl	8002ca0 <chTMObjectInit>
  chTMStartMeasurementX(&tm);
 8002c80:	463b      	mov	r3, r7
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f828 	bl	8002cd8 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8002c88:	463b      	mov	r3, r7
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f830 	bl	8002cf0 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4a02      	ldr	r2, [pc, #8]	; (8002c9c <_tm_init+0x30>)
 8002c94:	6753      	str	r3, [r2, #116]	; 0x74
}
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000be8 	.word	0x20000be8

08002ca0 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
 8002ca0:	b490      	push	{r4, r7}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  tmp->best       = (rtcnt_t)-1;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cae:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	f04f 0400 	mov.w	r4, #0
 8002ccc:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc90      	pop	{r4, r7}
 8002cd6:	4770      	bx	lr

08002cd8 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  tmp->last = chSysGetRealtimeCounterX();
 8002ce0:	f7ff ff80 	bl	8002be4 <port_rt_get_counter_value>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
}
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8002cf8:	f7ff ff74 	bl	8002be4 <port_rt_get_counter_value>
 8002cfc:	4601      	mov	r1, r0
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <chTMStopMeasurementX+0x20>)
 8002d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d02:	461a      	mov	r2, r3
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ff79 	bl	8002bfc <tm_stop>
}
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000be8 	.word	0x20000be8

08002d14 <queue_init.lto_priv.57>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

  tqp->next = (thread_t *)tqp;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	605a      	str	r2, [r3, #4]
}
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <Vector15C>:
/**
 * @brief   USART6 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD6);
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <Vector15C+0x10>)
 8002d3a:	f001 febd 	bl	8004ab8 <serve_usart_irq.lto_priv.147>

  OSAL_IRQ_EPILOGUE();
 8002d3e:	f7fe f8e3 	bl	8000f08 <_port_irq_epilogue>
}
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000a68 	.word	0x20000a68

08002d48 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 8002d4c:	4806      	ldr	r0, [pc, #24]	; (8002d68 <uart_lld_init+0x20>)
 8002d4e:	f003 f930 	bl	8005fb2 <uartObjectInit>
  UARTD6.usart   = USART6;
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <uart_lld_init+0x20>)
 8002d54:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <uart_lld_init+0x24>)
 8002d56:	609a      	str	r2, [r3, #8]
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <uart_lld_init+0x20>)
 8002d5a:	4a05      	ldr	r2, [pc, #20]	; (8002d70 <uart_lld_init+0x28>)
 8002d5c:	611a      	str	r2, [r3, #16]
  UARTD6.dmatx   = STM32_DMA_STREAM(STM32_UART_USART6_TX_DMA_STREAM);
 8002d5e:	4b02      	ldr	r3, [pc, #8]	; (8002d68 <uart_lld_init+0x20>)
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <uart_lld_init+0x2c>)
 8002d62:	615a      	str	r2, [r3, #20]
#endif
}
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000a68 	.word	0x20000a68
 8002d6c:	40011400 	.word	0x40011400
 8002d70:	08008dc0 	.word	0x08008dc0
 8002d74:	08008dfc 	.word	0x08008dfc

08002d78 <uart_lld_start>:
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  if (uartp->state == UART_STOP) {
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d14a      	bne.n	8002e1e <uart_lld_start+0xa6>
                        STM32_DMA_CR_PL(STM32_UART_UART5_DMA_PRIORITY);
    }
#endif

#if STM32_UART_USE_USART6
    if (&UARTD6 == uartp) {
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a2b      	ldr	r2, [pc, #172]	; (8002e38 <uart_lld_start+0xc0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d127      	bne.n	8002de0 <uart_lld_start+0x68>
      bool b;
      b = dmaStreamAllocate(uartp->dmarx,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6918      	ldr	r0, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <uart_lld_start+0xc4>)
 8002d98:	210c      	movs	r1, #12
 8002d9a:	f002 f821 	bl	8004de0 <dmaStreamAllocate>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	73fb      	strb	r3, [r7, #15]
                            STM32_UART_USART6_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(uartp->dmatx,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6958      	ldr	r0, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a25      	ldr	r2, [pc, #148]	; (8002e40 <uart_lld_start+0xc8>)
 8002daa:	210c      	movs	r1, #12
 8002dac:	f002 f818 	bl	8004de0 <dmaStreamAllocate>
 8002db0:	4603      	mov	r3, r0
 8002db2:	73fb      	strb	r3, [r7, #15]
                            STM32_UART_USART6_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableUSART6(true);
 8002db4:	4a23      	ldr	r2, [pc, #140]	; (8002e44 <uart_lld_start+0xcc>)
 8002db6:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <uart_lld_start+0xcc>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f043 0320 	orr.w	r3, r3, #32
 8002dbe:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc0:	4a20      	ldr	r2, [pc, #128]	; (8002e44 <uart_lld_start+0xcc>)
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <uart_lld_start+0xcc>)
 8002dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dc6:	f043 0320 	orr.w	r3, r3, #32
 8002dca:	6653      	str	r3, [r2, #100]	; 0x64
      nvicEnableVector(STM32_USART6_NUMBER, STM32_UART_USART6_IRQ_PRIORITY);
 8002dcc:	210c      	movs	r1, #12
 8002dce:	2047      	movs	r0, #71	; 0x47
 8002dd0:	f003 fede 	bl	8006b90 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART6_RX_DMA_CHANNEL) |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f043 6220 	orr.w	r2, r3, #167772160	; 0xa000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	60da      	str	r2, [r3, #12]
    }
#endif

    /* Static DMA setup, the transfer size depends on the USART settings,
       it is 16 bits if M=1 and PCE=0 else it is 8 bits.*/
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	8b1b      	ldrh	r3, [r3, #24]
 8002de6:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 8002dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dee:	d105      	bne.n	8002dfc <uart_lld_start+0x84>
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f443 5220 	orr.w	r2, r3, #10240	; 0x2800
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	60da      	str	r2, [r3, #12]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6892      	ldr	r2, [r2, #8]
 8002e06:	3204      	adds	r2, #4
 8002e08:	609a      	str	r2, [r3, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6892      	ldr	r2, [r2, #8]
 8002e14:	3204      	adds	r2, #4
 8002e16:	609a      	str	r2, [r3, #8]
    uartp->rxbuf = 0;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	831a      	strh	r2, [r3, #24]
  }

  uartp->rxstate = UART_RX_IDLE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	709a      	strb	r2, [r3, #2]
  uartp->txstate = UART_TX_IDLE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	705a      	strb	r2, [r3, #1]
  usart_start(uartp);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f001 fd52 	bl	80048d4 <usart_start.lto_priv.146>
}
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000a68 	.word	0x20000a68
 8002e3c:	08004985 	.word	0x08004985
 8002e40:	08004a35 	.word	0x08004a35
 8002e44:	40023800 	.word	0x40023800

08002e48 <uart_lld_start_send>:
 * @param[in] n         number of data frames to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmatx, n);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	68d2      	ldr	r2, [r2, #12]
 8002e72:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
 8002e76:	601a      	str	r2, [r3, #0]
     if called from uartSendFullTimeout(). Also we need to clear TC flag
     which could be set before.*/
#if UART_USE_WAIT == TRUE
  if ((uartp->config->txend2_cb != NULL) || (uartp->early == false)) {
#else
  if (uartp->config->txend2_cb != NULL) {
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00c      	beq.n	8002e9c <uart_lld_start_send+0x54>
#endif
    uartp->usart->SR = ~USART_SR_TC;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e8a:	601a      	str	r2, [r3, #0]
    uartp->usart->CR1 |= USART_CR1_TCIE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	6892      	ldr	r2, [r2, #8]
 8002e94:	68d2      	ldr	r2, [r2, #12]
 8002e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9a:	60da      	str	r2, [r3, #12]
  }

  /* Starting transfer.*/
  dmaStreamEnable(uartp->dmatx);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	6952      	ldr	r2, [r2, #20]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
}
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <uart_lld_start_receive>:
 * @param[in] n         number of data frames to send
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void uart_lld_start_receive(UARTDriver *uartp, size_t n, void *rxbuf) {
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]

  /* Stopping previous activity (idle state).*/
  dmaStreamDisable(uartp->dmarx);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	6912      	ldr	r2, [r2, #16]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	f022 021f 	bic.w	r2, r2, #31
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f7      	bne.n	8002eda <uart_lld_start_receive+0x20>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	6912      	ldr	r2, [r2, #16]
 8002ef4:	7a12      	ldrb	r2, [r2, #8]
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	223d      	movs	r2, #61	; 0x3d
 8002efa:	408a      	lsls	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]

  /* RX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmarx, rxbuf);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, n);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode    | STM32_DMA_CR_DIR_P2M |
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	68d2      	ldr	r2, [r2, #12]
 8002f1c:	f442 6282 	orr.w	r2, r2, #1040	; 0x410
 8002f20:	601a      	str	r2, [r3, #0]
                                 STM32_DMA_CR_MINC | STM32_DMA_CR_TCIE);

  /* Starting transfer.*/
  dmaStreamEnable(uartp->dmarx);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	6912      	ldr	r2, [r2, #16]
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
}
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <gpio_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]

  gpiop->OTYPER  = config->otyper;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	601a      	str	r2, [r3, #0]
}
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <stm32_gpio_init>:

static void stm32_gpio_init(void) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002f90:	4a16      	ldr	r2, [pc, #88]	; (8002fec <stm32_gpio_init+0x60>)
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <stm32_gpio_init+0x60>)
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f043 031f 	orr.w	r3, r3, #31
 8002f9a:	6113      	str	r3, [r2, #16]
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <stm32_gpio_init+0x60>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	611a      	str	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002fa2:	4a12      	ldr	r2, [pc, #72]	; (8002fec <stm32_gpio_init+0x60>)
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <stm32_gpio_init+0x60>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	f043 031f 	orr.w	r3, r3, #31
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <stm32_gpio_init+0x60>)
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <stm32_gpio_init+0x60>)
 8002fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb4:	f043 031f 	orr.w	r3, r3, #31
 8002fb8:	6513      	str	r3, [r2, #80]	; 0x50

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
 8002fba:	490d      	ldr	r1, [pc, #52]	; (8002ff0 <stm32_gpio_init+0x64>)
 8002fbc:	480d      	ldr	r0, [pc, #52]	; (8002ff4 <stm32_gpio_init+0x68>)
 8002fbe:	f7ff ffbf 	bl	8002f40 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
 8002fc2:	490d      	ldr	r1, [pc, #52]	; (8002ff8 <stm32_gpio_init+0x6c>)
 8002fc4:	480d      	ldr	r0, [pc, #52]	; (8002ffc <stm32_gpio_init+0x70>)
 8002fc6:	f7ff ffbb 	bl	8002f40 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
 8002fca:	490d      	ldr	r1, [pc, #52]	; (8003000 <stm32_gpio_init+0x74>)
 8002fcc:	480d      	ldr	r0, [pc, #52]	; (8003004 <stm32_gpio_init+0x78>)
 8002fce:	f7ff ffb7 	bl	8002f40 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
 8002fd2:	490d      	ldr	r1, [pc, #52]	; (8003008 <stm32_gpio_init+0x7c>)
 8002fd4:	480d      	ldr	r0, [pc, #52]	; (800300c <stm32_gpio_init+0x80>)
 8002fd6:	f7ff ffb3 	bl	8002f40 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
 8002fda:	490d      	ldr	r1, [pc, #52]	; (8003010 <stm32_gpio_init+0x84>)
 8002fdc:	480d      	ldr	r0, [pc, #52]	; (8003014 <stm32_gpio_init+0x88>)
 8002fde:	f7ff ffaf 	bl	8002f40 <gpio_init>
#endif
#if STM32_HAS_GPIOG
  gpio_init(GPIOG, &gpio_default_config.PGData);
#endif
#if STM32_HAS_GPIOH
  gpio_init(GPIOH, &gpio_default_config.PHData);
 8002fe2:	490d      	ldr	r1, [pc, #52]	; (8003018 <stm32_gpio_init+0x8c>)
 8002fe4:	480d      	ldr	r0, [pc, #52]	; (800301c <stm32_gpio_init+0x90>)
 8002fe6:	f7ff ffab 	bl	8002f40 <gpio_init>
  gpio_init(GPIOJ, &gpio_default_config.PJData);
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
#endif
}
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	08008e3c 	.word	0x08008e3c
 8002ff4:	40020000 	.word	0x40020000
 8002ff8:	08008e58 	.word	0x08008e58
 8002ffc:	40020400 	.word	0x40020400
 8003000:	08008e74 	.word	0x08008e74
 8003004:	40020800 	.word	0x40020800
 8003008:	08008e90 	.word	0x08008e90
 800300c:	40020c00 	.word	0x40020c00
 8003010:	08008eac 	.word	0x08008eac
 8003014:	40021000 	.word	0x40021000
 8003018:	08008ec8 	.word	0x08008ec8
 800301c:	40021c00 	.word	0x40021c00

08003020 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0

  stm32_gpio_init();
 8003024:	f7ff ffb2 	bl	8002f8c <stm32_gpio_init>
  stm32_clock_init();
 8003028:	f003 fe60 	bl	8006cec <stm32_clock_init>
}
 800302c:	bd80      	pop	{r7, pc}

0800302e <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0

}
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <chTimeAddX.lto_priv.138>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
#endif

  return systime + (systime_t)interval;
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	4413      	add	r3, r2
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <chTimeDiffX.lto_priv.136>:
 * @param[in] end       second system time
 * @return              The interval representing the time difference.
 *
 * @xclass
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	1ad3      	subs	r3, r2, r3
  /*lint -restore*/
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003090:	4013      	ands	r3, r2
 8003092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800309c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a6:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <__NVIC_SetPriorityGrouping+0x44>)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	60d3      	str	r3, [r2, #12]
}
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	db0a      	blt.n	80030e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d0:	490d      	ldr	r1, [pc, #52]	; (8003108 <__NVIC_SetPriority+0x4c>)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	440b      	add	r3, r1
 80030e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80030e4:	e00a      	b.n	80030fc <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e6:	4909      	ldr	r1, [pc, #36]	; (800310c <__NVIC_SetPriority+0x50>)
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	3b04      	subs	r3, #4
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	0112      	lsls	r2, r2, #4
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	440b      	add	r3, r1
 80030fa:	761a      	strb	r2, [r3, #24]
  }
}
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e000e100 	.word	0xe000e100
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <port_init>:
static inline void port_init(void) {
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
 8003114:	2003      	movs	r0, #3
 8003116:	f7ff ffad 	bl	8003074 <__NVIC_SetPriorityGrouping>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800311a:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <port_init+0x38>)
 800311c:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <port_init+0x38>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003124:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <port_init+0x3c>)
 8003128:	4b08      	ldr	r3, [pc, #32]	; (800314c <port_init+0x3c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
 8003132:	2101      	movs	r1, #1
 8003134:	f06f 0004 	mvn.w	r0, #4
 8003138:	f7ff ffc0 	bl	80030bc <__NVIC_SetPriority>
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 800313c:	2102      	movs	r1, #2
 800313e:	f06f 0001 	mvn.w	r0, #1
 8003142:	f7ff ffbb 	bl	80030bc <__NVIC_SetPriority>
}
 8003146:	bd80      	pop	{r7, pc}
 8003148:	e000edf0 	.word	0xe000edf0
 800314c:	e0001000 	.word	0xe0001000

08003150 <port_lock.lto_priv.119>:
static inline void port_lock(void) {
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	2320      	movs	r3, #32
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f383 8811 	msr	BASEPRI, r3
}
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <port_unlock.lto_priv.116>:
static inline void port_unlock(void) {
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	2300      	movs	r3, #0
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f383 8811 	msr	BASEPRI, r3
}
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <port_lock_from_isr.lto_priv.128>:
static inline void port_lock_from_isr(void) {
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  port_lock();
 8003188:	f7ff ffe2 	bl	8003150 <port_lock.lto_priv.119>
}
 800318c:	bd80      	pop	{r7, pc}

0800318e <port_unlock_from_isr.lto_priv.126>:
static inline void port_unlock_from_isr(void) {
 800318e:	b580      	push	{r7, lr}
 8003190:	af00      	add	r7, sp, #0
  port_unlock();
 8003192:	f7ff ffea 	bl	800316a <port_unlock.lto_priv.116>
}
 8003196:	bd80      	pop	{r7, pc}

08003198 <port_disable>:
static inline void port_disable(void) {
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800319c:	b672      	cpsid	i
}
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <port_enable>:
static inline void port_enable(void) {
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	2300      	movs	r3, #0
 80031ae:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80031b6:	b662      	cpsie	i
}
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <port_wait_for_interrupt>:
static inline void port_wait_for_interrupt(void) {
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
}
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <port_rt_get_counter_value>:
static inline rtcnt_t port_rt_get_counter_value(void) {
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return DWT->CYCCNT;
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <port_rt_get_counter_value+0x14>)
 80031d6:	685b      	ldr	r3, [r3, #4]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e0001000 	.word	0xe0001000

080031e8 <st_lld_get_counter.lto_priv.113>:
static inline systime_t st_lld_get_counter(void) {
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return (systime_t)STM32_ST_TIM->CNT;
 80031ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <port_timer_stop_alarm.lto_priv.134>:
static inline void port_timer_stop_alarm(void) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  stStopAlarm();
 8003200:	f004 fee8 	bl	8007fd4 <stStopAlarm>
}
 8003204:	bd80      	pop	{r7, pc}

08003206 <port_timer_set_alarm.lto_priv.132>:
static inline void port_timer_set_alarm(systime_t time) {
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  stSetAlarm(time);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f004 fee5 	bl	8007fde <stSetAlarm>
}
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <port_timer_get_time.lto_priv.110>:
static inline systime_t port_timer_get_time(void) {
 800321a:	b580      	push	{r7, lr}
 800321c:	af00      	add	r7, sp, #0
  return stGetCounter();
 800321e:	f7ff ffe3 	bl	80031e8 <st_lld_get_counter.lto_priv.113>
 8003222:	4603      	mov	r3, r0
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}

08003228 <chSysEnable>:
static inline void chSysEnable(void) {
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  port_enable();
 800322c:	f7ff ffbb 	bl	80031a6 <port_enable>
}
 8003230:	bd80      	pop	{r7, pc}

08003232 <chSysLockFromISR.lto_priv.124>:
static inline void chSysLockFromISR(void) {
 8003232:	b580      	push	{r7, lr}
 8003234:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 8003236:	f7ff ffa5 	bl	8003184 <port_lock_from_isr.lto_priv.128>
}
 800323a:	bd80      	pop	{r7, pc}

0800323c <chSysUnlockFromISR.lto_priv.122>:
static inline void chSysUnlockFromISR(void) {
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 8003240:	f7ff ffa5 	bl	800318e <port_unlock_from_isr.lto_priv.126>
}
 8003244:	bd80      	pop	{r7, pc}

08003246 <chVTGetSystemTimeX.lto_priv.130>:
static inline systime_t chVTGetSystemTimeX(void) {
 8003246:	b580      	push	{r7, lr}
 8003248:	af00      	add	r7, sp, #0
  return port_timer_get_time();
 800324a:	f7ff ffe6 	bl	800321a <port_timer_get_time.lto_priv.110>
 800324e:	4603      	mov	r3, r0
}
 8003250:	4618      	mov	r0, r3
 8003252:	bd80      	pop	{r7, pc}

08003254 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <chVTDoTickI+0xf4>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	617b      	str	r3, [r7, #20]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
 8003260:	f7ff fff1 	bl	8003246 <chVTGetSystemTimeX.lto_priv.130>
 8003264:	60b8      	str	r0, [r7, #8]
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8003266:	4b38      	ldr	r3, [pc, #224]	; (8003348 <chVTDoTickI+0xf4>)
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fef2 	bl	8003056 <chTimeDiffX.lto_priv.136>
 8003272:	60f8      	str	r0, [r7, #12]

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	429a      	cmp	r2, r3
 800327c:	d832      	bhi.n	80032e4 <chVTDoTickI+0x90>
    /* Consuming all timers between "vtp->lasttime" and now.*/
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
 800327e:	4b32      	ldr	r3, [pc, #200]	; (8003348 <chVTDoTickI+0xf4>)
 8003280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	4413      	add	r3, r2
 8003288:	4a2f      	ldr	r2, [pc, #188]	; (8003348 <chVTDoTickI+0xf4>)
 800328a:	6293      	str	r3, [r2, #40]	; 0x28
      nowdelta -= vtp->delta;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	60fb      	str	r3, [r7, #12]

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2c      	ldr	r2, [pc, #176]	; (800334c <chVTDoTickI+0xf8>)
 800329c:	605a      	str	r2, [r3, #4]
      ch.vtlist.next = vtp->next;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a29      	ldr	r2, [pc, #164]	; (8003348 <chVTDoTickI+0xf4>)
 80032a4:	61d3      	str	r3, [r2, #28]
      fn = vtp->func;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	607b      	str	r3, [r7, #4]
      vtp->func = NULL;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2200      	movs	r2, #0
 80032b0:	60da      	str	r2, [r3, #12]

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80032b2:	4b25      	ldr	r3, [pc, #148]	; (8003348 <chVTDoTickI+0xf4>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	4a25      	ldr	r2, [pc, #148]	; (800334c <chVTDoTickI+0xf8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d101      	bne.n	80032c0 <chVTDoTickI+0x6c>
        port_timer_stop_alarm();
 80032bc:	f7ff ff9e 	bl	80031fc <port_timer_stop_alarm.lto_priv.134>
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
 80032c0:	f7ff ffbc 	bl	800323c <chSysUnlockFromISR.lto_priv.122>
      fn(vtp->par);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4610      	mov	r0, r2
 80032cc:	4798      	blx	r3
      chSysLockFromISR();
 80032ce:	f7ff ffb0 	bl	8003232 <chSysLockFromISR.lto_priv.124>

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <chVTDoTickI+0xf4>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	617b      	str	r3, [r7, #20]
    }
    while (vtp->delta <= nowdelta);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d9cd      	bls.n	800327e <chVTDoTickI+0x2a>
 80032e2:	e7bd      	b.n	8003260 <chVTDoTickI+0xc>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80032e4:	4b18      	ldr	r3, [pc, #96]	; (8003348 <chVTDoTickI+0xf4>)
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	4a18      	ldr	r2, [pc, #96]	; (800334c <chVTDoTickI+0xf8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d028      	beq.n	8003340 <chVTDoTickI+0xec>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <chVTDoTickI+0xf4>)
 80032f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4413      	add	r3, r2
 80032f6:	4a14      	ldr	r2, [pc, #80]	; (8003348 <chVTDoTickI+0xf4>)
 80032f8:	6293      	str	r3, [r2, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <chVTDoTickI+0xf4>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	4a12      	ldr	r2, [pc, #72]	; (8003348 <chVTDoTickI+0xf4>)
 8003300:	69d2      	ldr	r2, [r2, #28]
 8003302:	6891      	ldr	r1, [r2, #8]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	1a8a      	subs	r2, r1, r2
 8003308:	609a      	str	r2, [r3, #8]

  /* Recalculating the next alarm time.*/
  delta = chTimeDiffX(now, chTimeAddX(ch.vtlist.lasttime, vtp->delta));
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <chVTDoTickI+0xf4>)
 800330c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f7ff fe90 	bl	800303a <chTimeAddX.lto_priv.138>
 800331a:	4603      	mov	r3, r0
 800331c:	4619      	mov	r1, r3
 800331e:	68b8      	ldr	r0, [r7, #8]
 8003320:	f7ff fe99 	bl	8003056 <chTimeDiffX.lto_priv.136>
 8003324:	6138      	str	r0, [r7, #16]
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d801      	bhi.n	8003330 <chVTDoTickI+0xdc>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800332c:	2302      	movs	r3, #2
 800332e:	613b      	str	r3, [r7, #16]
  /* The delta could be too large for the physical timer to handle.*/
  else if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));
 8003330:	6939      	ldr	r1, [r7, #16]
 8003332:	68b8      	ldr	r0, [r7, #8]
 8003334:	f7ff fe81 	bl	800303a <chTimeAddX.lto_priv.138>
 8003338:	4603      	mov	r3, r0
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff63 	bl	8003206 <port_timer_set_alarm.lto_priv.132>

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
              chTimeDiffX(ch.vtlist.lasttime, chTimeAddX(now, delta)),
              "exceeding delta");
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000be8 	.word	0x20000be8
 800334c:	20000c04 	.word	0x20000c04

08003350 <_idle_thread.lto_priv.18>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8003358:	f7ff ff33 	bl	80031c2 <port_wait_for_interrupt>
 800335c:	e7fc      	b.n	8003358 <_idle_thread.lto_priv.18+0x8>
	...

08003360 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0

  _scheduler_init();
 8003364:	f000 fa6a 	bl	800383c <_scheduler_init>
  _vt_init();
 8003368:	f000 f8b8 	bl	80034dc <_vt_init>
#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  ch.dbg.isr_cnt  = (cnt_t)0;
  ch.dbg.lock_cnt = (cnt_t)0;
#endif
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 800336c:	f7ff fc7e 	bl	8002c6c <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8003370:	f7ff f93c 	bl	80025ec <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8003374:	f7ff f998 	bl	80026a8 <_heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  _factory_init();
 8003378:	f7ff f9ee 	bl	8002758 <_factory_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800337c:	2280      	movs	r2, #128	; 0x80
 800337e:	490c      	ldr	r1, [pc, #48]	; (80033b0 <chSysInit+0x50>)
 8003380:	480c      	ldr	r0, [pc, #48]	; (80033b4 <chSysInit+0x54>)
 8003382:	f7ff faa7 	bl	80028d4 <_thread_init>
 8003386:	4602      	mov	r2, r0
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <chSysInit+0x58>)
 800338a:	619a      	str	r2, [r3, #24]
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <chSysInit+0x58>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2200      	movs	r2, #0
 8003392:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <chSysInit+0x58>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Port layer initialization last because it depend on some of the
     initializations performed before.*/
  port_init();
 800339e:	f7ff feb7 	bl	8003110 <port_init>

  /* Initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* It is alive now.*/
  chSysEnable();
 80033a2:	f7ff ff41 	bl	8003228 <chSysEnable>
    };

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
 80033a6:	4805      	ldr	r0, [pc, #20]	; (80033bc <chSysInit+0x5c>)
 80033a8:	f7ff fb02 	bl	80029b0 <chThdCreate>
  }
#endif
}
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	08008f04 	.word	0x08008f04
 80033b4:	20000c18 	.word	0x20000c18
 80033b8:	20000be8 	.word	0x20000be8
 80033bc:	08008eec 	.word	0x08008eec

080033c0 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]

  port_disable();
 80033c8:	f7ff fee6 	bl	8003198 <port_disable>

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80033cc:	4a01      	ldr	r2, [pc, #4]	; (80033d4 <chSysHalt+0x14>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80033d2:	e7fe      	b.n	80033d2 <chSysHalt+0x12>
 80033d4:	20000be8 	.word	0x20000be8

080033d8 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
 80033dc:	f7ff ff3a 	bl	8003254 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <chSysIsCounterWithinX>:
 * @retval true         current time within the specified time window.
 * @retval false        current time not within the specified time window.
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]

  return (bool)((cnt - start) < (end - start));
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	1ad2      	subs	r2, r2, r3
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	1acb      	subs	r3, r1, r3
 80033fa:	429a      	cmp	r2, r3
 80033fc:	bf34      	ite	cc
 80033fe:	2301      	movcc	r3, #1
 8003400:	2300      	movcs	r3, #0
 8003402:	b2db      	uxtb	r3, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <chSysPolledDelayX>:
 *
 * @param[in] cycles    number of cycles
 *
 * @xclass
 */
void chSysPolledDelayX(rtcnt_t cycles) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  rtcnt_t start = chSysGetRealtimeCounterX();
 8003418:	f7ff feda 	bl	80031d0 <port_rt_get_counter_value>
 800341c:	60f8      	str	r0, [r7, #12]
  rtcnt_t end  = start + cycles;
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4413      	add	r3, r2
 8003424:	60bb      	str	r3, [r7, #8]

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8003426:	f7ff fed3 	bl	80031d0 <port_rt_get_counter_value>
 800342a:	4603      	mov	r3, r0
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	68f9      	ldr	r1, [r7, #12]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ffd6 	bl	80033e2 <chSysIsCounterWithinX>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f4      	bne.n	8003426 <chSysPolledDelayX+0x16>
  }
}
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <chTimeAddX.lto_priv.139>:
                                   sysinterval_t interval) {
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
  return systime + (systime_t)interval;
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	4413      	add	r3, r2
}
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <chTimeDiffX.lto_priv.137>:
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  return (sysinterval_t)((systime_t)(end - start));
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	1ad3      	subs	r3, r2, r3
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <st_lld_get_counter.lto_priv.114>:
static inline systime_t st_lld_get_counter(void) {
 800347a:	b480      	push	{r7}
 800347c:	af00      	add	r7, sp, #0
  return (systime_t)STM32_ST_TIM->CNT;
 800347e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <port_timer_start_alarm>:
static inline void port_timer_start_alarm(systime_t time) {
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  stStartAlarm(time);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f004 fd92 	bl	8007fc0 <stStartAlarm>
}
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <port_timer_stop_alarm.lto_priv.135>:
static inline void port_timer_stop_alarm(void) {
 80034a2:	b580      	push	{r7, lr}
 80034a4:	af00      	add	r7, sp, #0
  stStopAlarm();
 80034a6:	f004 fd95 	bl	8007fd4 <stStopAlarm>
}
 80034aa:	bd80      	pop	{r7, pc}

080034ac <port_timer_set_alarm.lto_priv.133>:
static inline void port_timer_set_alarm(systime_t time) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  stSetAlarm(time);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f004 fd92 	bl	8007fde <stSetAlarm>
}
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <port_timer_get_time.lto_priv.111>:
static inline systime_t port_timer_get_time(void) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  return stGetCounter();
 80034c4:	f7ff ffd9 	bl	800347a <st_lld_get_counter.lto_priv.114>
 80034c8:	4603      	mov	r3, r0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	bd80      	pop	{r7, pc}

080034ce <chVTGetSystemTimeX.lto_priv.131>:
static inline systime_t chVTGetSystemTimeX(void) {
 80034ce:	b580      	push	{r7, lr}
 80034d0:	af00      	add	r7, sp, #0
  return port_timer_get_time();
 80034d2:	f7ff fff5 	bl	80034c0 <port_timer_get_time.lto_priv.111>
 80034d6:	4603      	mov	r3, r0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}

080034dc <_vt_init>:
 * @brief   Virtual Timers initialization.
 * @note    Internal use only.
 *
 * @notapi
 */
void _vt_init(void) {
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <_vt_init+0x28>)
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <_vt_init+0x2c>)
 80034e4:	61da      	str	r2, [r3, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80034e6:	4b07      	ldr	r3, [pc, #28]	; (8003504 <_vt_init+0x28>)
 80034e8:	4a07      	ldr	r2, [pc, #28]	; (8003508 <_vt_init+0x2c>)
 80034ea:	621a      	str	r2, [r3, #32]
  ch.vtlist.delta = (sysinterval_t)-1;
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <_vt_init+0x28>)
 80034ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <_vt_init+0x28>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000be8 	.word	0x20000be8
 8003508:	20000c04 	.word	0x20000c04

0800350c <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	611a      	str	r2, [r3, #16]
  vtp->func = vtfunc;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	60da      	str	r2, [r3, #12]

#if CH_CFG_ST_TIMEDELTA > 0
  {
    systime_t now = chVTGetSystemTimeX();
 8003526:	f7ff ffd2 	bl	80034ce <chVTGetSystemTimeX.lto_priv.131>
 800352a:	6178      	str	r0, [r7, #20]

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d801      	bhi.n	8003536 <chVTDoSetI+0x2a>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8003532:	2302      	movs	r3, #2
 8003534:	60bb      	str	r3, [r7, #8]
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8003536:	4b40      	ldr	r3, [pc, #256]	; (8003638 <chVTDoSetI+0x12c>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	4a40      	ldr	r2, [pc, #256]	; (800363c <chVTDoSetI+0x130>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d11c      	bne.n	800357a <chVTDoSetI+0x6e>

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 8003540:	4a3d      	ldr	r2, [pc, #244]	; (8003638 <chVTDoSetI+0x12c>)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	6293      	str	r3, [r2, #40]	; 0x28
      ch.vtlist.next = vtp;
 8003546:	4a3c      	ldr	r2, [pc, #240]	; (8003638 <chVTDoSetI+0x12c>)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	61d3      	str	r3, [r2, #28]
      ch.vtlist.prev = vtp;
 800354c:	4a3a      	ldr	r2, [pc, #232]	; (8003638 <chVTDoSetI+0x12c>)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6213      	str	r3, [r2, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a39      	ldr	r2, [pc, #228]	; (800363c <chVTDoSetI+0x130>)
 8003556:	601a      	str	r2, [r3, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4a38      	ldr	r2, [pc, #224]	; (800363c <chVTDoSetI+0x130>)
 800355c:	605a      	str	r2, [r3, #4]
      vtp->delta = delay;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]
        delay = (sysinterval_t)TIME_MAX_SYSTIME;
      }
#endif

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(chTimeAddX(ch.vtlist.lasttime, delay));
 8003564:	4b34      	ldr	r3, [pc, #208]	; (8003638 <chVTDoSetI+0x12c>)
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff69 	bl	8003442 <chTimeAddX.lto_priv.139>
 8003570:	4603      	mov	r3, r0
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ff8b 	bl	800348e <port_timer_start_alarm>
 8003578:	e05a      	b.n	8003630 <chVTDoSetI+0x124>

      return;
    }

    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;
 800357a:	4b2f      	ldr	r3, [pc, #188]	; (8003638 <chVTDoSetI+0x12c>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	61fb      	str	r3, [r7, #28]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8003580:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <chVTDoSetI+0x12c>)
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	6979      	ldr	r1, [r7, #20]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff69 	bl	800345e <chTimeDiffX.lto_priv.137>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	4413      	add	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8003594:	4b28      	ldr	r3, [pc, #160]	; (8003638 <chVTDoSetI+0x12c>)
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	6979      	ldr	r1, [r7, #20]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff ff5f 	bl	800345e <chTimeDiffX.lto_priv.137>
 80035a0:	4602      	mov	r2, r0
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d908      	bls.n	80035ba <chVTDoSetI+0xae>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	61bb      	str	r3, [r7, #24]
      p = p->next;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	e019      	b.n	80035ee <chVTDoSetI+0xe2>
    }
    else if (delta < p->delta) {
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d914      	bls.n	80035ee <chVTDoSetI+0xe2>
      sysinterval_t deadline_delta;

      /* A small delay that will become the first element in the delta list
         and next deadline.*/
      deadline_delta = delta;
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	613b      	str	r3, [r7, #16]
      /* The delta could be too large for the physical timer to handle.*/
      if (deadline_delta > (sysinterval_t)TIME_MAX_SYSTIME) {
        deadline_delta = (sysinterval_t)TIME_MAX_SYSTIME;
      }
#endif
      port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, deadline_delta));
 80035c8:	4b1b      	ldr	r3, [pc, #108]	; (8003638 <chVTDoSetI+0x12c>)
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	6939      	ldr	r1, [r7, #16]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff ff37 	bl	8003442 <chTimeAddX.lto_priv.139>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ff68 	bl	80034ac <port_timer_set_alarm.lto_priv.133>
 80035dc:	e007      	b.n	80035ee <chVTDoSetI+0xe2>
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	61bb      	str	r3, [r7, #24]
    p = p->next;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	61fb      	str	r3, [r7, #28]
  while (p->delta < delta) {
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d3f2      	bcc.n	80035de <chVTDoSetI+0xd2>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	601a      	str	r2, [r3, #0]
  vtp->prev = vtp->next->prev;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	605a      	str	r2, [r3, #4]
  vtp->prev->next = vtp;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	601a      	str	r2, [r3, #0]
  p->prev = vtp;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	605a      	str	r2, [r3, #4]
  vtp->delta = delta;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	609a      	str	r2, [r3, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	1ad2      	subs	r2, r2, r3
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	609a      	str	r2, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <chVTDoSetI+0x12c>)
 800362a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800362e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000be8 	.word	0x20000be8
 800363c:	20000c04 	.word	0x20000c04

08003640 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8003648:	4b36      	ldr	r3, [pc, #216]	; (8003724 <chVTDoResetI+0xe4>)
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	429a      	cmp	r2, r3
 8003650:	d01b      	beq.n	800368a <chVTDoResetI+0x4a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	601a      	str	r2, [r3, #0]
    vtp->next->prev = vtp->prev;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6852      	ldr	r2, [r2, #4]
 8003664:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	60da      	str	r2, [r3, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a2d      	ldr	r2, [pc, #180]	; (8003728 <chVTDoResetI+0xe8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d051      	beq.n	800371a <chVTDoResetI+0xda>
      vtp->next->delta += vtp->delta;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	6891      	ldr	r1, [r2, #8]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6892      	ldr	r2, [r2, #8]
 8003684:	440a      	add	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	e048      	b.n	800371c <chVTDoResetI+0xdc>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a25      	ldr	r2, [pc, #148]	; (8003724 <chVTDoResetI+0xe4>)
 8003690:	61d3      	str	r3, [r2, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <chVTDoResetI+0xe4>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	4a24      	ldr	r2, [pc, #144]	; (8003728 <chVTDoResetI+0xe8>)
 8003698:	605a      	str	r2, [r3, #4]
  vtp->func = NULL;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	60da      	str	r2, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80036a0:	4b20      	ldr	r3, [pc, #128]	; (8003724 <chVTDoResetI+0xe4>)
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	4a20      	ldr	r2, [pc, #128]	; (8003728 <chVTDoResetI+0xe8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d102      	bne.n	80036b0 <chVTDoResetI+0x70>
    port_timer_stop_alarm();
 80036aa:	f7ff fefa 	bl	80034a2 <port_timer_stop_alarm.lto_priv.135>
 80036ae:	e035      	b.n	800371c <chVTDoResetI+0xdc>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80036b0:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <chVTDoResetI+0xe4>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	4a1b      	ldr	r2, [pc, #108]	; (8003724 <chVTDoResetI+0xe4>)
 80036b6:	69d2      	ldr	r2, [r2, #28]
 80036b8:	6891      	ldr	r1, [r2, #8]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6892      	ldr	r2, [r2, #8]
 80036be:	440a      	add	r2, r1
 80036c0:	609a      	str	r2, [r3, #8]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80036c2:	4b18      	ldr	r3, [pc, #96]	; (8003724 <chVTDoResetI+0xe4>)
 80036c4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80036c6:	f7ff ff02 	bl	80034ce <chVTGetSystemTimeX.lto_priv.131>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4619      	mov	r1, r3
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7ff fec5 	bl	800345e <chTimeDiffX.lto_priv.137>
 80036d4:	60b8      	str	r0, [r7, #8]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80036d6:	4b13      	ldr	r3, [pc, #76]	; (8003724 <chVTDoResetI+0xe4>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d91c      	bls.n	800371c <chVTDoResetI+0xdc>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <chVTDoResetI+0xe4>)
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d803      	bhi.n	80036fc <chVTDoResetI+0xbc>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	3302      	adds	r3, #2
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	e003      	b.n	8003704 <chVTDoResetI+0xc4>
  }
  else {
    delta = nowdelta + delta;
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4413      	add	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
    if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
      delta = (sysinterval_t)TIME_MAX_SYSTIME;
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <chVTDoResetI+0xe4>)
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	68f9      	ldr	r1, [r7, #12]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fe99 	bl	8003442 <chTimeAddX.lto_priv.139>
 8003710:	4603      	mov	r3, r0
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff feca 	bl	80034ac <port_timer_set_alarm.lto_priv.133>
 8003718:	e000      	b.n	800371c <chVTDoResetI+0xdc>
      vtp->next->delta += vtp->delta;
 800371a:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bd90      	pop	{r4, r7, pc}
 8003722:	bf00      	nop
 8003724:	20000be8 	.word	0x20000be8
 8003728:	20000c04 	.word	0x20000c04

0800372c <port_lock.lto_priv.120>:
static inline void port_lock(void) {
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	2320      	movs	r3, #32
 8003734:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f383 8811 	msr	BASEPRI, r3
}
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <port_unlock.lto_priv.117>:
static inline void port_unlock(void) {
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	2300      	movs	r3, #0
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f383 8811 	msr	BASEPRI, r3
}
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <port_lock_from_isr.lto_priv.129>:
static inline void port_lock_from_isr(void) {
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  port_lock();
 8003764:	f7ff ffe2 	bl	800372c <port_lock.lto_priv.120>
}
 8003768:	bd80      	pop	{r7, pc}

0800376a <port_unlock_from_isr.lto_priv.127>:
static inline void port_unlock_from_isr(void) {
 800376a:	b580      	push	{r7, lr}
 800376c:	af00      	add	r7, sp, #0
  port_unlock();
 800376e:	f7ff ffea 	bl	8003746 <port_unlock.lto_priv.117>
}
 8003772:	bd80      	pop	{r7, pc}

08003774 <queue_init>:
static inline void queue_init(threads_queue_t *tqp) {
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  tqp->next = (thread_t *)tqp;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	605a      	str	r2, [r3, #4]
}
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <queue_fifo_remove.lto_priv.108>:
  tp->queue.prev             = tqp->prev;
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 8003792:	b480      	push	{r7}
 8003794:	b085      	sub	sp, #20
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  thread_t *tp = tqp->next;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

  tqp->next             = tp->queue.next;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	605a      	str	r2, [r3, #4]

  return tp;
 80037b0:	68fb      	ldr	r3, [r7, #12]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <queue_dequeue>:
  tqp->prev->queue.next = (thread_t *)tqp;

  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]

  tp->queue.prev->queue.next = tp->queue.next;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6852      	ldr	r2, [r2, #4]
 80037d8:	605a      	str	r2, [r3, #4]

  return tp;
 80037da:	687b      	ldr	r3, [r7, #4]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <chSysLockFromISR.lto_priv.125>:
static inline void chSysLockFromISR(void) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 80037ec:	f7ff ffb8 	bl	8003760 <port_lock_from_isr.lto_priv.129>
}
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <chSysUnlockFromISR.lto_priv.123>:
static inline void chSysUnlockFromISR(void) {
 80037f2:	b580      	push	{r7, lr}
 80037f4:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 80037f6:	f7ff ffb8 	bl	800376a <port_unlock_from_isr.lto_priv.127>
}
 80037fa:	bd80      	pop	{r7, pc}

080037fc <chVTIsArmedI>:
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  return (bool)(vtp->func != NULL);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf14      	ite	ne
 800380c:	2301      	movne	r3, #1
 800380e:	2300      	moveq	r3, #0
 8003810:	b2db      	uxtb	r3, r3
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <chSemFastSignalI>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]

  chDbgCheckClassI();

  sp->cnt++;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	609a      	str	r2, [r3, #8]
}
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
	...

0800383c <_scheduler_init>:
/**
 * @brief   Scheduler initialization.
 *
 * @notapi
 */
void _scheduler_init(void) {
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0

  queue_init(&ch.rlist.queue);
 8003840:	4806      	ldr	r0, [pc, #24]	; (800385c <_scheduler_init+0x20>)
 8003842:	f7ff ff97 	bl	8003774 <queue_init>
  ch.rlist.prio = NOPRIO;
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <_scheduler_init+0x20>)
 8003848:	2200      	movs	r2, #0
 800384a:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <_scheduler_init+0x20>)
 800384e:	4a03      	ldr	r2, [pc, #12]	; (800385c <_scheduler_init+0x20>)
 8003850:	611a      	str	r2, [r3, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8003852:	4b02      	ldr	r3, [pc, #8]	; (800385c <_scheduler_init+0x20>)
 8003854:	4a01      	ldr	r2, [pc, #4]	; (800385c <_scheduler_init+0x20>)
 8003856:	615a      	str	r2, [r3, #20]
#endif
}
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000be8 	.word	0x20000be8

08003860 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8003870:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <chSchReadyI+0x50>)
 8003872:	60fb      	str	r3, [r7, #12]
  do {
    cp = cp->queue.next;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]
  } while (cp->prio >= tp->prio);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	d2f6      	bcs.n	8003874 <chSchReadyI+0x14>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	605a      	str	r2, [r3, #4]

  return tp;
 80038a2:	687b      	ldr	r3, [r7, #4]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	20000be8 	.word	0x20000be8

080038b4 <chSchReadyAheadI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyAheadI(thread_t *tp) {
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <chSchReadyAheadI+0x50>)
 80038c6:	60fb      	str	r3, [r7, #12]
  do {
    cp = cp->queue.next;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60fb      	str	r3, [r7, #12]
  } while (cp->prio > tp->prio);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d8f6      	bhi.n	80038c8 <chSchReadyAheadI+0x14>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	605a      	str	r2, [r3, #4]

  return tp;
 80038f6:	687b      	ldr	r3, [r7, #4]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	20000be8 	.word	0x20000be8

08003908 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
  thread_t *otp = currp;
 8003912:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <chSchGoSleepS+0x40>)
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	60fb      	str	r3, [r7, #12]

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	79fa      	ldrb	r2, [r7, #7]
 800391c:	f883 2020 	strb.w	r2, [r3, #32]
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003920:	4809      	ldr	r0, [pc, #36]	; (8003948 <chSchGoSleepS+0x40>)
 8003922:	f7ff ff36 	bl	8003792 <queue_fifo_remove.lto_priv.108>
 8003926:	4602      	mov	r2, r0
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <chSchGoSleepS+0x40>)
 800392a:	619a      	str	r2, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <chSchGoSleepS+0x40>)
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2020 	strb.w	r2, [r3, #32]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8003936:	4b04      	ldr	r3, [pc, #16]	; (8003948 <chSchGoSleepS+0x40>)
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	68f9      	ldr	r1, [r7, #12]
 800393c:	4618      	mov	r0, r3
 800393e:	f7fc fce3 	bl	8000308 <_port_switch>
}
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000be8 	.word	0x20000be8

0800394c <wakeup>:

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  thread_t *tp = (thread_t *)p;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	60fb      	str	r3, [r7, #12]

  chSysLockFromISR();
 8003958:	f7ff ff46 	bl	80037e8 <chSysLockFromISR.lto_priv.125>
  switch (tp->state) {
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003962:	2b07      	cmp	r3, #7
 8003964:	d822      	bhi.n	80039ac <wakeup+0x60>
 8003966:	a201      	add	r2, pc, #4	; (adr r2, 800396c <wakeup+0x20>)
 8003968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396c:	0800398d 	.word	0x0800398d
 8003970:	080039ad 	.word	0x080039ad
 8003974:	080039ad 	.word	0x080039ad
 8003978:	08003993 	.word	0x08003993
 800397c:	080039a7 	.word	0x080039a7
 8003980:	0800399d 	.word	0x0800399d
 8003984:	080039ad 	.word	0x080039ad
 8003988:	080039a7 	.word	0x080039a7
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 800398c:	f7ff ff31 	bl	80037f2 <chSysUnlockFromISR.lto_priv.123>
 8003990:	e015      	b.n	80039be <wakeup+0x72>
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e007      	b.n	80039ac <wakeup+0x60>
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff3c 	bl	800381e <chSemFastSignalI>
    /* Falls through.*/
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) queue_dequeue(tp);
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f7ff ff09 	bl	80037be <queue_dequeue>
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039b2:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7ff ff53 	bl	8003860 <chSchReadyI>
  chSysUnlockFromISR();
 80039ba:	f7ff ff1a 	bl	80037f2 <chSysUnlockFromISR.lto_priv.123>
}
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	71fb      	strb	r3, [r7, #7]

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d6:	d019      	beq.n	8003a0c <chSchGoSleepTimeoutS+0x48>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 80039d8:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <chSchGoSleepTimeoutS+0x60>)
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f107 000c 	add.w	r0, r7, #12
 80039e0:	4a11      	ldr	r2, [pc, #68]	; (8003a28 <chSchGoSleepTimeoutS+0x64>)
 80039e2:	6839      	ldr	r1, [r7, #0]
 80039e4:	f7ff fd92 	bl	800350c <chVTDoSetI>
    chSchGoSleepS(newstate);
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ff8c 	bl	8003908 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80039f0:	f107 030c 	add.w	r3, r7, #12
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff01 	bl	80037fc <chVTIsArmedI>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d009      	beq.n	8003a14 <chSchGoSleepTimeoutS+0x50>
      chVTDoResetI(&vt);
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fe1b 	bl	8003640 <chVTDoResetI>
 8003a0a:	e003      	b.n	8003a14 <chSchGoSleepTimeoutS+0x50>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff ff7a 	bl	8003908 <chSchGoSleepS>
  }

  return currp->u.rdymsg;
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <chSchGoSleepTimeoutS+0x60>)
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000be8 	.word	0x20000be8
 8003a28:	0800394d 	.word	0x0800394d

08003a2c <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  thread_t *otp = currp;
 8003a36:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <chSchWakeupS+0x50>)
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	60fb      	str	r3, [r7, #12]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d803      	bhi.n	8003a56 <chSchWakeupS+0x2a>
    (void) chSchReadyI(ntp);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff ff06 	bl	8003860 <chSchReadyI>
 8003a54:	e00e      	b.n	8003a74 <chSchWakeupS+0x48>
  }
  else {
    otp = chSchReadyI(otp);
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f7ff ff02 	bl	8003860 <chSchReadyI>
 8003a5c:	60f8      	str	r0, [r7, #12]
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 8003a5e:	4a07      	ldr	r2, [pc, #28]	; (8003a7c <chSchWakeupS+0x50>)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6193      	str	r3, [r2, #24]
    ntp->state = CH_STATE_CURRENT;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8003a6c:	68f9      	ldr	r1, [r7, #12]
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fc fc4a 	bl	8000308 <_port_switch>
  }
}
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000be8 	.word	0x20000be8

08003a80 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <chSchIsPreemptionRequired+0x30>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	607b      	str	r3, [r7, #4]
  tprio_t p2 = currp->prio;
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <chSchIsPreemptionRequired+0x30>)
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	603b      	str	r3, [r7, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	bf8c      	ite	hi
 8003a9e:	2301      	movhi	r3, #1
 8003aa0:	2300      	movls	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
#endif
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	20000be8 	.word	0x20000be8

08003ab4 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
  thread_t *otp = currp;
 8003aba:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <chSchDoReschedule+0x3c>)
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	607b      	str	r3, [r7, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003ac0:	480b      	ldr	r0, [pc, #44]	; (8003af0 <chSchDoReschedule+0x3c>)
 8003ac2:	f7ff fe66 	bl	8003792 <queue_fifo_remove.lto_priv.108>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <chSchDoReschedule+0x3c>)
 8003aca:	619a      	str	r2, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 8003acc:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <chSchDoReschedule+0x3c>)
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2020 	strb.w	r2, [r3, #32]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff feec 	bl	80038b4 <chSchReadyAheadI>
 8003adc:	6078      	str	r0, [r7, #4]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8003ade:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <chSchDoReschedule+0x3c>)
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fc fc0f 	bl	8000308 <_port_switch>
}
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000be8 	.word	0x20000be8

08003af4 <port_lock.lto_priv.121>:
static inline void port_lock(void) {
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	2320      	movs	r3, #32
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f383 8811 	msr	BASEPRI, r3
}
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <port_unlock.lto_priv.118>:
static inline void port_unlock(void) {
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	2300      	movs	r3, #0
 8003b16:	607b      	str	r3, [r7, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f383 8811 	msr	BASEPRI, r3
}
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <list_init.lto_priv.107>:
static inline void list_init(threads_list_t *tlp) {
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  tlp->next = (thread_t *)tlp;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	601a      	str	r2, [r3, #0]
}
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <list_notempty.lto_priv.105>:
static inline bool list_notempty(threads_list_t *tlp) {
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  return (bool)(tlp->next != (thread_t *)tlp);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	bf14      	ite	ne
 8003b52:	2301      	movne	r3, #1
 8003b54:	2300      	moveq	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <queue_init.lto_priv.93>:
static inline void queue_init(threads_queue_t *tqp) {
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  tqp->next = (thread_t *)tqp;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	605a      	str	r2, [r3, #4]
}
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <queue_notempty.lto_priv.77>:
static inline bool queue_notempty(const threads_queue_t *tqp) {
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <list_remove.lto_priv.106>:
static inline thread_t *list_remove(threads_list_t *tlp) {
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  thread_t *tp = tlp->next;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]
  tlp->next = tp->queue.next;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	601a      	str	r2, [r3, #0]
  return tp;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <queue_insert.lto_priv.91>:
static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  tp->queue.next             = (thread_t *)tqp;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = tqp->prev;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	601a      	str	r2, [r3, #0]
  tqp->prev                  = tp;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	605a      	str	r2, [r3, #4]
}
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <queue_fifo_remove.lto_priv.109>:
static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 8003bfa:	b480      	push	{r7}
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  thread_t *tp = tqp->next;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]
  tqp->next             = tp->queue.next;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	605a      	str	r2, [r3, #4]
  return tp;
 8003c18:	68fb      	ldr	r3, [r7, #12]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <chSysLock.lto_priv.88>:
static inline void chSysLock(void) {
 8003c26:	b580      	push	{r7, lr}
 8003c28:	af00      	add	r7, sp, #0
  port_lock();
 8003c2a:	f7ff ff63 	bl	8003af4 <port_lock.lto_priv.121>
}
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <chSysUnlock.lto_priv.85>:
static inline void chSysUnlock(void) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  port_unlock();
 8003c34:	f7ff ff6b 	bl	8003b0e <port_unlock.lto_priv.118>
}
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <chThdGetSelfX.lto_priv.98>:
  *
  * @return             A pointer to the current thread.
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0

  return ch.rlist.current;
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <chThdGetSelfX.lto_priv.98+0x14>)
 8003c42:	699b      	ldr	r3, [r3, #24]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000be8 	.word	0x20000be8

08003c54 <chThdSleepS.lto_priv.100>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @sclass
 */
static inline void chThdSleepS(sysinterval_t ticks) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	2008      	movs	r0, #8
 8003c60:	f7ff feb0 	bl	80039c4 <chSchGoSleepTimeoutS>
}
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <chThdDoDequeueNextI.lto_priv.97>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	6039      	str	r1, [r7, #0]
  thread_t *tp;

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff ffc0 	bl	8003bfa <queue_fifo_remove.lto_priv.109>
 8003c7a:	60f8      	str	r0, [r7, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f7ff fdec 	bl	8003860 <chSchReadyI>
}
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <usb_lld_start_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	460b      	mov	r3, r1
 8003c98:	70fb      	strb	r3, [r7, #3]
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	3302      	adds	r3, #2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <usb_lld_start_in+0x42>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	015b      	lsls	r3, r3, #5
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8003cc8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e02d      	b.n	8003d2c <usb_lld_start_in+0x9e>
  }
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <usb_lld_start_in+0x56>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d902      	bls.n	8003ce4 <usb_lld_start_in+0x56>
      isp->txsize = EP0_MAX_INSIZE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2240      	movs	r2, #64	; 0x40
 8003ce2:	601a      	str	r2, [r3, #0]

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	3302      	adds	r3, #2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	8a1b      	ldrh	r3, [r3, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	1e5a      	subs	r2, r3, #1
                    usbp->epc[ep]->in_maxsize;
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	3302      	adds	r3, #2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	8a1b      	ldrh	r3, [r3, #16]
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	60bb      	str	r3, [r7, #8]
    /* TODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	04d0      	lsls	r0, r2, #19
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	6812      	ldr	r2, [r2, #0]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003d1c:	4302      	orrs	r2, r0
 8003d1e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003d22:	015b      	lsls	r3, r3, #5
 8003d24:	440b      	add	r3, r1
 8003d26:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8003d2a:	601a      	str	r2, [r3, #0]
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	3302      	adds	r3, #2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d128      	bne.n	8003d94 <usb_lld_start_in+0x106>
    /* Odd/even bit toggling.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d010      	beq.n	8003d74 <usb_lld_start_in+0xe6>
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	3248      	adds	r2, #72	; 0x48
 8003d60:	0152      	lsls	r2, r2, #5
 8003d62:	4402      	add	r2, r0
 8003d64:	6812      	ldr	r2, [r2, #0]
 8003d66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d6a:	3348      	adds	r3, #72	; 0x48
 8003d6c:	015b      	lsls	r3, r3, #5
 8003d6e:	440b      	add	r3, r1
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	e00f      	b.n	8003d94 <usb_lld_start_in+0x106>
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	3248      	adds	r2, #72	; 0x48
 8003d82:	0152      	lsls	r2, r2, #5
 8003d84:	4402      	add	r2, r0
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003d8c:	3348      	adds	r3, #72	; 0x48
 8003d8e:	015b      	lsls	r3, r3, #5
 8003d90:	440b      	add	r3, r1
 8003d92:	601a      	str	r2, [r3, #0]
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	3248      	adds	r2, #72	; 0x48
 8003da2:	0152      	lsls	r2, r2, #5
 8003da4:	4402      	add	r2, r0
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003dac:	3348      	adds	r3, #72	; 0x48
 8003dae:	015b      	lsls	r3, r3, #5
 8003db0:	440b      	add	r3, r1
 8003db2:	601a      	str	r2, [r3, #0]
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003dbc:	f8d2 1834 	ldr.w	r1, [r2, #2100]	; 0x834
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	fa00 f202 	lsl.w	r2, r0, r2
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
}
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	3258      	adds	r2, #88	; 0x58
 8003df2:	0152      	lsls	r2, r2, #5
 8003df4:	4402      	add	r2, r0
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003dfc:	3358      	adds	r3, #88	; 0x58
 8003dfe:	015b      	lsls	r3, r3, #5
 8003e00:	440b      	add	r3, r1
 8003e02:	601a      	str	r2, [r3, #0]
}
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	70fb      	strb	r3, [r7, #3]

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	3248      	adds	r2, #72	; 0x48
 8003e28:	0152      	lsls	r2, r2, #5
 8003e2a:	4402      	add	r2, r0
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003e32:	3348      	adds	r3, #72	; 0x48
 8003e34:	015b      	lsls	r3, r3, #5
 8003e36:	440b      	add	r3, r1
 8003e38:	601a      	str	r2, [r3, #0]
}
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	70fb      	strb	r3, [r7, #3]

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	3258      	adds	r2, #88	; 0x58
 8003e5e:	0152      	lsls	r2, r2, #5
 8003e60:	4402      	add	r2, r0
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003e68:	3358      	adds	r3, #88	; 0x58
 8003e6a:	015b      	lsls	r3, r3, #5
 8003e6c:	440b      	add	r3, r1
 8003e6e:	601a      	str	r2, [r3, #0]
}
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	460b      	mov	r3, r1
 8003e84:	70fb      	strb	r3, [r7, #3]

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	3248      	adds	r2, #72	; 0x48
 8003e94:	0152      	lsls	r2, r2, #5
 8003e96:	4402      	add	r2, r0
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003e9e:	3348      	adds	r3, #72	; 0x48
 8003ea0:	015b      	lsls	r3, r3, #5
 8003ea2:	440b      	add	r3, r1
 8003ea4:	601a      	str	r2, [r3, #0]
}
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <port_lock.lto_priv.172>:
static inline void port_lock(void) {
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f383 8811 	msr	BASEPRI, r3
}
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <port_unlock.lto_priv.169>:
static inline void port_unlock(void) {
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f383 8811 	msr	BASEPRI, r3
}
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <port_lock_from_isr.lto_priv.166>:
static inline void port_lock_from_isr(void) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  port_lock();
 8003ee8:	f7ff ffe2 	bl	8003eb0 <port_lock.lto_priv.172>
}
 8003eec:	bd80      	pop	{r7, pc}

08003eee <port_unlock_from_isr.lto_priv.163>:
static inline void port_unlock_from_isr(void) {
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	af00      	add	r7, sp, #0
  port_unlock();
 8003ef2:	f7ff ffea 	bl	8003eca <port_unlock.lto_priv.169>
}
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <chSysLockFromISR.lto_priv.160>:
static inline void chSysLockFromISR(void) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 8003efc:	f7ff fff2 	bl	8003ee4 <port_lock_from_isr.lto_priv.166>
}
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <chSysUnlockFromISR.lto_priv.157>:
static inline void chSysUnlockFromISR(void) {
 8003f02:	b580      	push	{r7, lr}
 8003f04:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 8003f06:	f7ff fff2 	bl	8003eee <port_unlock_from_isr.lto_priv.163>
}
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <osalSysHalt.lto_priv.148>:
static inline void osalSysHalt(const char *reason) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  chSysHalt(reason);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff fa53 	bl	80033c0 <chSysHalt>
}
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <osalSysLockFromISR.lto_priv.154>:
static inline void osalSysLockFromISR(void) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  chSysLockFromISR();
 8003f24:	f7ff ffe8 	bl	8003ef8 <chSysLockFromISR.lto_priv.160>
}
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <osalSysUnlockFromISR.lto_priv.151>:
static inline void osalSysUnlockFromISR(void) {
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	af00      	add	r7, sp, #0
  chSysUnlockFromISR();
 8003f2e:	f7ff ffe8 	bl	8003f02 <chSysUnlockFromISR.lto_priv.157>
}
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <osalThreadResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]

  chThdResumeI(trp, msg);
 8003f3e:	6839      	ldr	r1, [r7, #0]
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7fe fdf4 	bl	8002b2e <chThdResumeI>
}
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <spi_lld_serve_rx_interrupt>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <spi_lld_serve_rx_interrupt+0x1a>
    STM32_SPI_DMA_ERROR_HOOK(spip);
 8003f60:	4844      	ldr	r0, [pc, #272]	; (8004074 <spi_lld_serve_rx_interrupt+0x128>)
 8003f62:	f7ff ffd3 	bl	8003f0c <osalSysHalt.lto_priv.148>
  }
#else
  (void)flags;
#endif

  if (spip->config->circular) {
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d024      	beq.n	8003fba <spi_lld_serve_rx_interrupt+0x6e>
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <spi_lld_serve_rx_interrupt+0x44>
      /* Half buffer interrupt.*/
      _spi_isr_code_half1(spip);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d074      	beq.n	800406e <spi_lld_serve_rx_interrupt+0x122>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	4798      	blx	r3
    }
    else {
      /* End buffer interrupt.*/
      _spi_isr_code_half2(spip);
 8003f8e:	e06e      	b.n	800406e <spi_lld_serve_rx_interrupt+0x122>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d069      	beq.n	800406e <spi_lld_serve_rx_interrupt+0x122>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	4798      	blx	r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d15d      	bne.n	800406e <spi_lld_serve_rx_interrupt+0x122>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e059      	b.n	800406e <spi_lld_serve_rx_interrupt+0x122>
    }
  }
  else {
    /* Stopping DMAs.*/
    dmaStreamDisable(spip->dmatx);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	f022 021f 	bic.w	r2, r2, #31
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f7      	bne.n	8003fce <spi_lld_serve_rx_interrupt+0x82>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fe8:	7a12      	ldrb	r2, [r2, #8]
 8003fea:	4611      	mov	r1, r2
 8003fec:	223d      	movs	r2, #61	; 0x3d
 8003fee:	408a      	lsls	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
    dmaStreamDisable(spip->dmarx);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6a12      	ldr	r2, [r2, #32]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	f022 021f 	bic.w	r2, r2, #31
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f7      	bne.n	8004006 <spi_lld_serve_rx_interrupt+0xba>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6a12      	ldr	r2, [r2, #32]
 8004020:	7a12      	ldrb	r2, [r2, #8]
 8004022:	4611      	mov	r1, r2
 8004024:	223d      	movs	r2, #61	; 0x3d
 8004026:	408a      	lsls	r2, r1
 8004028:	601a      	str	r2, [r3, #0]

    /* Portable SPI ISR code defined in the high level driver, note, it is
       a macro.*/
    _spi_isr_code(spip);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00f      	beq.n	8004054 <spi_lld_serve_rx_interrupt+0x108>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2204      	movs	r2, #4
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b04      	cmp	r3, #4
 800404a:	d106      	bne.n	800405a <spi_lld_serve_rx_interrupt+0x10e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	e002      	b.n	800405a <spi_lld_serve_rx_interrupt+0x10e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	f7ff ff61 	bl	8003f20 <osalSysLockFromISR.lto_priv.154>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3308      	adds	r3, #8
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff65 	bl	8003f34 <osalThreadResumeI>
 800406a:	f7ff ff5e 	bl	8003f2a <osalSysUnlockFromISR.lto_priv.151>
  }
}
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	0800930c 	.word	0x0800930c

08004078 <spi_lld_serve_tx_interrupt>:
 * @brief   Shared end-of-tx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	f003 030c 	and.w	r3, r3, #12
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <spi_lld_serve_tx_interrupt+0x1a>
    STM32_SPI_DMA_ERROR_HOOK(spip);
 800408c:	4802      	ldr	r0, [pc, #8]	; (8004098 <spi_lld_serve_tx_interrupt+0x20>)
 800408e:	f7ff ff3d 	bl	8003f0c <osalSysHalt.lto_priv.148>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	0800930c 	.word	0x0800930c

0800409c <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 80040a0:	4809      	ldr	r0, [pc, #36]	; (80040c8 <spi_lld_init+0x2c>)
 80040a2:	f003 fe40 	bl	8007d26 <spiObjectInit>
  SPID1.spi       = SPI1;
 80040a6:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <spi_lld_init+0x2c>)
 80040a8:	4a08      	ldr	r2, [pc, #32]	; (80040cc <spi_lld_init+0x30>)
 80040aa:	61da      	str	r2, [r3, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80040ac:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <spi_lld_init+0x2c>)
 80040ae:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <spi_lld_init+0x34>)
 80040b0:	621a      	str	r2, [r3, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 80040b2:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <spi_lld_init+0x2c>)
 80040b4:	4a07      	ldr	r2, [pc, #28]	; (80040d4 <spi_lld_init+0x38>)
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <spi_lld_init+0x2c>)
 80040ba:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <spi_lld_init+0x3c>)
 80040bc:	629a      	str	r2, [r3, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80040be:	4b02      	ldr	r3, [pc, #8]	; (80040c8 <spi_lld_init+0x2c>)
 80040c0:	4a06      	ldr	r2, [pc, #24]	; (80040dc <spi_lld_init+0x40>)
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c
                    STM32_DMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_M2P |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif
}
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	2000093c 	.word	0x2000093c
 80040cc:	40013000 	.word	0x40013000
 80040d0:	08008da8 	.word	0x08008da8
 80040d4:	08008dcc 	.word	0x08008dcc
 80040d8:	06010016 	.word	0x06010016
 80040dc:	06010046 	.word	0x06010046

080040e0 <spi_lld_start>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d12f      	bne.n	8004150 <spi_lld_start+0x70>
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a4b      	ldr	r2, [pc, #300]	; (8004220 <spi_lld_start+0x140>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d11d      	bne.n	8004134 <spi_lld_start+0x54>
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a18      	ldr	r0, [r3, #32]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a49      	ldr	r2, [pc, #292]	; (8004224 <spi_lld_start+0x144>)
 8004100:	210a      	movs	r1, #10
 8004102:	f000 fe6d 	bl	8004de0 <dmaStreamAllocate>
 8004106:	4603      	mov	r3, r0
 8004108:	73fb      	strb	r3, [r7, #15]
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a45      	ldr	r2, [pc, #276]	; (8004228 <spi_lld_start+0x148>)
 8004112:	210a      	movs	r1, #10
 8004114:	f000 fe64 	bl	8004de0 <dmaStreamAllocate>
 8004118:	4603      	mov	r3, r0
 800411a:	73fb      	strb	r3, [r7, #15]
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(true);
 800411c:	4a43      	ldr	r2, [pc, #268]	; (800422c <spi_lld_start+0x14c>)
 800411e:	4b43      	ldr	r3, [pc, #268]	; (800422c <spi_lld_start+0x14c>)
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004126:	6453      	str	r3, [r2, #68]	; 0x44
 8004128:	4a40      	ldr	r2, [pc, #256]	; (800422c <spi_lld_start+0x14c>)
 800412a:	4b40      	ldr	r3, [pc, #256]	; (800422c <spi_lld_start+0x14c>)
 800412c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004132:	6653      	str	r3, [r2, #100]	; 0x64
      rccEnableSPI6(true);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	69d2      	ldr	r2, [r2, #28]
 800413e:	320c      	adds	r2, #12
 8004140:	609a      	str	r2, [r3, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	69d2      	ldr	r2, [r2, #28]
 800414c:	320c      	adds	r2, #12
 800414e:	609a      	str	r2, [r3, #8]
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	8a1b      	ldrh	r3, [r3, #16]
 8004156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10c      	bne.n	8004178 <spi_lld_start+0x98>
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8004162:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 800416e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	62da      	str	r2, [r3, #44]	; 0x2c
 8004176:	e00f      	b.n	8004198 <spi_lld_start+0xb8>
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8004180:	f443 5220 	orr.w	r2, r3, #10240	; 0x2800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8004190:	f443 5220 	orr.w	r2, r3, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  if (spip->config->circular) {
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00c      	beq.n	80041bc <spi_lld_start+0xdc>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	f443 7284 	orr.w	r2, r3, #264	; 0x108
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	f443 7284 	orr.w	r2, r3, #264	; 0x108
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80041ba:	e00b      	b.n	80041d4 <spi_lld_start+0xf4>
  }
  else {
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	f423 7284 	bic.w	r2, r3, #264	; 0x108
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	f423 7284 	bic.w	r2, r3, #264	; 0x108
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	69d2      	ldr	r2, [r2, #28]
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e2:	601a      	str	r2, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6852      	ldr	r2, [r2, #4]
 80041ec:	8a12      	ldrh	r2, [r2, #16]
 80041ee:	f442 7241 	orr.w	r2, r2, #772	; 0x304
 80041f2:	b292      	uxth	r2, r2
 80041f4:	601a      	str	r2, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6852      	ldr	r2, [r2, #4]
 80041fe:	8a52      	ldrh	r2, [r2, #18]
 8004200:	f042 0207 	orr.w	r2, r2, #7
 8004204:	b292      	uxth	r2, r2
 8004206:	605a      	str	r2, [r3, #4]
                    SPI_CR2_TXDMAEN;
  spip->spi->CR1 |= SPI_CR1_SPE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	69d2      	ldr	r2, [r2, #28]
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004216:	601a      	str	r2, [r3, #0]
}
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	2000093c 	.word	0x2000093c
 8004224:	08003f4d 	.word	0x08003f4d
 8004228:	08004079 	.word	0x08004079
 800422c:	40023800 	.word	0x40023800

08004230 <spi_lld_send>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1c      	ldr	r2, [pc, #112]	; (80042b4 <spi_lld_send+0x84>)
 8004244:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800425a:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800427a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800427e:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	6a12      	ldr	r2, [r2, #32]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(spip->dmatx);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
}
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	2000096c 	.word	0x2000096c

080042b8 <spi_lld_receive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042e6:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a13      	ldr	r2, [pc, #76]	; (800433c <spi_lld_receive+0x84>)
 80042f0:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004306:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	6a12      	ldr	r2, [r2, #32]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(spip->dmatx);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
}
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	08008e38 	.word	0x08008e38

08004340 <port_lock.lto_priv.173>:
static inline void port_lock(void) {
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	2320      	movs	r3, #32
 8004348:	607b      	str	r3, [r7, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f383 8811 	msr	BASEPRI, r3
}
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <port_unlock.lto_priv.170>:
static inline void port_unlock(void) {
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	2300      	movs	r3, #0
 8004362:	607b      	str	r3, [r7, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f383 8811 	msr	BASEPRI, r3
}
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <port_lock_from_isr.lto_priv.167>:
static inline void port_lock_from_isr(void) {
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  port_lock();
 8004378:	f7ff ffe2 	bl	8004340 <port_lock.lto_priv.173>
}
 800437c:	bd80      	pop	{r7, pc}

0800437e <port_unlock_from_isr.lto_priv.164>:
static inline void port_unlock_from_isr(void) {
 800437e:	b580      	push	{r7, lr}
 8004380:	af00      	add	r7, sp, #0
  port_unlock();
 8004382:	f7ff ffea 	bl	800435a <port_unlock.lto_priv.170>
}
 8004386:	bd80      	pop	{r7, pc}

08004388 <chSysLockFromISR.lto_priv.161>:
static inline void chSysLockFromISR(void) {
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 800438c:	f7ff fff2 	bl	8004374 <port_lock_from_isr.lto_priv.167>
}
 8004390:	bd80      	pop	{r7, pc}

08004392 <chSysUnlockFromISR.lto_priv.158>:
static inline void chSysUnlockFromISR(void) {
 8004392:	b580      	push	{r7, lr}
 8004394:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 8004396:	f7ff fff2 	bl	800437e <port_unlock_from_isr.lto_priv.164>
}
 800439a:	bd80      	pop	{r7, pc}

0800439c <osalSysLockFromISR.lto_priv.155>:
static inline void osalSysLockFromISR(void) {
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  chSysLockFromISR();
 80043a0:	f7ff fff2 	bl	8004388 <chSysLockFromISR.lto_priv.161>
}
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <osalSysUnlockFromISR.lto_priv.152>:
static inline void osalSysUnlockFromISR(void) {
 80043a6:	b580      	push	{r7, lr}
 80043a8:	af00      	add	r7, sp, #0
  chSysUnlockFromISR();
 80043aa:	f7ff fff2 	bl	8004392 <chSysUnlockFromISR.lto_priv.158>
}
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  chSysTimerHandlerI();
 80043b4:	f7ff f810 	bl	80033d8 <chSysTimerHandlerI>
}
 80043b8:	bd80      	pop	{r7, pc}

080043ba <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80043ba:	b580      	push	{r7, lr}
 80043bc:	af00      	add	r7, sp, #0
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80043be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d009      	beq.n	80043e0 <VectorB0+0x26>
    STM32_ST_TIM->SR = 0U;
 80043cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043d0:	2200      	movs	r2, #0
 80043d2:	611a      	str	r2, [r3, #16]

    osalSysLockFromISR();
 80043d4:	f7ff ffe2 	bl	800439c <osalSysLockFromISR.lto_priv.155>
    osalOsTimerHandlerI();
 80043d8:	f7ff ffea 	bl	80043b0 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
 80043dc:	f7ff ffe3 	bl	80043a6 <osalSysUnlockFromISR.lto_priv.152>
  }

  OSAL_IRQ_EPILOGUE();
 80043e0:	f7fc fd92 	bl	8000f08 <_port_irq_epilogue>
}
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80043ec:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <st_lld_init+0x78>)
 80043ee:	4b1c      	ldr	r3, [pc, #112]	; (8004460 <st_lld_init+0x78>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	6413      	str	r3, [r2, #64]	; 0x40
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <st_lld_init+0x78>)
 80043fa:	4b19      	ldr	r3, [pc, #100]	; (8004460 <st_lld_init+0x78>)
 80043fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	6613      	str	r3, [r2, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8004404:	4a17      	ldr	r2, [pc, #92]	; (8004464 <st_lld_init+0x7c>)
 8004406:	4b17      	ldr	r3, [pc, #92]	; (8004464 <st_lld_init+0x7c>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004414:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004418:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800441a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800441e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8004424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004428:	2200      	movs	r2, #0
 800442a:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800442c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004430:	2200      	movs	r2, #0
 8004432:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8004434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004438:	2200      	movs	r2, #0
 800443a:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 800443c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004440:	2200      	movs	r2, #0
 8004442:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8004444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004448:	2201      	movs	r2, #1
 800444a:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800444c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004450:	2201      	movs	r2, #1
 8004452:	601a      	str	r2, [r3, #0]

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8004454:	2108      	movs	r1, #8
 8004456:	201c      	movs	r0, #28
 8004458:	f002 fb9a 	bl	8006b90 <nvicEnableVector>
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40023800 	.word	0x40023800
 8004464:	e0042000 	.word	0xe0042000

08004468 <port_lock.lto_priv.174>:
static inline void port_lock(void) {
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	2320      	movs	r3, #32
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f383 8811 	msr	BASEPRI, r3
}
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <port_unlock.lto_priv.171>:
static inline void port_unlock(void) {
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	2300      	movs	r3, #0
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f383 8811 	msr	BASEPRI, r3
}
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <port_lock_from_isr.lto_priv.168>:
static inline void port_lock_from_isr(void) {
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  port_lock();
 80044a0:	f7ff ffe2 	bl	8004468 <port_lock.lto_priv.174>
}
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <port_unlock_from_isr.lto_priv.165>:
static inline void port_unlock_from_isr(void) {
 80044a6:	b580      	push	{r7, lr}
 80044a8:	af00      	add	r7, sp, #0
  port_unlock();
 80044aa:	f7ff ffea 	bl	8004482 <port_unlock.lto_priv.171>
}
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <chSysLockFromISR.lto_priv.162>:
static inline void chSysLockFromISR(void) {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 80044b4:	f7ff fff2 	bl	800449c <port_lock_from_isr.lto_priv.168>
}
 80044b8:	bd80      	pop	{r7, pc}

080044ba <chSysUnlockFromISR.lto_priv.159>:
static inline void chSysUnlockFromISR(void) {
 80044ba:	b580      	push	{r7, lr}
 80044bc:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 80044be:	f7ff fff2 	bl	80044a6 <port_unlock_from_isr.lto_priv.165>
}
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <osalSysLockFromISR.lto_priv.156>:
static inline void osalSysLockFromISR(void) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  chSysLockFromISR();
 80044c8:	f7ff fff2 	bl	80044b0 <chSysLockFromISR.lto_priv.162>
}
 80044cc:	bd80      	pop	{r7, pc}

080044ce <osalSysUnlockFromISR.lto_priv.153>:
static inline void osalSysUnlockFromISR(void) {
 80044ce:	b580      	push	{r7, lr}
 80044d0:	af00      	add	r7, sp, #0
  chSysUnlockFromISR();
 80044d2:	f7ff fff2 	bl	80044ba <chSysUnlockFromISR.lto_priv.159>
}
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <osalEventBroadcastFlagsI>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]

  chEvtBroadcastFlagsI(esp, flags);
 80044e2:	6839      	ldr	r1, [r7, #0]
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7fe f99b 	bl	8002820 <chEvtBroadcastFlagsI>
}
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	807b      	strh	r3, [r7, #2]
  eventflags_t sts = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]

  if (sr & USART_SR_ORE)
 8004500:	887b      	ldrh	r3, [r7, #2]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <set_error+0x22>
    sts |= SD_OVERRUN_ERROR;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004510:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_PE)
 8004512:	887b      	ldrh	r3, [r7, #2]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <set_error+0x34>
    sts |= SD_PARITY_ERROR;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f043 0320 	orr.w	r3, r3, #32
 8004522:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_FE)
 8004524:	887b      	ldrh	r3, [r7, #2]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <set_error+0x46>
    sts |= SD_FRAMING_ERROR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004534:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_NE)
 8004536:	887b      	ldrh	r3, [r7, #2]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <set_error+0x58>
    sts |= SD_NOISE_ERROR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004546:	60fb      	str	r3, [r7, #12]
  chnAddFlagsI(sdp, sts);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3304      	adds	r3, #4
 800454c:	68f9      	ldr	r1, [r7, #12]
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff ffc2 	bl	80044d8 <osalEventBroadcastFlagsI>
}
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 800455a:	b580      	push	{r7, lr}
 800455c:	b086      	sub	sp, #24
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  USART_TypeDef *u = sdp->usart;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004566:	613b      	str	r3, [r7, #16]
  uint16_t cr1 = u->CR1;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	81fb      	strh	r3, [r7, #14]
  uint16_t sr = u->SR;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	82fb      	strh	r3, [r7, #22]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8004574:	8afb      	ldrh	r3, [r7, #22]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00e      	beq.n	800459c <serve_interrupt+0x42>
    osalSysLockFromISR();
 800457e:	f7ff ffa1 	bl	80044c4 <osalSysLockFromISR.lto_priv.156>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3304      	adds	r3, #4
 8004586:	f44f 7100 	mov.w	r1, #512	; 0x200
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff ffa4 	bl	80044d8 <osalEventBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004596:	601a      	str	r2, [r3, #0]
    osalSysUnlockFromISR();
 8004598:	f7ff ff99 	bl	80044ce <osalSysUnlockFromISR.lto_priv.153>
  }

  /* Data available.*/
  osalSysLockFromISR();
 800459c:	f7ff ff92 	bl	80044c4 <osalSysLockFromISR.lto_priv.156>
 80045a0:	e01e      	b.n	80045e0 <serve_interrupt+0x86>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80045a2:	8afb      	ldrh	r3, [r7, #22]
 80045a4:	f003 030f 	and.w	r3, r3, #15
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <serve_interrupt+0x5c>
      set_error(sdp, sr);
 80045ac:	8afb      	ldrh	r3, [r7, #22]
 80045ae:	4619      	mov	r1, r3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff ff9d 	bl	80044f0 <set_error>
    b = (uint8_t)u->DR & sdp->rxmask;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80045c2:	4013      	ands	r3, r2
 80045c4:	737b      	strb	r3, [r7, #13]
    if (sr & USART_SR_RXNE)
 80045c6:	8afb      	ldrh	r3, [r7, #22]
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d004      	beq.n	80045da <serve_interrupt+0x80>
      sdIncomingDataI(sdp, b);
 80045d0:	7b7b      	ldrb	r3, [r7, #13]
 80045d2:	4619      	mov	r1, r3
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f002 ff8d 	bl	80074f4 <sdIncomingDataI>
    sr = u->SR;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	82fb      	strh	r3, [r7, #22]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80045e0:	8afb      	ldrh	r3, [r7, #22]
 80045e2:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1db      	bne.n	80045a2 <serve_interrupt+0x48>
  }
  osalSysUnlockFromISR();
 80045ea:	f7ff ff70 	bl	80044ce <osalSysUnlockFromISR.lto_priv.153>

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80045ee:	89fb      	ldrh	r3, [r7, #14]
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d022      	beq.n	800463e <serve_interrupt+0xe4>
 80045f8:	8afb      	ldrh	r3, [r7, #22]
 80045fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d01d      	beq.n	800463e <serve_interrupt+0xe4>
    msg_t b;
    osalSysLockFromISR();
 8004602:	f7ff ff5f 	bl	80044c4 <osalSysLockFromISR.lto_priv.156>
    b = oqGetI(&sdp->oqueue);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3330      	adds	r3, #48	; 0x30
 800460a:	4618      	mov	r0, r3
 800460c:	f002 fdf8 	bl	8007200 <oqGetI>
 8004610:	60b8      	str	r0, [r7, #8]
    if (b < MSG_OK) {
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	da0d      	bge.n	8004634 <serve_interrupt+0xda>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	2108      	movs	r1, #8
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff ff5a 	bl	80044d8 <osalEventBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8004624:	89fb      	ldrh	r3, [r7, #14]
 8004626:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800462a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	60da      	str	r2, [r3, #12]
 8004632:	e002      	b.n	800463a <serve_interrupt+0xe0>
    }
    else
      u->DR = b;
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	605a      	str	r2, [r3, #4]
    osalSysUnlockFromISR();
 800463a:	f7ff ff48 	bl	80044ce <osalSysUnlockFromISR.lto_priv.153>
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800463e:	89fb      	ldrh	r3, [r7, #14]
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d025      	beq.n	8004694 <serve_interrupt+0x13a>
 8004648:	8afb      	ldrh	r3, [r7, #22]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d020      	beq.n	8004694 <serve_interrupt+0x13a>
    osalSysLockFromISR();
 8004652:	f7ff ff37 	bl	80044c4 <osalSysLockFromISR.lto_priv.156>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465e:	429a      	cmp	r2, r3
 8004660:	d105      	bne.n	800466e <serve_interrupt+0x114>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <serve_interrupt+0x114>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <serve_interrupt+0x116>
 800466e:	2300      	movs	r3, #0
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <serve_interrupt+0x136>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3304      	adds	r3, #4
 800467e:	2110      	movs	r1, #16
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ff29 	bl	80044d8 <osalEventBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004686:	89fb      	ldrh	r3, [r7, #14]
 8004688:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	60da      	str	r2, [r3, #12]
    }
    osalSysUnlockFromISR();
 8004690:	f7ff ff1d 	bl	80044ce <osalSysUnlockFromISR.lto_priv.153>
  }
}
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 80046a4:	4a05      	ldr	r2, [pc, #20]	; (80046bc <notify1+0x20>)
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <notify1+0x20>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ae:	60d3      	str	r3, [r2, #12]
}
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40011000 	.word	0x40011000

080046c0 <notify2>:
#endif

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 80046c8:	4a05      	ldr	r2, [pc, #20]	; (80046e0 <notify2+0x20>)
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <notify2+0x20>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d2:	60d3      	str	r3, [r2, #12]
}
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40004400 	.word	0x40004400

080046e4 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);
 80046e8:	4802      	ldr	r0, [pc, #8]	; (80046f4 <VectorD4+0x10>)
 80046ea:	f7ff ff36 	bl	800455a <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80046ee:	f7fc fc0b 	bl	8000f08 <_port_irq_epilogue>
}
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000970 	.word	0x20000970

080046f8 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);
 80046fc:	4802      	ldr	r0, [pc, #8]	; (8004708 <VectorD8+0x10>)
 80046fe:	f7ff ff2c 	bl	800455a <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8004702:	f7fc fc01 	bl	8000f08 <_port_irq_epilogue>
}
 8004706:	bd80      	pop	{r7, pc}
 8004708:	200009ec 	.word	0x200009ec

0800470c <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8004710:	4a08      	ldr	r2, [pc, #32]	; (8004734 <sd_lld_init+0x28>)
 8004712:	2100      	movs	r1, #0
 8004714:	4808      	ldr	r0, [pc, #32]	; (8004738 <sd_lld_init+0x2c>)
 8004716:	f002 febf 	bl	8007498 <sdObjectInit>
  SD1.usart = USART1;
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <sd_lld_init+0x2c>)
 800471c:	4a07      	ldr	r2, [pc, #28]	; (800473c <sd_lld_init+0x30>)
 800471e:	675a      	str	r2, [r3, #116]	; 0x74
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8004720:	4a07      	ldr	r2, [pc, #28]	; (8004740 <sd_lld_init+0x34>)
 8004722:	2100      	movs	r1, #0
 8004724:	4807      	ldr	r0, [pc, #28]	; (8004744 <sd_lld_init+0x38>)
 8004726:	f002 feb7 	bl	8007498 <sdObjectInit>
  SD2.usart = USART2;
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <sd_lld_init+0x38>)
 800472c:	4a06      	ldr	r2, [pc, #24]	; (8004748 <sd_lld_init+0x3c>)
 800472e:	675a      	str	r2, [r3, #116]	; 0x74

#if STM32_SERIAL_USE_UART8
  sdObjectInit(&SD8, NULL, notify8);
  SD8.usart = UART8;
#endif
}
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	0800469d 	.word	0x0800469d
 8004738:	20000970 	.word	0x20000970
 800473c:	40011000 	.word	0x40011000
 8004740:	080046c1 	.word	0x080046c1
 8004744:	200009ec 	.word	0x200009ec
 8004748:	40004400 	.word	0x40004400

0800474c <osalSysHalt.lto_priv.149>:
static inline void osalSysHalt(const char *reason) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  chSysHalt(reason);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7fe fe33 	bl	80033c0 <chSysHalt>
}
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <translate_errors>:
static uartflags_t translate_errors(uint16_t sr) {
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	80fb      	strh	r3, [r7, #6]
  uartflags_t sts = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_ORE)
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <translate_errors+0x20>
    sts |= UART_OVERRUN_ERROR;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f043 0310 	orr.w	r3, r3, #16
 800477e:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_PE)
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <translate_errors+0x32>
    sts |= UART_PARITY_ERROR;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f043 0304 	orr.w	r3, r3, #4
 8004790:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_FE)
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <translate_errors+0x44>
    sts |= UART_FRAMING_ERROR;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f043 0308 	orr.w	r3, r3, #8
 80047a2:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_NE)
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <translate_errors+0x56>
    sts |= UART_NOISE_ERROR;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f043 0320 	orr.w	r3, r3, #32
 80047b4:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_LBD)
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <translate_errors+0x68>
    sts |= UART_BREAK_DETECTED;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047c6:	60fb      	str	r3, [r7, #12]
  return sts;
 80047c8:	68fb      	ldr	r3, [r7, #12]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <uart_enter_rx_idle_loop.lto_priv.144>:
static void uart_enter_rx_idle_loop(UARTDriver *uartp) {
 80047d6:	b480      	push	{r7}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  if (uartp->config->rxchar_cb == NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d103      	bne.n	80047f0 <uart_enter_rx_idle_loop.lto_priv.144+0x1a>
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 80047e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	e002      	b.n	80047f6 <uart_enter_rx_idle_loop.lto_priv.144+0x20>
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 80047f0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80047f4:	60fb      	str	r3, [r7, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	3218      	adds	r2, #24
 8004800:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2201      	movs	r2, #1
 800480a:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68d1      	ldr	r1, [r2, #12]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	430a      	orrs	r2, r1
 800481a:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(uartp->dmarx);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6912      	ldr	r2, [r2, #16]
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	6812      	ldr	r2, [r2, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
}
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <usart_stop.lto_priv.145>:
static void usart_stop(UARTDriver *uartp) {
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  dmaStreamDisable(uartp->dmarx);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6912      	ldr	r2, [r2, #16]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	f022 021f 	bic.w	r2, r2, #31
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f7      	bne.n	8004856 <usart_stop.lto_priv.145+0x1c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6912      	ldr	r2, [r2, #16]
 8004870:	7a12      	ldrb	r2, [r2, #8]
 8004872:	4611      	mov	r1, r2
 8004874:	223d      	movs	r2, #61	; 0x3d
 8004876:	408a      	lsls	r2, r1
 8004878:	601a      	str	r2, [r3, #0]
  dmaStreamDisable(uartp->dmatx);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6952      	ldr	r2, [r2, #20]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	f022 021f 	bic.w	r2, r2, #31
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f7      	bne.n	800488e <usart_stop.lto_priv.145+0x54>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6952      	ldr	r2, [r2, #20]
 80048a8:	7a12      	ldrb	r2, [r2, #8]
 80048aa:	4611      	mov	r1, r2
 80048ac:	223d      	movs	r2, #61	; 0x3d
 80048ae:	408a      	lsls	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
  uartp->usart->CR1 = 0;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2200      	movs	r2, #0
 80048b8:	60da      	str	r2, [r3, #12]
  uartp->usart->CR2 = 0;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2200      	movs	r2, #0
 80048c0:	611a      	str	r2, [r3, #16]
  uartp->usart->CR3 = 0;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2200      	movs	r2, #0
 80048c8:	615a      	str	r2, [r3, #20]
}
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <usart_start.lto_priv.146>:
static void usart_start(UARTDriver *uartp) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  USART_TypeDef *u = uartp->usart;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	60fb      	str	r3, [r7, #12]
  usart_stop(uartp);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ffa9 	bl	800483a <usart_stop.lto_priv.145>
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4a21      	ldr	r2, [pc, #132]	; (8004974 <usart_start.lto_priv.146+0xa0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <usart_start.lto_priv.146+0x28>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	4a20      	ldr	r2, [pc, #128]	; (8004978 <usart_start.lto_priv.146+0xa4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d108      	bne.n	800490e <usart_start.lto_priv.146+0x3a>
    u->BRR = STM32_PCLK2 / uartp->config->speed;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	4a1e      	ldr	r2, [pc, #120]	; (800497c <usart_start.lto_priv.146+0xa8>)
 8004904:	fbb2 f2f3 	udiv	r2, r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	e007      	b.n	800491e <usart_start.lto_priv.146+0x4a>
    u->BRR = STM32_PCLK1 / uartp->config->speed;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	4a1a      	ldr	r2, [pc, #104]	; (8004980 <usart_start.lto_priv.146+0xac>)
 8004916:	fbb2 f2f3 	udiv	r2, r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	609a      	str	r2, [r3, #8]
  (void)u->SR;  /* SR reset step 1.*/
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	685b      	ldr	r3, [r3, #4]
  u->SR = 0;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	8b5b      	ldrh	r3, [r3, #26]
 8004932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004936:	b29b      	uxth	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	611a      	str	r2, [r3, #16]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	8b9b      	ldrh	r3, [r3, #28]
 8004944:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8004948:	b29b      	uxth	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	615a      	str	r2, [r3, #20]
  cr1 = USART_CR1_UE | USART_CR1_PEIE | USART_CR1_TE | USART_CR1_RE;
 8004950:	f242 130c 	movw	r3, #8460	; 0x210c
 8004954:	817b      	strh	r3, [r7, #10]
  u->CR1 = uartp->config->cr1 | cr1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	8b1a      	ldrh	r2, [r3, #24]
 800495c:	897b      	ldrh	r3, [r7, #10]
 800495e:	4313      	orrs	r3, r2
 8004960:	b29b      	uxth	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	60da      	str	r2, [r3, #12]
  uart_enter_rx_idle_loop(uartp);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ff34 	bl	80047d6 <uart_enter_rx_idle_loop.lto_priv.144>
}
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40011000 	.word	0x40011000
 8004978:	40011400 	.word	0x40011400
 800497c:	0501bd00 	.word	0x0501bd00
 8004980:	0280de80 	.word	0x0280de80

08004984 <uart_lld_serve_rx_end_irq.lto_priv.142>:
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f003 030c 	and.w	r3, r3, #12
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <uart_lld_serve_rx_end_irq.lto_priv.142+0x1a>
    STM32_UART_DMA_ERROR_HOOK(uartp);
 8004998:	4825      	ldr	r0, [pc, #148]	; (8004a30 <uart_lld_serve_rx_end_irq.lto_priv.142+0xac>)
 800499a:	f7ff fed7 	bl	800474c <osalSysHalt.lto_priv.149>
  if (uartp->rxstate == UART_RX_IDLE) {
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	789b      	ldrb	r3, [r3, #2]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10e      	bne.n	80049c4 <uart_lld_serve_rx_end_irq.lto_priv.142+0x40>
    _uart_rx_idle_code(uartp);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d03c      	beq.n	8004a2a <uart_lld_serve_rx_end_irq.lto_priv.142+0xa6>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	8b12      	ldrh	r2, [r2, #24]
 80049ba:	b292      	uxth	r2, r2
 80049bc:	4611      	mov	r1, r2
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
 80049c2:	e032      	b.n	8004a2a <uart_lld_serve_rx_end_irq.lto_priv.142+0xa6>
    dmaStreamDisable(uartp->dmarx);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6912      	ldr	r2, [r2, #16]
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	f022 021f 	bic.w	r2, r2, #31
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f7      	bne.n	80049d8 <uart_lld_serve_rx_end_irq.lto_priv.142+0x54>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6912      	ldr	r2, [r2, #16]
 80049f2:	7a12      	ldrb	r2, [r2, #8]
 80049f4:	4611      	mov	r1, r2
 80049f6:	223d      	movs	r2, #61	; 0x3d
 80049f8:	408a      	lsls	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
    _uart_rx_complete_isr_code(uartp);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	709a      	strb	r2, [r3, #2]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <uart_lld_serve_rx_end_irq.lto_priv.142+0x92>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	4798      	blx	r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	789b      	ldrb	r3, [r3, #2]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d105      	bne.n	8004a2a <uart_lld_serve_rx_end_irq.lto_priv.142+0xa6>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	709a      	strb	r2, [r3, #2]
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff fed6 	bl	80047d6 <uart_enter_rx_idle_loop.lto_priv.144>
}
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	0800930c 	.word	0x0800930c

08004a34 <uart_lld_serve_tx_end_irq.lto_priv.143>:
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <uart_lld_serve_tx_end_irq.lto_priv.143+0x1a>
    STM32_UART_DMA_ERROR_HOOK(uartp);
 8004a48:	481a      	ldr	r0, [pc, #104]	; (8004ab4 <uart_lld_serve_tx_end_irq.lto_priv.143+0x80>)
 8004a4a:	f7ff fe7f 	bl	800474c <osalSysHalt.lto_priv.149>
  dmaStreamDisable(uartp->dmatx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6952      	ldr	r2, [r2, #20]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	f022 021f 	bic.w	r2, r2, #31
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f7      	bne.n	8004a62 <uart_lld_serve_tx_end_irq.lto_priv.143+0x2e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6952      	ldr	r2, [r2, #20]
 8004a7c:	7a12      	ldrb	r2, [r2, #8]
 8004a7e:	4611      	mov	r1, r2
 8004a80:	223d      	movs	r2, #61	; 0x3d
 8004a82:	408a      	lsls	r2, r1
 8004a84:	601a      	str	r2, [r3, #0]
  _uart_tx1_isr_code(uartp);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	705a      	strb	r2, [r3, #1]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d004      	beq.n	8004aa0 <uart_lld_serve_tx_end_irq.lto_priv.143+0x6c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4798      	blx	r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	785b      	ldrb	r3, [r3, #1]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d102      	bne.n	8004aae <uart_lld_serve_tx_end_irq.lto_priv.143+0x7a>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	705a      	strb	r2, [r3, #1]
}
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	0800930c 	.word	0x0800930c

08004ab8 <serve_usart_irq.lto_priv.147>:
static void serve_usart_irq(UARTDriver *uartp) {
 8004ab8:	b590      	push	{r4, r7, lr}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  USART_TypeDef *u = uartp->usart;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	617b      	str	r3, [r7, #20]
  uint32_t cr1 = u->CR1;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	613b      	str	r3, [r7, #16]
  sr = u->SR;   /* SR reset step 1.*/
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	81fb      	strh	r3, [r7, #14]
  (void)u->DR;  /* SR reset step 2.*/
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	685b      	ldr	r3, [r3, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8004ad6:	89fa      	ldrh	r2, [r7, #14]
 8004ad8:	f240 130f 	movw	r3, #271	; 0x10f
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d013      	beq.n	8004b0a <serve_usart_irq.lto_priv.147+0x52>
    u->SR = ~USART_SR_LBD;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ae8:	601a      	str	r2, [r3, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <serve_usart_irq.lto_priv.147+0x52>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	691c      	ldr	r4, [r3, #16]
 8004afa:	89fb      	ldrh	r3, [r7, #14]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fe2f 	bl	8004760 <translate_errors>
 8004b02:	4603      	mov	r3, r0
 8004b04:	4619      	mov	r1, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	47a0      	blx	r4
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d017      	beq.n	8004b44 <serve_usart_irq.lto_priv.147+0x8c>
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d012      	beq.n	8004b44 <serve_usart_irq.lto_priv.147+0x8c>
    u->SR = ~USART_SR_TC;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b24:	601a      	str	r2, [r3, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	60da      	str	r2, [r3, #12]
    _uart_tx2_isr_code(uartp);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d004      	beq.n	8004b44 <serve_usart_irq.lto_priv.147+0x8c>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	4798      	blx	r3
}
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd90      	pop	{r4, r7, pc}
	...

08004b4c <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8004b52:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <Vector120+0x38>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004b5a:	607b      	str	r3, [r7, #4]
  DMA2->LIFCR = flags << 0U;
 8004b5c:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <Vector120+0x38>)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[8].dma_func)
 8004b62:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <Vector120+0x3c>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d006      	beq.n	8004b78 <Vector120+0x2c>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8004b6a:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <Vector120+0x3c>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	4a06      	ldr	r2, [pc, #24]	; (8004b88 <Vector120+0x3c>)
 8004b70:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4610      	mov	r0, r2
 8004b76:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004b78:	f7fc f9c6 	bl	8000f08 <_port_irq_epilogue>
}
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40026400 	.word	0x40026400
 8004b88:	20000844 	.word	0x20000844

08004b8c <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <Vector124+0x3c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004b9c:	607b      	str	r3, [r7, #4]
  DMA2->LIFCR = flags << 6U;
 8004b9e:	4a0a      	ldr	r2, [pc, #40]	; (8004bc8 <Vector124+0x3c>)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	019b      	lsls	r3, r3, #6
 8004ba4:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[9].dma_func)
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <Vector124+0x40>)
 8004ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d006      	beq.n	8004bbc <Vector124+0x30>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8004bae:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <Vector124+0x40>)
 8004bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb2:	4a06      	ldr	r2, [pc, #24]	; (8004bcc <Vector124+0x40>)
 8004bb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004bbc:	f7fc f9a4 	bl	8000f08 <_port_irq_epilogue>
}
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40026400 	.word	0x40026400
 8004bcc:	20000844 	.word	0x20000844

08004bd0 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <Vector128+0x3c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	0c1b      	lsrs	r3, r3, #16
 8004bdc:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004be0:	607b      	str	r3, [r7, #4]
  DMA2->LIFCR = flags << 16U;
 8004be2:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <Vector128+0x3c>)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[10].dma_func)
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <Vector128+0x40>)
 8004bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d006      	beq.n	8004c00 <Vector128+0x30>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <Vector128+0x40>)
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf6:	4a06      	ldr	r2, [pc, #24]	; (8004c10 <Vector128+0x40>)
 8004bf8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004c00:	f7fc f982 	bl	8000f08 <_port_irq_epilogue>
}
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40026400 	.word	0x40026400
 8004c10:	20000844 	.word	0x20000844

08004c14 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <Vector12C+0x3c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	0d9b      	lsrs	r3, r3, #22
 8004c20:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004c24:	607b      	str	r3, [r7, #4]
  DMA2->LIFCR = flags << 22U;
 8004c26:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <Vector12C+0x3c>)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	059b      	lsls	r3, r3, #22
 8004c2c:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[11].dma_func)
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <Vector12C+0x40>)
 8004c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d006      	beq.n	8004c44 <Vector12C+0x30>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8004c36:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <Vector12C+0x40>)
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3a:	4a06      	ldr	r2, [pc, #24]	; (8004c54 <Vector12C+0x40>)
 8004c3c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4610      	mov	r0, r2
 8004c42:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004c44:	f7fc f960 	bl	8000f08 <_port_irq_epilogue>
}
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40026400 	.word	0x40026400
 8004c54:	20000844 	.word	0x20000844

08004c58 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8004c5e:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <Vector130+0x38>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004c66:	607b      	str	r3, [r7, #4]
  DMA2->HIFCR = flags << 0U;
 8004c68:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <Vector130+0x38>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[12].dma_func)
 8004c6e:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <Vector130+0x3c>)
 8004c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d006      	beq.n	8004c84 <Vector130+0x2c>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8004c76:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <Vector130+0x3c>)
 8004c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7a:	4a06      	ldr	r2, [pc, #24]	; (8004c94 <Vector130+0x3c>)
 8004c7c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4610      	mov	r0, r2
 8004c82:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004c84:	f7fc f940 	bl	8000f08 <_port_irq_epilogue>
}
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40026400 	.word	0x40026400
 8004c94:	20000844 	.word	0x20000844

08004c98 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <Vector150+0x3c>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	099b      	lsrs	r3, r3, #6
 8004ca4:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004ca8:	607b      	str	r3, [r7, #4]
  DMA2->HIFCR = flags << 6U;
 8004caa:	4a0a      	ldr	r2, [pc, #40]	; (8004cd4 <Vector150+0x3c>)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	019b      	lsls	r3, r3, #6
 8004cb0:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[13].dma_func)
 8004cb2:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <Vector150+0x40>)
 8004cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d006      	beq.n	8004cc8 <Vector150+0x30>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8004cba:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <Vector150+0x40>)
 8004cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cbe:	4a06      	ldr	r2, [pc, #24]	; (8004cd8 <Vector150+0x40>)
 8004cc0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004cc8:	f7fc f91e 	bl	8000f08 <_port_irq_epilogue>
}
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40026400 	.word	0x40026400
 8004cd8:	20000844 	.word	0x20000844

08004cdc <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <Vector154+0x3c>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	0c1b      	lsrs	r3, r3, #16
 8004ce8:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004cec:	607b      	str	r3, [r7, #4]
  DMA2->HIFCR = flags << 16U;
 8004cee:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <Vector154+0x3c>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	041b      	lsls	r3, r3, #16
 8004cf4:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[14].dma_func)
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <Vector154+0x40>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <Vector154+0x30>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8004cfe:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <Vector154+0x40>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d02:	4a06      	ldr	r2, [pc, #24]	; (8004d1c <Vector154+0x40>)
 8004d04:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	4610      	mov	r0, r2
 8004d0a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004d0c:	f7fc f8fc 	bl	8000f08 <_port_irq_epilogue>
}
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40026400 	.word	0x40026400
 8004d1c:	20000844 	.word	0x20000844

08004d20 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8004d26:	4b0d      	ldr	r3, [pc, #52]	; (8004d5c <Vector158+0x3c>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	0d9b      	lsrs	r3, r3, #22
 8004d2c:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004d30:	607b      	str	r3, [r7, #4]
  DMA2->HIFCR = flags << 22U;
 8004d32:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <Vector158+0x3c>)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	059b      	lsls	r3, r3, #22
 8004d38:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[15].dma_func)
 8004d3a:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <Vector158+0x40>)
 8004d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d006      	beq.n	8004d50 <Vector158+0x30>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8004d42:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <Vector158+0x40>)
 8004d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d46:	4a06      	ldr	r2, [pc, #24]	; (8004d60 <Vector158+0x40>)
 8004d48:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004d50:	f7fc f8da 	bl	8000f08 <_port_irq_epilogue>
}
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40026400 	.word	0x40026400
 8004d60:	20000844 	.word	0x20000844

08004d64 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
  unsigned i;

  dma_streams_mask = 0U;
 8004d6a:	4b18      	ldr	r3, [pc, #96]	; (8004dcc <dmaInit+0x68>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8004d70:	2300      	movs	r3, #0
 8004d72:	607b      	str	r3, [r7, #4]
 8004d74:	e011      	b.n	8004d9a <dmaInit+0x36>
    _stm32_dma_streams[i].stream->CR = 0U;
 8004d76:	4916      	ldr	r1, [pc, #88]	; (8004dd0 <dmaInit+0x6c>)
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
    dma_isr_redir[i].dma_func = NULL;
 8004d8a:	4a12      	ldr	r2, [pc, #72]	; (8004dd4 <dmaInit+0x70>)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2100      	movs	r1, #0
 8004d90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3301      	adds	r3, #1
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b0f      	cmp	r3, #15
 8004d9e:	d9ea      	bls.n	8004d76 <dmaInit+0x12>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8004da0:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <dmaInit+0x74>)
 8004da2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004da6:	609a      	str	r2, [r3, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <dmaInit+0x74>)
 8004daa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dae:	60da      	str	r2, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8004db0:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <dmaInit+0x78>)
 8004db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004db6:	609a      	str	r2, [r3, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8004db8:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <dmaInit+0x78>)
 8004dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dbe:	60da      	str	r2, [r3, #12]
}
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000840 	.word	0x20000840
 8004dd0:	08008d48 	.word	0x08008d48
 8004dd4:	20000844 	.word	0x20000844
 8004dd8:	40026000 	.word	0x40026000
 8004ddc:	40026400 	.word	0x40026400

08004de0 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	7a5b      	ldrb	r3, [r3, #9]
 8004df2:	461a      	mov	r2, r3
 8004df4:	2301      	movs	r3, #1
 8004df6:	fa03 f202 	lsl.w	r2, r3, r2
 8004dfa:	4b38      	ldr	r3, [pc, #224]	; (8004edc <dmaStreamAllocate+0xfc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <dmaStreamAllocate+0x28>
    return true;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e064      	b.n	8004ed2 <dmaStreamAllocate+0xf2>

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	7a5b      	ldrb	r3, [r3, #9]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4a34      	ldr	r2, [pc, #208]	; (8004ee0 <dmaStreamAllocate+0x100>)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	7a5b      	ldrb	r3, [r3, #9]
 8004e1a:	4a31      	ldr	r2, [pc, #196]	; (8004ee0 <dmaStreamAllocate+0x100>)
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	4413      	add	r3, r2
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	605a      	str	r2, [r3, #4]
  dma_streams_mask |= (1U << dmastp->selfindex);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	7a5b      	ldrb	r3, [r3, #9]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	fa03 f202 	lsl.w	r2, r3, r2
 8004e30:	4b2a      	ldr	r3, [pc, #168]	; (8004edc <dmaStreamAllocate+0xfc>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	4a29      	ldr	r2, [pc, #164]	; (8004edc <dmaStreamAllocate+0xfc>)
 8004e38:	6013      	str	r3, [r2, #0]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8004e3a:	4b28      	ldr	r3, [pc, #160]	; (8004edc <dmaStreamAllocate+0xfc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00b      	beq.n	8004e5c <dmaStreamAllocate+0x7c>
    rccEnableDMA1(true);
 8004e44:	4a27      	ldr	r2, [pc, #156]	; (8004ee4 <dmaStreamAllocate+0x104>)
 8004e46:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <dmaStreamAllocate+0x104>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8004e50:	4a24      	ldr	r2, [pc, #144]	; (8004ee4 <dmaStreamAllocate+0x104>)
 8004e52:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <dmaStreamAllocate+0x104>)
 8004e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e5a:	6513      	str	r3, [r2, #80]	; 0x50
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8004e5c:	4b1f      	ldr	r3, [pc, #124]	; (8004edc <dmaStreamAllocate+0xfc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00b      	beq.n	8004e80 <dmaStreamAllocate+0xa0>
    rccEnableDMA2(true);
 8004e68:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <dmaStreamAllocate+0x104>)
 8004e6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <dmaStreamAllocate+0x104>)
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e72:	6313      	str	r3, [r2, #48]	; 0x30
 8004e74:	4a1b      	ldr	r2, [pc, #108]	; (8004ee4 <dmaStreamAllocate+0x104>)
 8004e76:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <dmaStreamAllocate+0x104>)
 8004e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e7e:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	f022 021f 	bic.w	r2, r2, #31
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f8      	bne.n	8004e90 <dmaStreamAllocate+0xb0>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	7a12      	ldrb	r2, [r2, #8]
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	223d      	movs	r2, #61	; 0x3d
 8004eaa:	408a      	lsls	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2221      	movs	r2, #33	; 0x21
 8004ebc:	615a      	str	r2, [r3, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <dmaStreamAllocate+0xf0>
    nvicEnableVector(dmastp->vector, priority);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	7a9b      	ldrb	r3, [r3, #10]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f001 fe60 	bl	8006b90 <nvicEnableVector>
  }

  return false;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000840 	.word	0x20000840
 8004ee0:	20000844 	.word	0x20000844
 8004ee4:	40023800 	.word	0x40023800

08004ee8 <_pal_lld_init>:
/**
 * @brief   PAL driver initialization.
 *
 * @notapi
 */
void _pal_lld_init(void) {
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
  }
#endif
}
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <port_lock>:
static inline void port_lock(void) {
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	2320      	movs	r3, #32
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f383 8811 	msr	BASEPRI, r3
}
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <port_unlock>:
static inline void port_unlock(void) {
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	2300      	movs	r3, #0
 8004f16:	607b      	str	r3, [r7, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f383 8811 	msr	BASEPRI, r3
}
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <port_lock_from_isr>:
static inline void port_lock_from_isr(void) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  port_lock();
 8004f2c:	f7ff ffe2 	bl	8004ef4 <port_lock>
}
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <port_unlock_from_isr>:
static inline void port_unlock_from_isr(void) {
 8004f32:	b580      	push	{r7, lr}
 8004f34:	af00      	add	r7, sp, #0
  port_unlock();
 8004f36:	f7ff ffea 	bl	8004f0e <port_unlock>
}
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <chSysLockFromISR>:
static inline void chSysLockFromISR(void) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 8004f40:	f7ff fff2 	bl	8004f28 <port_lock_from_isr>
}
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <chSysUnlockFromISR>:
static inline void chSysUnlockFromISR(void) {
 8004f46:	b580      	push	{r7, lr}
 8004f48:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 8004f4a:	f7ff fff2 	bl	8004f32 <port_unlock_from_isr>
}
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <osalSysLockFromISR>:
static inline void osalSysLockFromISR(void) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  chSysLockFromISR();
 8004f54:	f7ff fff2 	bl	8004f3c <chSysLockFromISR>
}
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <osalSysUnlockFromISR>:
static inline void osalSysUnlockFromISR(void) {
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	af00      	add	r7, sp, #0
  chSysUnlockFromISR();
 8004f5e:	f7ff fff2 	bl	8004f46 <chSysUnlockFromISR>
}
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <osalSysPolledDelayX>:
static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  chSysPolledDelayX(cycles);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7fe fa4f 	bl	8003410 <chSysPolledDelayX>
}
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <otg_core_reset>:
static void otg_core_reset(USBDriver *usbp) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f84:	60fb      	str	r3, [r7, #12]
  osalSysPolledDelayX(32);
 8004f86:	2020      	movs	r0, #32
 8004f88:	f7ff ffec 	bl	8004f64 <osalSysPolledDelayX>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f9      	bne.n	8004f92 <otg_core_reset+0x1a>
  osalSysPolledDelayX(18);
 8004f9e:	2012      	movs	r0, #18
 8004fa0:	f7ff ffe0 	bl	8004f64 <osalSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	dafb      	bge.n	8004fa4 <otg_core_reset+0x2c>
}
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <otg_disable_ep>:
static void otg_disable_ep(USBDriver *usbp) {
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	e032      	b.n	800502c <otg_disable_ep+0x7a>
    otgp->ie[i].DIEPCTL = 0;
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3348      	adds	r3, #72	; 0x48
 8004fcc:	015b      	lsls	r3, r3, #5
 8004fce:	4413      	add	r3, r2
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
    otgp->ie[i].DIEPTSIZ = 0;
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	015b      	lsls	r3, r3, #5
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	015b      	lsls	r3, r3, #5
 8004fea:	4413      	add	r3, r2
 8004fec:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8004ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ff4:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPCTL = 0;
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3358      	adds	r3, #88	; 0x58
 8004ffc:	015b      	lsls	r3, r3, #5
 8004ffe:	4413      	add	r3, r2
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPTSIZ = 0;
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	015b      	lsls	r3, r3, #5
 800500a:	4413      	add	r3, r2
 800500c:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	015b      	lsls	r3, r3, #5
 800501a:	4413      	add	r3, r2
 800501c:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8005020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005024:	601a      	str	r2, [r3, #0]
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3301      	adds	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	429a      	cmp	r2, r3
 8005036:	d2c6      	bcs.n	8004fc6 <otg_disable_ep+0x14>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800503e:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
}
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <otg_rxfifo_flush>:
static void otg_rxfifo_flush(USBDriver *usbp) {
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005058:	60fb      	str	r3, [r7, #12]
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2210      	movs	r2, #16
 800505e:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f9      	bne.n	8005060 <otg_rxfifo_flush+0x14>
  osalSysPolledDelayX(18);
 800506c:	2012      	movs	r0, #18
 800506e:	f7ff ff79 	bl	8004f64 <osalSysPolledDelayX>
}
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <otg_txfifo_flush>:
static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  stm32_otg_t *otgp = usbp->otg;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005086:	60fb      	str	r3, [r7, #12]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	019b      	lsls	r3, r3, #6
 800508c:	f043 0220 	orr.w	r2, r3, #32
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f9      	bne.n	8005094 <otg_txfifo_flush+0x1c>
  osalSysPolledDelayX(18);
 80050a0:	2012      	movs	r0, #18
 80050a2:	f7ff ff5f 	bl	8004f64 <osalSysPolledDelayX>
}
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <otg_ram_reset>:
static void otg_ram_reset(USBDriver *usbp) {
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <otg_ram_alloc>:
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  next = usbp->pmnext;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d6:	60fb      	str	r3, [r7, #12]
  usbp->pmnext += size;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	441a      	add	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	65da      	str	r2, [r3, #92]	; 0x5c
  return next;
 80050e4:	68fb      	ldr	r3, [r7, #12]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <otg_fifo_write_from_buffer>:
                                       size_t n) {
 80050f2:	b480      	push	{r7}
 80050f4:	b085      	sub	sp, #20
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
    *fifop = *((uint32_t *)buf);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	601a      	str	r2, [r3, #0]
    if (n <= 4) {
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d906      	bls.n	800511a <otg_fifo_write_from_buffer+0x28>
    n -= 4;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3b04      	subs	r3, #4
 8005110:	607b      	str	r3, [r7, #4]
    buf += 4;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	3304      	adds	r3, #4
 8005116:	60bb      	str	r3, [r7, #8]
 8005118:	e7f1      	b.n	80050fe <otg_fifo_write_from_buffer+0xc>
}
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <otg_fifo_read_to_buffer>:
                                    size_t max) {
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  uint32_t w = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
  size_t i = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	e017      	b.n	800516c <otg_fifo_read_to_buffer+0x48>
    if ((i & 3) == 0){
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d102      	bne.n	800514c <otg_fifo_read_to_buffer+0x28>
      w = *fifop;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	617b      	str	r3, [r7, #20]
    if (i < max) {
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d208      	bcs.n	8005166 <otg_fifo_read_to_buffer+0x42>
      *buf++ = (uint8_t)w;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	60ba      	str	r2, [r7, #8]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]
      w >>= 8;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	0a1b      	lsrs	r3, r3, #8
 8005164:	617b      	str	r3, [r7, #20]
    i++;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	3301      	adds	r3, #1
 800516a:	613b      	str	r3, [r7, #16]
  while (i < n) {
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	429a      	cmp	r2, r3
 8005172:	d3e3      	bcc.n	800513c <otg_fifo_read_to_buffer+0x18>
}
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <otg_rxfifo_handler>:
static void otg_rxfifo_handler(USBDriver *usbp) {
 800517e:	b590      	push	{r4, r7, lr}
 8005180:	b087      	sub	sp, #28
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  sts = usbp->otg->GRXSTSP;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	617b      	str	r3, [r7, #20]
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005196:	613b      	str	r3, [r7, #16]
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	60fb      	str	r3, [r7, #12]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f403 13f0 	and.w	r3, r3, #1966080	; 0x1e0000
 80051a6:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80051aa:	d064      	beq.n	8005276 <otg_rxfifo_handler+0xf8>
 80051ac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80051b0:	d806      	bhi.n	80051c0 <otg_rxfifo_handler+0x42>
 80051b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051b6:	d05e      	beq.n	8005276 <otg_rxfifo_handler+0xf8>
 80051b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051bc:	d016      	beq.n	80051ec <otg_rxfifo_handler+0x6e>
 80051be:	e05a      	b.n	8005276 <otg_rxfifo_handler+0xf8>
 80051c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051c4:	d057      	beq.n	8005276 <otg_rxfifo_handler+0xf8>
 80051c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051ca:	d154      	bne.n	8005276 <otg_rxfifo_handler+0xf8>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3302      	adds	r3, #2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	6a19      	ldr	r1, [r3, #32]
 80051e2:	2308      	movs	r3, #8
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	f7ff ff9d 	bl	8005124 <otg_fifo_read_to_buffer>
 80051ea:	e044      	b.n	8005276 <otg_rxfifo_handler+0xf8>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f0:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
                            usbp->epc[ep]->out_state->rxbuf,
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3302      	adds	r3, #2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8005202:	689c      	ldr	r4, [r3, #8]
                            usbp->epc[ep]->out_state->rxsize -
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3302      	adds	r3, #2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	681a      	ldr	r2, [r3, #0]
                            usbp->epc[ep]->out_state->rxcnt);
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3302      	adds	r3, #2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	685b      	ldr	r3, [r3, #4]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4621      	mov	r1, r4
 800522a:	f7ff ff7b 	bl	8005124 <otg_fifo_read_to_buffer>
    usbp->epc[ep]->out_state->rxbuf += cnt;
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3302      	adds	r3, #2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	699a      	ldr	r2, [r3, #24]
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3302      	adds	r3, #2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	6899      	ldr	r1, [r3, #8]
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	440b      	add	r3, r1
 8005250:	6093      	str	r3, [r2, #8]
    usbp->epc[ep]->out_state->rxcnt += cnt;
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3302      	adds	r3, #2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	699a      	ldr	r2, [r3, #24]
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3302      	adds	r3, #2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	6859      	ldr	r1, [r3, #4]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	440b      	add	r3, r1
 8005274:	6053      	str	r3, [r2, #4]
}
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	bd90      	pop	{r4, r7, pc}

0800527c <otg_txfifo_handler>:
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	70fb      	strb	r3, [r7, #3]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	3302      	adds	r3, #2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	3302      	adds	r3, #2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d30f      	bcc.n	80052cc <otg_txfifo_handler+0x50>
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80052b4:	f8d2 1834 	ldr.w	r1, [r2, #2100]	; 0x834
 80052b8:	78fa      	ldrb	r2, [r7, #3]
 80052ba:	2001      	movs	r0, #1
 80052bc:	fa00 f202 	lsl.w	r2, r0, r2
 80052c0:	43d2      	mvns	r2, r2
 80052c2:	400a      	ands	r2, r1
 80052c4:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
      return true;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e06a      	b.n	80053a2 <otg_txfifo_handler+0x126>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	3302      	adds	r3, #2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	3302      	adds	r3, #2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	440b      	add	r3, r1
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	60fb      	str	r3, [r7, #12]
    if (n > usbp->epc[ep]->in_maxsize)
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	3302      	adds	r3, #2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	8a1b      	ldrh	r3, [r3, #16]
 80052fe:	461a      	mov	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	429a      	cmp	r2, r3
 8005304:	d207      	bcs.n	8005316 <otg_txfifo_handler+0x9a>
      n = usbp->epc[ep]->in_maxsize;
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	3302      	adds	r3, #2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	8a1b      	ldrh	r3, [r3, #16]
 8005314:	60fb      	str	r3, [r7, #12]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	015b      	lsls	r3, r3, #5
 800531e:	4413      	add	r3, r2
 8005320:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	009a      	lsls	r2, r3, #2
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	429a      	cmp	r2, r3
 800532e:	d201      	bcs.n	8005334 <otg_txfifo_handler+0xb8>
      return false;
 8005330:	2300      	movs	r3, #0
 8005332:	e036      	b.n	80053a2 <otg_txfifo_handler+0x126>
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	3301      	adds	r3, #1
 800533c:	031b      	lsls	r3, r3, #12
 800533e:	18d0      	adds	r0, r2, r3
                               usbp->epc[ep]->in_state->txbuf,
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	3302      	adds	r3, #2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4619      	mov	r1, r3
 8005354:	f7ff fecd 	bl	80050f2 <otg_fifo_write_from_buffer>
    usbp->epc[ep]->in_state->txbuf += n;
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	3302      	adds	r3, #2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	78fb      	ldrb	r3, [r7, #3]
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	3302      	adds	r3, #2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	6899      	ldr	r1, [r3, #8]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	440b      	add	r3, r1
 800537a:	6093      	str	r3, [r2, #8]
    usbp->epc[ep]->in_state->txcnt += n;
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	3302      	adds	r3, #2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	695a      	ldr	r2, [r3, #20]
 800538a:	78fb      	ldrb	r3, [r7, #3]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	3302      	adds	r3, #2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	6859      	ldr	r1, [r3, #4]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	440b      	add	r3, r1
 800539e:	6053      	str	r3, [r2, #4]
 80053a0:	e772      	b.n	8005288 <otg_txfifo_handler+0xc>
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <otg_epin_handler>:
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b086      	sub	sp, #24
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	460b      	mov	r3, r1
 80053b4:	70fb      	strb	r3, [r7, #3]
  stm32_otg_t *otgp = usbp->otg;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ba:	617b      	str	r3, [r7, #20]
  uint32_t epint = otgp->ie[ep].DIEPINT;
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	015b      	lsls	r3, r3, #5
 80053c2:	4413      	add	r3, r2
 80053c4:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	613b      	str	r3, [r7, #16]
  otgp->ie[ep].DIEPINT = epint;
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	015b      	lsls	r3, r3, #5
 80053d2:	4413      	add	r3, r2
 80053d4:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	601a      	str	r2, [r3, #0]
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d04b      	beq.n	800547e <otg_epin_handler+0xd4>
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d044      	beq.n	800547e <otg_epin_handler+0xd4>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	3302      	adds	r3, #2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	60fb      	str	r3, [r7, #12]
    if (isp->txsize < isp->totsize) {
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	429a      	cmp	r2, r3
 800540e:	d213      	bcs.n	8005438 <otg_epin_handler+0x8e>
      isp->txsize = isp->totsize - isp->txsize;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	1ad2      	subs	r2, r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	601a      	str	r2, [r3, #0]
      isp->txcnt  = 0;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	605a      	str	r2, [r3, #4]
      osalSysLockFromISR();
 8005424:	f7ff fd94 	bl	8004f50 <osalSysLockFromISR>
      usb_lld_start_in(usbp, ep);
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7fe fc2e 	bl	8003c8e <usb_lld_start_in>
      osalSysUnlockFromISR();
 8005432:	f7ff fd92 	bl	8004f5a <osalSysUnlockFromISR>
 8005436:	e022      	b.n	800547e <otg_epin_handler+0xd4>
      _usb_isr_invoke_in_cb(usbp, ep);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	891b      	ldrh	r3, [r3, #8]
 800543c:	b21a      	sxth	r2, r3
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	2101      	movs	r1, #1
 8005442:	fa01 f303 	lsl.w	r3, r1, r3
 8005446:	b21b      	sxth	r3, r3
 8005448:	43db      	mvns	r3, r3
 800544a:	b21b      	sxth	r3, r3
 800544c:	4013      	ands	r3, r2
 800544e:	b21b      	sxth	r3, r3
 8005450:	b29a      	uxth	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	811a      	strh	r2, [r3, #8]
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	3302      	adds	r3, #2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <otg_epin_handler+0xd4>
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	3302      	adds	r3, #2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	78fa      	ldrb	r2, [r7, #3]
 8005478:	4611      	mov	r1, r2
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	4798      	blx	r3
  if ((epint & DIEPINT_TXFE) &&
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00e      	beq.n	80054a6 <otg_epin_handler+0xfc>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f303 	lsl.w	r3, r1, r3
 8005496:	4013      	ands	r3, r2
  if ((epint & DIEPINT_TXFE) &&
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <otg_epin_handler+0xfc>
    otg_txfifo_handler(usbp, ep);
 800549c:	78fb      	ldrb	r3, [r7, #3]
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff feeb 	bl	800527c <otg_txfifo_handler>
}
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <otg_epout_handler>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	70fb      	strb	r3, [r7, #3]
  stm32_otg_t *otgp = usbp->otg;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054bc:	617b      	str	r3, [r7, #20]
  uint32_t epint = otgp->oe[ep].DOEPINT;
 80054be:	78fb      	ldrb	r3, [r7, #3]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	015b      	lsls	r3, r3, #5
 80054c4:	4413      	add	r3, r2
 80054c6:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	613b      	str	r3, [r7, #16]
  otgp->oe[ep].DOEPINT = epint;
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	015b      	lsls	r3, r3, #5
 80054d4:	4413      	add	r3, r2
 80054d6:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	601a      	str	r2, [r3, #0]
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d011      	beq.n	800550c <otg_epout_handler+0x60>
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <otg_epout_handler+0x60>
    _usb_isr_invoke_setup_cb(usbp, ep);
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	3302      	adds	r3, #2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	4611      	mov	r1, r2
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d05e      	beq.n	80055d4 <otg_epout_handler+0x128>
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d057      	beq.n	80055d4 <otg_epout_handler+0x128>
    osp = usbp->epc[ep]->out_state;
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	3302      	adds	r3, #2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	60fb      	str	r3, [r7, #12]
    if (ep == 0) {
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d129      	bne.n	800558e <otg_epout_handler+0xe2>
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	78fb      	ldrb	r3, [r7, #3]
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	3302      	adds	r3, #2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	8a5b      	ldrh	r3, [r3, #18]
 800554c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005550:	fb03 f301 	mul.w	r3, r3, r1
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d119      	bne.n	800558e <otg_epout_handler+0xe2>
          (osp->rxsize < osp->totsize)) {
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68db      	ldr	r3, [r3, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8005562:	429a      	cmp	r2, r3
 8005564:	d213      	bcs.n	800558e <otg_epout_handler+0xe2>
        osp->rxsize = osp->totsize - osp->rxsize;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	601a      	str	r2, [r3, #0]
        osp->rxcnt  = 0;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	605a      	str	r2, [r3, #4]
        osalSysLockFromISR();
 800557a:	f7ff fce9 	bl	8004f50 <osalSysLockFromISR>
        usb_lld_start_out(usbp, ep);
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fc79 	bl	8005e7a <usb_lld_start_out>
        osalSysUnlockFromISR();
 8005588:	f7ff fce7 	bl	8004f5a <osalSysUnlockFromISR>
 800558c:	e022      	b.n	80055d4 <otg_epout_handler+0x128>
    _usb_isr_invoke_out_cb(usbp, ep);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	895b      	ldrh	r3, [r3, #10]
 8005592:	b21a      	sxth	r2, r3
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	2101      	movs	r1, #1
 8005598:	fa01 f303 	lsl.w	r3, r1, r3
 800559c:	b21b      	sxth	r3, r3
 800559e:	43db      	mvns	r3, r3
 80055a0:	b21b      	sxth	r3, r3
 80055a2:	4013      	ands	r3, r2
 80055a4:	b21b      	sxth	r3, r3
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	815a      	strh	r2, [r3, #10]
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	3302      	adds	r3, #2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <otg_epout_handler+0x128>
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	3302      	adds	r3, #2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	78fa      	ldrb	r2, [r7, #3]
 80055ce:	4611      	mov	r1, r2
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	4798      	blx	r3
}
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <otg_isoc_in_failed_handler>:
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e6:	60bb      	str	r3, [r7, #8]
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80055e8:	2300      	movs	r3, #0
 80055ea:	73fb      	strb	r3, [r7, #15]
 80055ec:	e058      	b.n	80056a0 <otg_isoc_in_failed_handler+0xc6>
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	3348      	adds	r3, #72	; 0x48
 80055f4:	015b      	lsls	r3, r3, #5
 80055f6:	4413      	add	r3, r2
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80055fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005602:	d14a      	bne.n	800569a <otg_isoc_in_failed_handler+0xc0>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	3348      	adds	r3, #72	; 0x48
 800560a:	015b      	lsls	r3, r3, #5
 800560c:	4413      	add	r3, r2
 800560e:	681b      	ldr	r3, [r3, #0]
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8005610:	2b00      	cmp	r3, #0
 8005612:	da42      	bge.n	800569a <otg_isoc_in_failed_handler+0xc0>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	7bfa      	ldrb	r2, [r7, #15]
 8005618:	68b9      	ldr	r1, [r7, #8]
 800561a:	3248      	adds	r2, #72	; 0x48
 800561c:	0152      	lsls	r2, r2, #5
 800561e:	440a      	add	r2, r1
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	3348      	adds	r3, #72	; 0x48
 800562a:	015b      	lsls	r3, r3, #5
 800562c:	440b      	add	r3, r1
 800562e:	601a      	str	r2, [r3, #0]
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	3348      	adds	r3, #72	; 0x48
 8005636:	015b      	lsls	r3, r3, #5
 8005638:	4413      	add	r3, r2
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	dbf7      	blt.n	8005630 <otg_isoc_in_failed_handler+0x56>
      otg_txfifo_flush(usbp, ep);
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff fd17 	bl	8005078 <otg_txfifo_flush>
      _usb_isr_invoke_in_cb(usbp, ep);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	891b      	ldrh	r3, [r3, #8]
 800564e:	b21a      	sxth	r2, r3
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	2101      	movs	r1, #1
 8005654:	fa01 f303 	lsl.w	r3, r1, r3
 8005658:	b21b      	sxth	r3, r3
 800565a:	43db      	mvns	r3, r3
 800565c:	b21b      	sxth	r3, r3
 800565e:	4013      	ands	r3, r2
 8005660:	b21b      	sxth	r3, r3
 8005662:	b29a      	uxth	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	811a      	strh	r2, [r3, #8]
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	3302      	adds	r3, #2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <otg_isoc_in_failed_handler+0xb6>
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	3302      	adds	r3, #2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	7bfa      	ldrb	r2, [r7, #15]
 800568a:	4611      	mov	r1, r2
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	4798      	blx	r3
    otg_txfifo_handler(usbp, ep);
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff fdf1 	bl	800527c <otg_txfifo_handler>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	3301      	adds	r3, #1
 800569e:	73fb      	strb	r3, [r7, #15]
 80056a0:	7bfa      	ldrb	r2, [r7, #15]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d9a0      	bls.n	80055ee <otg_isoc_in_failed_handler+0x14>
}
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <otg_isoc_out_failed_handler>:
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	60bb      	str	r3, [r7, #8]
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80056c0:	2300      	movs	r3, #0
 80056c2:	73fb      	strb	r3, [r7, #15]
 80056c4:	e038      	b.n	8005738 <otg_isoc_out_failed_handler+0x86>
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	3358      	adds	r3, #88	; 0x58
 80056cc:	015b      	lsls	r3, r3, #5
 80056ce:	4413      	add	r3, r2
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80056d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056da:	d12a      	bne.n	8005732 <otg_isoc_out_failed_handler+0x80>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	3358      	adds	r3, #88	; 0x58
 80056e2:	015b      	lsls	r3, r3, #5
 80056e4:	4413      	add	r3, r2
 80056e6:	681b      	ldr	r3, [r3, #0]
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	da22      	bge.n	8005732 <otg_isoc_out_failed_handler+0x80>
      _usb_isr_invoke_out_cb(usbp, ep);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	895b      	ldrh	r3, [r3, #10]
 80056f0:	b21a      	sxth	r2, r3
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	2101      	movs	r1, #1
 80056f6:	fa01 f303 	lsl.w	r3, r1, r3
 80056fa:	b21b      	sxth	r3, r3
 80056fc:	43db      	mvns	r3, r3
 80056fe:	b21b      	sxth	r3, r3
 8005700:	4013      	ands	r3, r2
 8005702:	b21b      	sxth	r3, r3
 8005704:	b29a      	uxth	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	815a      	strh	r2, [r3, #10]
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	3302      	adds	r3, #2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <otg_isoc_out_failed_handler+0x80>
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	3302      	adds	r3, #2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	7bfa      	ldrb	r2, [r7, #15]
 800572c:	4611      	mov	r1, r2
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	4798      	blx	r3
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	3301      	adds	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
 8005738:	7bfa      	ldrb	r2, [r7, #15]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	429a      	cmp	r2, r3
 8005742:	d9c0      	bls.n	80056c6 <otg_isoc_out_failed_handler+0x14>
}
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <usb_lld_serve_interrupt>:
static void usb_lld_serve_interrupt(USBDriver *usbp) {
 800574a:	b580      	push	{r7, lr}
 800574c:	b086      	sub	sp, #24
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	617b      	str	r3, [r7, #20]
  sts  = otgp->GINTSTS;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	613b      	str	r3, [r7, #16]
  sts &= otgp->GINTMSK;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4013      	ands	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
  otgp->GINTSTS = sts;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	615a      	str	r2, [r3, #20]
  if (sts & GINTSTS_USBRST) {
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <usb_lld_serve_interrupt+0x36>
    _usb_reset(usbp);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 ffdc 	bl	8006736 <_usb_reset>
 800577e:	e0be      	b.n	80058fe <usb_lld_serve_interrupt+0x1b4>
  if (sts & GINTSTS_WKUPINT) {
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	da19      	bge.n	80057ba <usb_lld_serve_interrupt+0x70>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800578c:	f003 0303 	and.w	r3, r3, #3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d007      	beq.n	80057a4 <usb_lld_serve_interrupt+0x5a>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800579a:	f023 0203 	bic.w	r2, r3, #3
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
    otgp->DCTL &= ~DCTL_RWUSIG;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80057aa:	f023 0201 	bic.w	r2, r3, #1
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
    _usb_wakeup(usbp);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f001 f816 	bl	80067e6 <_usb_wakeup>
  if (sts & GINTSTS_USBSUSP) {
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <usb_lld_serve_interrupt+0x80>
    _usb_suspend(usbp);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fff4 	bl	80067b2 <_usb_suspend>
  if (sts & GINTSTS_ENUMDNE) {
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d017      	beq.n	8005804 <usb_lld_serve_interrupt+0xba>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80057da:	f003 0306 	and.w	r3, r3, #6
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d108      	bne.n	80057f4 <usb_lld_serve_interrupt+0xaa>
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80057ea:	f443 5210 	orr.w	r2, r3, #9216	; 0x2400
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	60da      	str	r2, [r3, #12]
 80057f2:	e007      	b.n	8005804 <usb_lld_serve_interrupt+0xba>
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80057fc:	f443 52a0 	orr.w	r2, r3, #5120	; 0x1400
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	60da      	str	r2, [r3, #12]
  if (sts & GINTSTS_SOF) {
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <usb_lld_serve_interrupt+0xd8>
    _usb_isr_invoke_sof_cb(usbp);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d004      	beq.n	8005822 <usb_lld_serve_interrupt+0xd8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <usb_lld_serve_interrupt+0xe8>
    otg_isoc_in_failed_handler(usbp);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff fed4 	bl	80055da <otg_isoc_in_failed_handler>
  if (sts & GINTSTS_IISOOXFR) {
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <usb_lld_serve_interrupt+0xf8>
    otg_isoc_out_failed_handler(usbp);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff ff38 	bl	80056b2 <otg_isoc_out_failed_handler>
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f003 0310 	and.w	r3, r3, #16
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <usb_lld_serve_interrupt+0x108>
    otg_rxfifo_handler(usbp);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff fc96 	bl	800517e <otg_rxfifo_handler>
  src = otgp->DAINT;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8005858:	60fb      	str	r3, [r7, #12]
  if (sts & GINTSTS_OEPINT) {
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d023      	beq.n	80058ac <usb_lld_serve_interrupt+0x162>
    if (src & (1 << 16))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <usb_lld_serve_interrupt+0x12c>
      otg_epout_handler(usbp, 0);
 800586e:	2100      	movs	r1, #0
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7ff fe1b 	bl	80054ac <otg_epout_handler>
    if (src & (1 << 17))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <usb_lld_serve_interrupt+0x13e>
      otg_epout_handler(usbp, 1);
 8005880:	2101      	movs	r1, #1
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff fe12 	bl	80054ac <otg_epout_handler>
    if (src & (1 << 18))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <usb_lld_serve_interrupt+0x150>
      otg_epout_handler(usbp, 2);
 8005892:	2102      	movs	r1, #2
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff fe09 	bl	80054ac <otg_epout_handler>
    if (src & (1 << 19))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <usb_lld_serve_interrupt+0x162>
      otg_epout_handler(usbp, 3);
 80058a4:	2103      	movs	r1, #3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff fe00 	bl	80054ac <otg_epout_handler>
  if (sts & GINTSTS_IEPINT) {
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d023      	beq.n	80058fe <usb_lld_serve_interrupt+0x1b4>
    if (src & (1 << 0))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <usb_lld_serve_interrupt+0x17e>
      otg_epin_handler(usbp, 0);
 80058c0:	2100      	movs	r1, #0
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff fd71 	bl	80053aa <otg_epin_handler>
    if (src & (1 << 1))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <usb_lld_serve_interrupt+0x190>
      otg_epin_handler(usbp, 1);
 80058d2:	2101      	movs	r1, #1
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff fd68 	bl	80053aa <otg_epin_handler>
    if (src & (1 << 2))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <usb_lld_serve_interrupt+0x1a2>
      otg_epin_handler(usbp, 2);
 80058e4:	2102      	movs	r1, #2
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff fd5f 	bl	80053aa <otg_epin_handler>
    if (src & (1 << 3))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <usb_lld_serve_interrupt+0x1b4>
      otg_epin_handler(usbp, 3);
 80058f6:	2103      	movs	r1, #3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff fd56 	bl	80053aa <otg_epin_handler>
}
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  usb_lld_serve_interrupt(&USBD1);
 8005908:	4802      	ldr	r0, [pc, #8]	; (8005914 <Vector14C+0x10>)
 800590a:	f7ff ff1e 	bl	800574a <usb_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 800590e:	f7fb fafb 	bl	8000f08 <_port_irq_epilogue>
}
 8005912:	bd80      	pop	{r7, pc}
 8005914:	200008c4 	.word	0x200008c4

08005918 <usb_lld_init>:
void usb_lld_init(void) {
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  usbObjectInit(&USBD1);
 800591c:	4805      	ldr	r0, [pc, #20]	; (8005934 <usb_lld_init+0x1c>)
 800591e:	f000 fe0e 	bl	800653e <usbObjectInit>
  USBD1.otg       = OTG_FS;
 8005922:	4b04      	ldr	r3, [pc, #16]	; (8005934 <usb_lld_init+0x1c>)
 8005924:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005928:	655a      	str	r2, [r3, #84]	; 0x54
  USBD1.otgparams = &fsparams;
 800592a:	4b02      	ldr	r3, [pc, #8]	; (8005934 <usb_lld_init+0x1c>)
 800592c:	4a02      	ldr	r2, [pc, #8]	; (8005938 <usb_lld_init+0x20>)
 800592e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	200008c4 	.word	0x200008c4
 8005938:	08008e2c 	.word	0x08008e2c

0800593c <usb_lld_start>:
void usb_lld_start(USBDriver *usbp) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	60fb      	str	r3, [r7, #12]
  if (usbp->state == USB_STOP) {
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d159      	bne.n	8005a06 <usb_lld_start+0xca>
    if (&USBD1 == usbp) {
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2d      	ldr	r2, [pc, #180]	; (8005a0c <usb_lld_start+0xd0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d11f      	bne.n	800599a <usb_lld_start+0x5e>
      rccEnableOTG_FS(true);
 800595a:	4a2d      	ldr	r2, [pc, #180]	; (8005a10 <usb_lld_start+0xd4>)
 800595c:	4b2c      	ldr	r3, [pc, #176]	; (8005a10 <usb_lld_start+0xd4>)
 800595e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005964:	6353      	str	r3, [r2, #52]	; 0x34
 8005966:	4a2a      	ldr	r2, [pc, #168]	; (8005a10 <usb_lld_start+0xd4>)
 8005968:	4b29      	ldr	r3, [pc, #164]	; (8005a10 <usb_lld_start+0xd4>)
 800596a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005970:	6553      	str	r3, [r2, #84]	; 0x54
      rccResetOTG_FS();
 8005972:	4a27      	ldr	r2, [pc, #156]	; (8005a10 <usb_lld_start+0xd4>)
 8005974:	4b26      	ldr	r3, [pc, #152]	; (8005a10 <usb_lld_start+0xd4>)
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597c:	6153      	str	r3, [r2, #20]
 800597e:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <usb_lld_start+0xd4>)
 8005980:	2200      	movs	r2, #0
 8005982:	615a      	str	r2, [r3, #20]
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8005984:	210e      	movs	r1, #14
 8005986:	2043      	movs	r0, #67	; 0x43
 8005988:	f001 f902 	bl	8006b90 <nvicEnableVector>
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4a21      	ldr	r2, [pc, #132]	; (8005a14 <usb_lld_start+0xd8>)
 8005990:	60da      	str	r2, [r3, #12]
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4a20      	ldr	r2, [pc, #128]	; (8005a18 <usb_lld_start+0xdc>)
 8005996:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    otgp->PCGCCTL = 0;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	22c0      	movs	r2, #192	; 0xc0
 80059a6:	601a      	str	r2, [r3, #0]
    otgp->GCCFG = GCCFG_INIT_VALUE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80059ae:	639a      	str	r2, [r3, #56]	; 0x38
    otg_core_reset(usbp);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff fae1 	bl	8004f78 <otg_core_reset>
    otgp->GAHBCFG = 0;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	609a      	str	r2, [r3, #8]
    otg_disable_ep(usbp);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff faf8 	bl	8004fb2 <otg_disable_ep>
    otgp->DIEPMSK  = 0;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <usb_lld_start+0xb0>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a0d      	ldr	r2, [pc, #52]	; (8005a1c <usb_lld_start+0xe0>)
 80059e8:	619a      	str	r2, [r3, #24]
 80059ea:	e002      	b.n	80059f2 <usb_lld_start+0xb6>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4a0c      	ldr	r2, [pc, #48]	; (8005a20 <usb_lld_start+0xe4>)
 80059f0:	619a      	str	r2, [r3, #24]
    otgp->GINTSTS  = 0xFFFFFFFF;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059f8:	615a      	str	r2, [r3, #20]
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f043 0201 	orr.w	r2, r3, #1
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	609a      	str	r2, [r3, #8]
}
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	200008c4 	.word	0x200008c4
 8005a10:	40023800 	.word	0x40023800
 8005a14:	40001440 	.word	0x40001440
 8005a18:	02200003 	.word	0x02200003
 8005a1c:	c0303c00 	.word	0xc0303c00
 8005a20:	c0303c08 	.word	0xc0303c08

08005a24 <usb_lld_reset>:
void usb_lld_reset(USBDriver *usbp) {
 8005a24:	b590      	push	{r4, r7, lr}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a30:	60bb      	str	r3, [r7, #8]
  otg_txfifo_flush(usbp, 0);
 8005a32:	2100      	movs	r1, #0
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff fb1f 	bl	8005078 <otg_txfifo_flush>
  otgp->DIEPEMPMSK = 0;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005a48:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	e024      	b.n	8005a9c <usb_lld_reset+0x78>
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3348      	adds	r3, #72	; 0x48
 8005a58:	015b      	lsls	r3, r3, #5
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a60:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	3358      	adds	r3, #88	; 0x58
 8005a68:	015b      	lsls	r3, r3, #5
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a70:	601a      	str	r2, [r3, #0]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	015b      	lsls	r3, r3, #5
 8005a78:	4413      	add	r3, r2
 8005a7a:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a82:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	015b      	lsls	r3, r3, #5
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8005a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a94:	601a      	str	r2, [r3, #0]
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d2d4      	bcs.n	8005a52 <usb_lld_reset+0x2e>
  otg_ram_reset(usbp);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff faff 	bl	80050ac <otg_ram_reset>
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	625a      	str	r2, [r3, #36]	; 0x24
  otg_rxfifo_flush(usbp);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff fac7 	bl	800504c <otg_rxfifo_flush>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8005ac4:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005ad6:	f043 0310 	orr.w	r3, r3, #16
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	6193      	str	r3, [r2, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2209      	movs	r2, #9
 8005ae2:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2209      	movs	r2, #9
 8005aea:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  usbp->epc[0] = &ep0config;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a17      	ldr	r2, [pc, #92]	; (8005b50 <usb_lld_reset+0x12c>)
 8005af2:	60da      	str	r2, [r3, #12]
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8005afa:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
 8005afe:	2340      	movs	r3, #64	; 0x40
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8005b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
 8005b16:	2340      	movs	r3, #64	; 0x40
 8005b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8005b26:	2340      	movs	r3, #64	; 0x40
 8005b28:	089b      	lsrs	r3, r3, #2
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	041b      	lsls	r3, r3, #16
 8005b2e:	461c      	mov	r4, r3
                   DIEPTXF_INEPTXSA(otg_ram_alloc(usbp,
 8005b30:	2340      	movs	r3, #64	; 0x40
 8005b32:	089b      	lsrs	r3, r3, #2
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff fac5 	bl	80050c8 <otg_ram_alloc>
 8005b3e:	4603      	mov	r3, r0
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8005b40:	ea44 0203 	orr.w	r2, r4, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd90      	pop	{r4, r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	08008e08 	.word	0x08008e08

08005b54 <usb_lld_set_address>:
void usb_lld_set_address(USBDriver *usbp) {
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b60:	60fb      	str	r3, [r7, #12]
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8005b68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
 8005b72:	0112      	lsls	r2, r2, #4
 8005b74:	431a      	orrs	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <usb_lld_init_endpoint>:
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8005b88:	b5b0      	push	{r4, r5, r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	70fb      	strb	r3, [r7, #3]
  stm32_otg_t *otgp = usbp->otg;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b98:	60fb      	str	r3, [r7, #12]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	3302      	adds	r3, #2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0303 	and.w	r3, r3, #3
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	f200 80ed 	bhi.w	8005d8c <usb_lld_init_endpoint+0x204>
 8005bb2:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <usb_lld_init_endpoint+0x30>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bc9 	.word	0x08005bc9
 8005bbc:	08005bcf 	.word	0x08005bcf
 8005bc0:	08005bd5 	.word	0x08005bd5
 8005bc4:	08005bdb 	.word	0x08005bdb
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 8005bc8:	4b72      	ldr	r3, [pc, #456]	; (8005d94 <usb_lld_init_endpoint+0x20c>)
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	e007      	b.n	8005bde <usb_lld_init_endpoint+0x56>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_ISO;
 8005bce:	4b72      	ldr	r3, [pc, #456]	; (8005d98 <usb_lld_init_endpoint+0x210>)
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	e004      	b.n	8005bde <usb_lld_init_endpoint+0x56>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 8005bd4:	4b71      	ldr	r3, [pc, #452]	; (8005d9c <usb_lld_init_endpoint+0x214>)
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	e001      	b.n	8005bde <usb_lld_init_endpoint+0x56>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 8005bda:	4b71      	ldr	r3, [pc, #452]	; (8005da0 <usb_lld_init_endpoint+0x218>)
 8005bdc:	617b      	str	r3, [r7, #20]
  otgp->oe[ep].DOEPTSIZ = 0;
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	015b      	lsls	r3, r3, #5
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
  if (usbp->epc[ep]->out_state != NULL) {
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	3302      	adds	r3, #2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01d      	beq.n	8005c3c <usb_lld_init_endpoint+0xb4>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 8005c00:	78f8      	ldrb	r0, [r7, #3]
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	3302      	adds	r3, #2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	8a5b      	ldrh	r3, [r3, #18]
 8005c10:	461a      	mov	r2, r3
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	431a      	orrs	r2, r3
 8005c16:	68f9      	ldr	r1, [r7, #12]
 8005c18:	f100 0358 	add.w	r3, r0, #88	; 0x58
 8005c1c:	015b      	lsls	r3, r3, #5
 8005c1e:	440b      	add	r3, r1
 8005c20:	601a      	str	r2, [r3, #0]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	3310      	adds	r3, #16
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c32:	431a      	orrs	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8005c3a:	e01a      	b.n	8005c72 <usb_lld_init_endpoint+0xea>
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	78fa      	ldrb	r2, [r7, #3]
 8005c40:	68f9      	ldr	r1, [r7, #12]
 8005c42:	3258      	adds	r2, #88	; 0x58
 8005c44:	0152      	lsls	r2, r2, #5
 8005c46:	440a      	add	r2, r1
 8005c48:	6812      	ldr	r2, [r2, #0]
 8005c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c4e:	68f9      	ldr	r1, [r7, #12]
 8005c50:	3358      	adds	r3, #88	; 0x58
 8005c52:	015b      	lsls	r3, r3, #5
 8005c54:	440b      	add	r3, r1
 8005c56:	601a      	str	r2, [r3, #0]
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	3310      	adds	r3, #16
 8005c62:	2101      	movs	r1, #1
 8005c64:	fa01 f303 	lsl.w	r3, r1, r3
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	401a      	ands	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	015b      	lsls	r3, r3, #5
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
  if (usbp->epc[ep]->in_state != NULL) {
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	3302      	adds	r3, #2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d054      	beq.n	8005d3e <usb_lld_init_endpoint+0x1b6>
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	3302      	adds	r3, #2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	8a1b      	ldrh	r3, [r3, #16]
 8005ca2:	089b      	lsrs	r3, r3, #2
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	613b      	str	r3, [r7, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	3302      	adds	r3, #2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	8b9b      	ldrh	r3, [r3, #28]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d90b      	bls.n	8005cd2 <usb_lld_init_endpoint+0x14a>
      fsize *= usbp->epc[ep]->in_multiplier;
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	3302      	adds	r3, #2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	8b9b      	ldrh	r3, [r3, #28]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	fb02 f303 	mul.w	r3, r2, r3
 8005cd0:	613b      	str	r3, [r7, #16]
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	1e5c      	subs	r4, r3, #1
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	041d      	lsls	r5, r3, #16
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
 8005cda:	6939      	ldr	r1, [r7, #16]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff f9f3 	bl	80050c8 <otg_ram_alloc>
 8005ce2:	4603      	mov	r3, r0
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8005ce4:	ea45 0203 	orr.w	r2, r5, r3
 8005ce8:	68f9      	ldr	r1, [r7, #12]
 8005cea:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	605a      	str	r2, [r3, #4]
    otg_txfifo_flush(usbp, ep);
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff f9bd 	bl	8005078 <otg_txfifo_flush>
    otgp->ie[ep].DIEPCTL = ctl |
 8005cfe:	78f8      	ldrb	r0, [r7, #3]
                           DIEPCTL_TXFNUM(ep) |
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	059b      	lsls	r3, r3, #22
 8005d04:	461a      	mov	r2, r3
    otgp->ie[ep].DIEPCTL = ctl |
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	431a      	orrs	r2, r3
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	3302      	adds	r3, #2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	440b      	add	r3, r1
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	8a1b      	ldrh	r3, [r3, #16]
                           DIEPCTL_TXFNUM(ep) |
 8005d18:	431a      	orrs	r2, r3
    otgp->ie[ep].DIEPCTL = ctl |
 8005d1a:	68f9      	ldr	r1, [r7, #12]
 8005d1c:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8005d20:	015b      	lsls	r3, r3, #5
 8005d22:	440b      	add	r3, r1
 8005d24:	601a      	str	r2, [r3, #0]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	2101      	movs	r1, #1
 8005d30:	fa01 f303 	lsl.w	r3, r1, r3
 8005d34:	431a      	orrs	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8005d3c:	e026      	b.n	8005d8c <usb_lld_init_endpoint+0x204>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	3340      	adds	r3, #64	; 0x40
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	4a16      	ldr	r2, [pc, #88]	; (8005da4 <usb_lld_init_endpoint+0x21c>)
 8005d4c:	605a      	str	r2, [r3, #4]
    otg_txfifo_flush(usbp, ep);
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff f990 	bl	8005078 <otg_txfifo_flush>
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	78fa      	ldrb	r2, [r7, #3]
 8005d5c:	68f9      	ldr	r1, [r7, #12]
 8005d5e:	3248      	adds	r2, #72	; 0x48
 8005d60:	0152      	lsls	r2, r2, #5
 8005d62:	440a      	add	r2, r1
 8005d64:	6812      	ldr	r2, [r2, #0]
 8005d66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d6a:	68f9      	ldr	r1, [r7, #12]
 8005d6c:	3348      	adds	r3, #72	; 0x48
 8005d6e:	015b      	lsls	r3, r3, #5
 8005d70:	440b      	add	r3, r1
 8005d72:	601a      	str	r2, [r3, #0]
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d82:	43db      	mvns	r3, r3
 8005d84:	401a      	ands	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
}
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bdb0      	pop	{r4, r5, r7, pc}
 8005d92:	bf00      	nop
 8005d94:	10008000 	.word	0x10008000
 8005d98:	10048000 	.word	0x10048000
 8005d9c:	10088000 	.word	0x10088000
 8005da0:	100c8000 	.word	0x100c8000
 8005da4:	02000400 	.word	0x02000400

08005da8 <usb_lld_disable_endpoints>:
void usb_lld_disable_endpoints(USBDriver *usbp) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  otg_ram_reset(usbp);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff f97b 	bl	80050ac <otg_ram_reset>
  otg_disable_ep(usbp);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff f8fb 	bl	8004fb2 <otg_disable_ep>
}
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <usb_lld_get_status_out>:
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  ctl = usbp->otg->oe[ep].DOEPCTL;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	3358      	adds	r3, #88	; 0x58
 8005dd6:	015b      	lsls	r3, r3, #5
 8005dd8:	4413      	add	r3, r2
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]
  if (!(ctl & DOEPCTL_USBAEP))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <usb_lld_get_status_out+0x2a>
    return EP_STATUS_DISABLED;
 8005de8:	2300      	movs	r3, #0
 8005dea:	e007      	b.n	8005dfc <usb_lld_get_status_out+0x3a>
  if (ctl & DOEPCTL_STALL)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <usb_lld_get_status_out+0x38>
    return EP_STATUS_STALLED;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <usb_lld_get_status_out+0x3a>
  return EP_STATUS_ACTIVE;
 8005dfa:	2302      	movs	r3, #2
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <usb_lld_get_status_in>:
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	70fb      	strb	r3, [r7, #3]
  ctl = usbp->otg->ie[ep].DIEPCTL;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	3348      	adds	r3, #72	; 0x48
 8005e1c:	015b      	lsls	r3, r3, #5
 8005e1e:	4413      	add	r3, r2
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]
  if (!(ctl & DIEPCTL_USBAEP))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <usb_lld_get_status_in+0x2a>
    return EP_STATUS_DISABLED;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e007      	b.n	8005e42 <usb_lld_get_status_in+0x3a>
  if (ctl & DIEPCTL_STALL)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <usb_lld_get_status_in+0x38>
    return EP_STATUS_STALLED;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <usb_lld_get_status_in+0x3a>
  return EP_STATUS_ACTIVE;
 8005e40:	2302      	movs	r3, #2
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <usb_lld_read_setup>:
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	460b      	mov	r3, r1
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	72fb      	strb	r3, [r7, #11]
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8005e5c:	7afb      	ldrb	r3, [r7, #11]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	3302      	adds	r3, #2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	2208      	movs	r2, #8
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f002 fee8 	bl	8008c44 <memcpy>
}
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <usb_lld_start_out>:
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8005e7a:	b480      	push	{r7}
 8005e7c:	b087      	sub	sp, #28
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	460b      	mov	r3, r1
 8005e84:	70fb      	strb	r3, [r7, #3]
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	3302      	adds	r3, #2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	617b      	str	r3, [r7, #20]
  osp->totsize = osp->rxsize;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	60da      	str	r2, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d106      	bne.n	8005eb2 <usb_lld_start_out+0x38>
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b40      	cmp	r3, #64	; 0x40
 8005eaa:	d902      	bls.n	8005eb2 <usb_lld_start_out+0x38>
      osp->rxsize = EP0_MAX_OUTSIZE;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2240      	movs	r2, #64	; 0x40
 8005eb0:	601a      	str	r2, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	3302      	adds	r3, #2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	8a5b      	ldrh	r3, [r3, #18]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	1e5a      	subs	r2, r3, #1
           usbp->epc[ep]->out_maxsize;
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	3302      	adds	r3, #2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	8a5b      	ldrh	r3, [r3, #18]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8005ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eda:	613b      	str	r3, [r7, #16]
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	8a5b      	ldrh	r3, [r3, #18]
 8005eea:	461a      	mov	r2, r3
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	fb03 f302 	mul.w	r3, r3, r2
 8005ef2:	3303      	adds	r3, #3
 8005ef4:	f023 0303 	bic.w	r3, r3, #3
 8005ef8:	60fb      	str	r3, [r7, #12]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	04d0      	lsls	r0, r2, #19
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4302      	orrs	r2, r0
 8005f08:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8005f0c:	015b      	lsls	r3, r3, #5
 8005f0e:	440b      	add	r3, r1
 8005f10:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8005f14:	601a      	str	r2, [r3, #0]
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d128      	bne.n	8005f7e <usb_lld_start_out+0x104>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f30:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8005f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d010      	beq.n	8005f5e <usb_lld_start_out+0xe4>
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	3258      	adds	r2, #88	; 0x58
 8005f4a:	0152      	lsls	r2, r2, #5
 8005f4c:	4402      	add	r2, r0
 8005f4e:	6812      	ldr	r2, [r2, #0]
 8005f50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005f54:	3358      	adds	r3, #88	; 0x58
 8005f56:	015b      	lsls	r3, r3, #5
 8005f58:	440b      	add	r3, r1
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	e00f      	b.n	8005f7e <usb_lld_start_out+0x104>
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f62:	78fb      	ldrb	r3, [r7, #3]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	3258      	adds	r2, #88	; 0x58
 8005f6c:	0152      	lsls	r2, r2, #5
 8005f6e:	4402      	add	r2, r0
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005f76:	3358      	adds	r3, #88	; 0x58
 8005f78:	015b      	lsls	r3, r3, #5
 8005f7a:	440b      	add	r3, r1
 8005f7c:	601a      	str	r2, [r3, #0]
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f82:	78fb      	ldrb	r3, [r7, #3]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8005f88:	78fa      	ldrb	r2, [r7, #3]
 8005f8a:	3258      	adds	r2, #88	; 0x58
 8005f8c:	0152      	lsls	r2, r2, #5
 8005f8e:	4402      	add	r2, r0
 8005f90:	6812      	ldr	r2, [r2, #0]
 8005f92:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005f96:	3358      	adds	r3, #88	; 0x58
 8005f98:	015b      	lsls	r3, r3, #5
 8005f9a:	440b      	add	r3, r1
 8005f9c:	601a      	str	r2, [r3, #0]
}
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <uartInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void uartInit(void) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0

  uart_lld_init();
 8005fac:	f7fc fecc 	bl	8002d48 <uart_lld_init>
}
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <uartObjectInit>:
 *
 * @param[out] uartp    pointer to the @p UARTDriver object
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]

  uartp->state      = UART_STOP;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	701a      	strb	r2, [r3, #0]
  uartp->txstate    = UART_TX_IDLE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	705a      	strb	r2, [r3, #1]
  uartp->rxstate    = UART_RX_IDLE;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	709a      	strb	r2, [r3, #2]
  uartp->config     = NULL;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	605a      	str	r2, [r3, #4]

  /* Optional, user-defined initializer.*/
#if defined(UART_DRIVER_EXT_INIT_HOOK)
  UART_DRIVER_EXT_INIT_HOOK(uartp);
#endif
}
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <uartStart>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] config    pointer to the @p UARTConfig object
 *
 * @api
 */
void uartStart(UARTDriver *uartp, const UARTConfig *config) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]

  osalDbgCheck((uartp != NULL) && (config != NULL));

  osalSysLock();
 8005fe6:	f001 ff4c 	bl	8007e82 <osalSysLock.lto_priv.188>
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uartp->config = config;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	605a      	str	r2, [r3, #4]
  uart_lld_start(uartp);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7fc fec1 	bl	8002d78 <uart_lld_start>
  uartp->state = UART_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	701a      	strb	r2, [r3, #0]
  osalSysUnlock();
 8005ffc:	f001 ff46 	bl	8007e8c <osalSysUnlock.lto_priv.186>
}
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <uartStartSend>:
 * @param[in] n         number of data frames to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void uartStartSend(UARTDriver *uartp, size_t n, const void *txbuf) {
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]

  osalDbgCheck((uartp != NULL) && (n > 0U) && (txbuf != NULL));
             
  osalSysLock();
 8006012:	f001 ff36 	bl	8007e82 <osalSysLock.lto_priv.188>
  osalDbgAssert(uartp->state == UART_READY, "is active");
  osalDbgAssert(uartp->txstate != UART_TX_ACTIVE, "tx active");

  uart_lld_start_send(uartp, n, txbuf);
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7fc ff14 	bl	8002e48 <uart_lld_start_send>
  uartp->txstate = UART_TX_ACTIVE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2201      	movs	r2, #1
 8006024:	705a      	strb	r2, [r3, #1]
  osalSysUnlock();
 8006026:	f001 ff31 	bl	8007e8c <osalSysUnlock.lto_priv.186>
}
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <uartStartReceive>:
 * @param[in] n         number of data frames to receive
 * @param[in] rxbuf     the pointer to the receive buffer
 *
 * @api
 */
void uartStartReceive(UARTDriver *uartp, size_t n, void *rxbuf) {
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]

  osalDbgCheck((uartp != NULL) && (n > 0U) && (rxbuf != NULL));

  osalSysLock();
 800603c:	f001 ff21 	bl	8007e82 <osalSysLock.lto_priv.188>
  osalDbgAssert(uartp->state == UART_READY, "is active");
  osalDbgAssert(uartp->rxstate != UART_RX_ACTIVE, "rx active");

  uart_lld_start_receive(uartp, n, rxbuf);
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f7fc ff38 	bl	8002eba <uart_lld_start_receive>
  uartp->rxstate = UART_RX_ACTIVE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	709a      	strb	r2, [r3, #2]
  osalSysUnlock();
 8006050:	f001 ff1c 	bl	8007e8c <osalSysUnlock.lto_priv.186>
}
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <port_lock>:
static inline void port_lock(void) {
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	2320      	movs	r3, #32
 8006062:	607b      	str	r3, [r7, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f383 8811 	msr	BASEPRI, r3
}
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <port_unlock>:
static inline void port_unlock(void) {
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	2300      	movs	r3, #0
 800607c:	607b      	str	r3, [r7, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f383 8811 	msr	BASEPRI, r3
}
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <port_lock_from_isr>:
static inline void port_lock_from_isr(void) {
 800608e:	b580      	push	{r7, lr}
 8006090:	af00      	add	r7, sp, #0
  port_lock();
 8006092:	f7ff ffe2 	bl	800605a <port_lock>
}
 8006096:	bd80      	pop	{r7, pc}

08006098 <port_unlock_from_isr>:
static inline void port_unlock_from_isr(void) {
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  port_unlock();
 800609c:	f7ff ffea 	bl	8006074 <port_unlock>
}
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <chSysLock>:
static inline void chSysLock(void) {
 80060a2:	b580      	push	{r7, lr}
 80060a4:	af00      	add	r7, sp, #0
  port_lock();
 80060a6:	f7ff ffd8 	bl	800605a <port_lock>
}
 80060aa:	bd80      	pop	{r7, pc}

080060ac <chSysUnlock>:
static inline void chSysUnlock(void) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  port_unlock();
 80060b0:	f7ff ffe0 	bl	8006074 <port_unlock>
}
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <chSysLockFromISR>:
static inline void chSysLockFromISR(void) {
 80060b6:	b580      	push	{r7, lr}
 80060b8:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 80060ba:	f7ff ffe8 	bl	800608e <port_lock_from_isr>
}
 80060be:	bd80      	pop	{r7, pc}

080060c0 <chSysUnlockFromISR>:
static inline void chSysUnlockFromISR(void) {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 80060c4:	f7ff ffe8 	bl	8006098 <port_unlock_from_isr>
}
 80060c8:	bd80      	pop	{r7, pc}

080060ca <osalSysLock.lto_priv.189>:
static inline void osalSysLock(void) {
 80060ca:	b580      	push	{r7, lr}
 80060cc:	af00      	add	r7, sp, #0
  chSysLock();
 80060ce:	f7ff ffe8 	bl	80060a2 <chSysLock>
}
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <osalSysUnlock.lto_priv.187>:
static inline void osalSysUnlock(void) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  chSysUnlock();
 80060d8:	f7ff ffe8 	bl	80060ac <chSysUnlock>
}
 80060dc:	bd80      	pop	{r7, pc}

080060de <osalSysLockFromISR>:
static inline void osalSysLockFromISR(void) {
 80060de:	b580      	push	{r7, lr}
 80060e0:	af00      	add	r7, sp, #0
  chSysLockFromISR();
 80060e2:	f7ff ffe8 	bl	80060b6 <chSysLockFromISR>
}
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <osalSysUnlockFromISR>:
static inline void osalSysUnlockFromISR(void) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  chSysUnlockFromISR();
 80060ec:	f7ff ffe8 	bl	80060c0 <chSysUnlockFromISR>
}
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <get_hword>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static uint16_t get_hword(uint8_t *p) {
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  uint16_t hw;

  hw  = (uint16_t)*p++;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	81fb      	strh	r3, [r7, #14]
  hw |= (uint16_t)*p << 8U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	021b      	lsls	r3, r3, #8
 800610a:	b21a      	sxth	r2, r3
 800610c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006110:	4313      	orrs	r3, r2
 8006112:	b21b      	sxth	r3, r3
 8006114:	81fb      	strh	r3, [r7, #14]
  return hw;
 8006116:	89fb      	ldrh	r3, [r7, #14]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <set_address>:
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]

  usbp->address = usbp->setup[2];
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
  usb_lld_set_address(usbp);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff fd0b 	bl	8005b54 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <set_address+0x30>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2101      	movs	r1, #1
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2203      	movs	r2, #3
 8006158:	701a      	strb	r2, [r3, #0]
}
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <default_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @return              The request handling exit code.
 * @retval false        Request not recognized by the handler or error.
 * @retval true         Request handled.
 */
static bool default_handler(USBDriver *usbp) {
 8006160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800616e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006178:	021b      	lsls	r3, r3, #8
                                        USB_RTYPE_TYPE_MASK)) |
 800617a:	4313      	orrs	r3, r2
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800617c:	f240 3202 	movw	r2, #770	; 0x302
 8006180:	4293      	cmp	r3, r2
 8006182:	f000 8197 	beq.w	80064b4 <default_handler+0x354>
 8006186:	f240 3202 	movw	r2, #770	; 0x302
 800618a:	4293      	cmp	r3, r2
 800618c:	d815      	bhi.n	80061ba <default_handler+0x5a>
 800618e:	2b02      	cmp	r3, #2
 8006190:	f000 8106 	beq.w	80063a0 <default_handler+0x240>
 8006194:	2b02      	cmp	r3, #2
 8006196:	d805      	bhi.n	80061a4 <default_handler+0x44>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d027      	beq.n	80061ec <default_handler+0x8c>
 800619c:	2b01      	cmp	r3, #1
 800619e:	f000 80f4 	beq.w	800638a <default_handler+0x22a>
 80061a2:	e1bb      	b.n	800651c <default_handler+0x3bc>
 80061a4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80061a8:	f000 8150 	beq.w	800644c <default_handler+0x2ec>
 80061ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061b0:	d044      	beq.n	800623c <default_handler+0xdc>
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b6:	d026      	beq.n	8006206 <default_handler+0xa6>
 80061b8:	e1b0      	b.n	800651c <default_handler+0x3bc>
 80061ba:	f240 6201 	movw	r2, #1537	; 0x601
 80061be:	4293      	cmp	r3, r2
 80061c0:	d806      	bhi.n	80061d0 <default_handler+0x70>
 80061c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80061c6:	d26c      	bcs.n	80062a2 <default_handler+0x142>
 80061c8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80061cc:	d051      	beq.n	8006272 <default_handler+0x112>
 80061ce:	e1a5      	b.n	800651c <default_handler+0x3bc>
 80061d0:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80061d4:	f000 8098 	beq.w	8006308 <default_handler+0x1a8>
 80061d8:	f640 4202 	movw	r2, #3074	; 0xc02
 80061dc:	4293      	cmp	r3, r2
 80061de:	f000 80d4 	beq.w	800638a <default_handler+0x22a>
 80061e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e6:	f000 8082 	beq.w	80062ee <default_handler+0x18e>
 80061ea:	e197      	b.n	800651c <default_handler+0x3bc>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2202      	movs	r2, #2
 80061fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8006202:	2301      	movs	r3, #1
 8006204:	e18b      	b.n	800651e <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800620c:	2b01      	cmp	r3, #1
 800620e:	d113      	bne.n	8006238 <default_handler+0xd8>
      usbp->status &= ~2U;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006216:	f023 0302 	bic.w	r3, r3, #2
 800621a:	b29a      	uxth	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	639a      	str	r2, [r3, #56]	; 0x38
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	63da      	str	r2, [r3, #60]	; 0x3c
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 8006234:	2301      	movs	r3, #1
 8006236:	e172      	b.n	800651e <default_handler+0x3be>
    }
    return false;
 8006238:	2300      	movs	r3, #0
 800623a:	e170      	b.n	800651e <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006242:	2b01      	cmp	r3, #1
 8006244:	d113      	bne.n	800626e <default_handler+0x10e>
      usbp->status |= 2U;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800624c:	f043 0302 	orr.w	r3, r3, #2
 8006250:	b29a      	uxth	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	63da      	str	r2, [r3, #60]	; 0x3c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 800626a:	2301      	movs	r3, #1
 800626c:	e157      	b.n	800651e <default_handler+0x3be>
    }
    return false;
 800626e:	2300      	movs	r3, #0
 8006270:	e155      	b.n	800651e <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006278:	2b00      	cmp	r3, #0
 800627a:	d107      	bne.n	800628c <default_handler+0x12c>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8006282:	2b05      	cmp	r3, #5
 8006284:	d102      	bne.n	800628c <default_handler+0x12c>
      set_address(usbp);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff ff4c 	bl	8006124 <set_address>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	639a      	str	r2, [r3, #56]	; 0x38
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	63da      	str	r2, [r3, #60]	; 0x3c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	641a      	str	r2, [r3, #64]	; 0x40
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
 800629e:	2301      	movs	r3, #1
 80062a0:	e13d      	b.n	800651e <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	685c      	ldr	r4, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 5047 	ldrb.w	r5, [r3, #71]	; 0x47
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 6046 	ldrb.w	r6, [r3, #70]	; 0x46
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3348      	adds	r3, #72	; 0x48
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff ff1a 	bl	80060f2 <get_hword>
 80062be:	4603      	mov	r3, r0
 80062c0:	4632      	mov	r2, r6
 80062c2:	4629      	mov	r1, r5
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	47a0      	blx	r4
 80062c8:	60f8      	str	r0, [r7, #12]
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <default_handler+0x174>
      return false;
 80062d0:	2300      	movs	r3, #0
 80062d2:	e124      	b.n	800651e <default_handler+0x3be>
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	639a      	str	r2, [r3, #56]	; 0x38
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	641a      	str	r2, [r3, #64]	; 0x40
    /*lint -restore*/
    return true;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e117      	b.n	800651e <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f103 024f 	add.w	r2, r3, #79	; 0x4f
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	639a      	str	r2, [r3, #56]	; 0x38
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8006304:	2301      	movs	r3, #1
 8006306:	e10a      	b.n	800651e <default_handler+0x3be>
    if (usbp->configuration != usbp->setup[2])
#endif
    {
      /* If the USB device is already active then we have to perform the clear
         procedure on the current configuration.*/
      if (usbp->state == USB_ACTIVE) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b04      	cmp	r3, #4
 800630e:	d118      	bne.n	8006342 <default_handler+0x1e2>
        /* Current configuration cleared.*/
        osalSysLockFromISR ();
 8006310:	f7ff fee5 	bl	80060de <osalSysLockFromISR>
        usbDisableEndpointsI(usbp);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f98e 	bl	8006636 <usbDisableEndpointsI>
        osalSysUnlockFromISR ();
 800631a:	f7ff fee5 	bl	80060e8 <osalSysUnlockFromISR>
        usbp->configuration = 0U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
        usbp->state = USB_SELECTED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2203      	movs	r2, #3
 800632a:	701a      	strb	r2, [r3, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <default_handler+0x1e2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2103      	movs	r1, #3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
      }
      if (usbp->setup[2] != 0U) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006348:	2b00      	cmp	r3, #0
 800634a:	d013      	beq.n	8006374 <default_handler+0x214>
        /* New configuration.*/
        usbp->configuration = usbp->setup[2];
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
        usbp->state = USB_ACTIVE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2204      	movs	r2, #4
 800635c:	701a      	strb	r2, [r3, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <default_handler+0x214>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2102      	movs	r1, #2
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	4798      	blx	r3
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	639a      	str	r2, [r3, #56]	; 0x38
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8006386:	2301      	movs	r3, #1
 8006388:	e0c9      	b.n	800651e <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a66      	ldr	r2, [pc, #408]	; (8006528 <default_handler+0x3c8>)
 800638e:	639a      	str	r2, [r3, #56]	; 0x38
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	63da      	str	r2, [r3, #60]	; 0x3c
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	641a      	str	r2, [r3, #64]	; 0x40
    /*lint -restore*/
    return true;
 800639c:	2301      	movs	r3, #1
 800639e:	e0be      	b.n	800651e <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80063a6:	b25b      	sxtb	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	da27      	bge.n	80063fc <default_handler+0x29c>
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff fd24 	bl	8005e08 <usb_lld_get_status_in>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d002      	beq.n	80063cc <default_handler+0x26c>
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d00b      	beq.n	80063e2 <default_handler+0x282>
 80063ca:	e015      	b.n	80063f8 <default_handler+0x298>
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a57      	ldr	r2, [pc, #348]	; (800652c <default_handler+0x3cc>)
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2202      	movs	r2, #2
 80063d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
 80063de:	2301      	movs	r3, #1
 80063e0:	e09d      	b.n	800651e <default_handler+0x3be>
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a52      	ldr	r2, [pc, #328]	; (8006530 <default_handler+0x3d0>)
 80063e6:	639a      	str	r2, [r3, #56]	; 0x38
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e092      	b.n	800651e <default_handler+0x3be>
      case EP_STATUS_DISABLED:
      default:
        return false;
 80063f8:	2300      	movs	r3, #0
 80063fa:	e090      	b.n	800651e <default_handler+0x3be>
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	b2db      	uxtb	r3, r3
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff fcd9 	bl	8005dc2 <usb_lld_get_status_out>
 8006410:	4603      	mov	r3, r0
 8006412:	2b01      	cmp	r3, #1
 8006414:	d002      	beq.n	800641c <default_handler+0x2bc>
 8006416:	2b02      	cmp	r3, #2
 8006418:	d00b      	beq.n	8006432 <default_handler+0x2d2>
 800641a:	e015      	b.n	8006448 <default_handler+0x2e8>
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a43      	ldr	r2, [pc, #268]	; (800652c <default_handler+0x3cc>)
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2202      	movs	r2, #2
 8006426:	63da      	str	r2, [r3, #60]	; 0x3c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
 800642e:	2301      	movs	r3, #1
 8006430:	e075      	b.n	800651e <default_handler+0x3be>
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a3e      	ldr	r2, [pc, #248]	; (8006530 <default_handler+0x3d0>)
 8006436:	639a      	str	r2, [r3, #56]	; 0x38
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	63da      	str	r2, [r3, #60]	; 0x3c
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
 8006444:	2301      	movs	r3, #1
 8006446:	e06a      	b.n	800651e <default_handler+0x3be>
      case EP_STATUS_DISABLED:
      default:
        return false;
 8006448:	2300      	movs	r3, #0
 800644a:	e068      	b.n	800651e <default_handler+0x3be>
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <default_handler+0x2fa>
      return false;
 8006456:	2300      	movs	r3, #0
 8006458:	e061      	b.n	800651e <default_handler+0x3be>
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01a      	beq.n	800649e <default_handler+0x33e>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800646e:	b25b      	sxtb	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	da0a      	bge.n	800648a <default_handler+0x32a>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	b2db      	uxtb	r3, r3
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fd fcf9 	bl	8003e7a <usb_lld_clear_in>
 8006488:	e009      	b.n	800649e <default_handler+0x33e>
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006490:	f003 030f 	and.w	r3, r3, #15
 8006494:	b2db      	uxtb	r3, r3
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7fd fcd3 	bl	8003e44 <usb_lld_clear_out>
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	639a      	str	r2, [r3, #56]	; 0x38
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e034      	b.n	800651e <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <default_handler+0x362>
      return false;
 80064be:	2300      	movs	r3, #0
 80064c0:	e02d      	b.n	800651e <default_handler+0x3be>
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01a      	beq.n	8006506 <default_handler+0x3a6>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80064d6:	b25b      	sxtb	r3, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	da0a      	bge.n	80064f2 <default_handler+0x392>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fd fc8f 	bl	8003e0e <usb_lld_stall_in>
 80064f0:	e009      	b.n	8006506 <default_handler+0x3a6>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7fd fc69 	bl	8003dd8 <usb_lld_stall_out>
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	639a      	str	r2, [r3, #56]	; 0x38
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	63da      	str	r2, [r3, #60]	; 0x3c
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8006518:	2301      	movs	r3, #1
 800651a:	e000      	b.n	800651e <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_INTERFACE << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_SET_INTERFACE << 8):
    /* All the above requests are not handled here, if you need them then
       use the hook mechanism and provide handling.*/
  default:
    return false;
 800651c:	2300      	movs	r3, #0
  }
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006526:	bf00      	nop
 8006528:	08008d3c 	.word	0x08008d3c
 800652c:	08008d44 	.word	0x08008d44
 8006530:	08008d40 	.word	0x08008d40

08006534 <usbInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void usbInit(void) {
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0

  usb_lld_init();
 8006538:	f7ff f9ee 	bl	8005918 <usb_lld_init>
}
 800653c:	bd80      	pop	{r7, pc}

0800653e <usbObjectInit>:
 *
 * @param[out] usbp     pointer to the @p USBDriver object
 *
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  unsigned i;

  usbp->state        = USB_STOP;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	701a      	strb	r2, [r3, #0]
  usbp->config       = NULL;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	605a      	str	r2, [r3, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8006552:	2300      	movs	r3, #0
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	e00f      	b.n	8006578 <usbObjectInit+0x3a>
    usbp->in_params[i]  = NULL;
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3306      	adds	r3, #6
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	2200      	movs	r2, #0
 8006564:	605a      	str	r2, [r3, #4]
    usbp->out_params[i] = NULL;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	320a      	adds	r2, #10
 800656c:	2100      	movs	r1, #0
 800656e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3301      	adds	r3, #1
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d9ec      	bls.n	8006558 <usbObjectInit+0x1a>
  }
  usbp->transmitting = 0;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	811a      	strh	r2, [r3, #8]
  usbp->receiving    = 0;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	815a      	strh	r2, [r3, #10]
}
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  unsigned i;

  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
 800659e:	f7ff fd94 	bl	80060ca <osalSysLock.lto_priv.189>
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	605a      	str	r2, [r3, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e009      	b.n	80065c2 <usbStart+0x2e>
    usbp->epc[i] = NULL;
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3302      	adds	r3, #2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	2200      	movs	r2, #0
 80065ba:	605a      	str	r2, [r3, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3301      	adds	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d9f2      	bls.n	80065ae <usbStart+0x1a>
  }
  usb_lld_start(usbp);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff f9b7 	bl	800593c <usb_lld_start>
  usbp->state = USB_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2202      	movs	r2, #2
 80065d2:	701a      	strb	r2, [r3, #0]
  osalSysUnlock();
 80065d4:	f7ff fd7e 	bl	80060d4 <osalSysUnlock.lto_priv.187>
}
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <usbInitEndpointI>:
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	460b      	mov	r3, r1
 80065e8:	607a      	str	r2, [r7, #4]
 80065ea:	72fb      	strb	r3, [r7, #11]
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;
 80065ec:	7afb      	ldrb	r3, [r7, #11]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	3302      	adds	r3, #2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	605a      	str	r2, [r3, #4]

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d006      	beq.n	8006610 <usbInitEndpointI+0x32>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	2210      	movs	r2, #16
 8006608:	2100      	movs	r1, #0
 800660a:	4618      	mov	r0, r3
 800660c:	f002 fb25 	bl	8008c5a <memset>
  }
  if (epcp->out_state != NULL) {
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d006      	beq.n	8006626 <usbInitEndpointI+0x48>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	2210      	movs	r2, #16
 800661e:	2100      	movs	r1, #0
 8006620:	4618      	mov	r0, r3
 8006622:	f002 fb1a 	bl	8008c5a <memset>
  }

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8006626:	7afb      	ldrb	r3, [r7, #11]
 8006628:	4619      	mov	r1, r3
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f7ff faac 	bl	8005b88 <usb_lld_init_endpoint>
}
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <usbDisableEndpointsI>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @iclass
 */
void usbDisableEndpointsI(USBDriver *usbp) {
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");

  usbp->transmitting &= 1U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	891b      	ldrh	r3, [r3, #8]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	b29a      	uxth	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	811a      	strh	r2, [r3, #8]
  usbp->receiving    &= 1U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	895b      	ldrh	r3, [r3, #10]
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	815a      	strh	r2, [r3, #10]

  for (i = 1; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 800665a:	2301      	movs	r3, #1
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	e009      	b.n	8006674 <usbDisableEndpointsI+0x3e>
      if (usbp->epc[i]->out_state != NULL) {
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
    }
#endif
    usbp->epc[i] = NULL;
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3302      	adds	r3, #2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	2200      	movs	r2, #0
 800666c:	605a      	str	r2, [r3, #4]
  for (i = 1; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3301      	adds	r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b03      	cmp	r3, #3
 8006678:	d9f2      	bls.n	8006660 <usbDisableEndpointsI+0x2a>
  }

  /* Low level endpoints deactivation.*/
  usb_lld_disable_endpoints(usbp);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff fb94 	bl	8005da8 <usb_lld_disable_endpoints>
}
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <usbStartReceiveI>:
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
 8006686:	b580      	push	{r7, lr}
 8006688:	b086      	sub	sp, #24
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
 8006692:	460b      	mov	r3, r1
 8006694:	72fb      	strb	r3, [r7, #11]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	895a      	ldrh	r2, [r3, #10]
 800669a:	7afb      	ldrb	r3, [r7, #11]
 800669c:	2101      	movs	r1, #1
 800669e:	fa01 f303 	lsl.w	r3, r1, r3
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	4313      	orrs	r3, r2
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	815a      	strh	r2, [r3, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80066ac:	7afb      	ldrb	r3, [r7, #11]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	3302      	adds	r3, #2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	617b      	str	r3, [r7, #20]
  /*lint -restore*/
  osp->rxbuf  = buf;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	609a      	str	r2, [r3, #8]
  osp->rxsize = n;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	601a      	str	r2, [r3, #0]
  osp->rxcnt  = 0;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2200      	movs	r2, #0
 80066cc:	605a      	str	r2, [r3, #4]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 80066ce:	7afb      	ldrb	r3, [r7, #11]
 80066d0:	4619      	mov	r1, r3
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f7ff fbd1 	bl	8005e7a <usb_lld_start_out>
}
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	460b      	mov	r3, r1
 80066ec:	72fb      	strb	r3, [r7, #11]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	891a      	ldrh	r2, [r3, #8]
 80066f2:	7afb      	ldrb	r3, [r7, #11]
 80066f4:	2101      	movs	r1, #1
 80066f6:	fa01 f303 	lsl.w	r3, r1, r3
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	4313      	orrs	r3, r2
 80066fe:	b29a      	uxth	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	811a      	strh	r2, [r3, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8006704:	7afb      	ldrb	r3, [r7, #11]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	3302      	adds	r3, #2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	617b      	str	r3, [r7, #20]
  /*lint -restore*/
  isp->txbuf  = buf;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	609a      	str	r2, [r3, #8]
  isp->txsize = n;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	601a      	str	r2, [r3, #0]
  isp->txcnt  = 0;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2200      	movs	r2, #0
 8006724:	605a      	str	r2, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8006726:	7afb      	ldrb	r3, [r7, #11]
 8006728:	4619      	mov	r1, r3
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f7fd faaf 	bl	8003c8e <usb_lld_start_in>
}
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <_usb_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	701a      	strb	r2, [r3, #0]

  /* Resetting internal state.*/
  usbp->status        = 0;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  usbp->address       = 0;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
  usbp->configuration = 0;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
  usbp->transmitting  = 0;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	811a      	strh	r2, [r3, #8]
  usbp->receiving     = 0;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	815a      	strh	r2, [r3, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8006768:	2300      	movs	r3, #0
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	e009      	b.n	8006782 <_usb_reset+0x4c>
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3302      	adds	r3, #2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	2200      	movs	r2, #0
 800677a:	605a      	str	r2, [r3, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3301      	adds	r3, #1
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b03      	cmp	r3, #3
 8006786:	d9f2      	bls.n	800676e <_usb_reset+0x38>
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_STP_WAITING;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff f947 	bl	8005a24 <usb_lld_reset>

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <_usb_reset+0x76>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2100      	movs	r1, #0
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
}
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <_usb_suspend>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_suspend(USBDriver *usbp) {
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  /* No state change, suspend always returns to previous state. */

  /* State transition.*/
  usbp->saved_state = usbp->state;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	781a      	ldrb	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  usbp->state       = USB_SUSPENDED;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2205      	movs	r2, #5
 80067c8:	701a      	strb	r2, [r3, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d005      	beq.n	80067e0 <_usb_suspend+0x2e>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2104      	movs	r1, #4
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	4798      	blx	r3
        osalSysUnlockFromISR();
      }
    }
  }
#endif
}
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <_usb_wakeup>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]

  /* State transition, returning to the previous state.*/
  usbp->state = usbp->saved_state;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	701a      	strb	r2, [r3, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <_usb_wakeup+0x28>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2105      	movs	r1, #5
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
}
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  size_t max;

  /* Is the EP0 state machine in the correct state for handling setup
     packets?*/
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <_usb_ep0setup+0x1e>
    /* This is unexpected could require handling with a warning event.*/
    /* TODO: handling here.*/

    /* Resetting the EP0 state machine and going ahead.*/
    usbp->ep0state = USB_EP0_STP_WAITING;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  /* Reading the setup data into the driver buffer.*/
  usbReadSetup(usbp, ep, usbp->setup);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff fb06 	bl	8005e4e <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00a      	beq.n	8006862 <_usb_ep0setup+0x4e>
      !(usbp->config->requests_hook_cb(usbp))) {
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
 8006856:	4603      	mov	r3, r0
 8006858:	f083 0301 	eor.w	r3, r3, #1
 800685c:	b2db      	uxtb	r3, r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 800685e:	2b00      	cmp	r3, #0
 8006860:	d027      	beq.n	80068b2 <_usb_ep0setup+0x9e>
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006868:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800686c:	2b00      	cmp	r3, #0
 800686e:	d108      	bne.n	8006882 <_usb_ep0setup+0x6e>
        !default_handler(usbp)) {
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff fc75 	bl	8006160 <default_handler>
 8006876:	4603      	mov	r3, r0
 8006878:	f083 0301 	eor.w	r3, r3, #1
 800687c:	b2db      	uxtb	r3, r3
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800687e:	2b00      	cmp	r3, #0
 8006880:	d017      	beq.n	80068b2 <_usb_ep0setup+0x9e>
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 8006882:	2100      	movs	r1, #0
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7fd fac2 	bl	8003e0e <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 800688a:	2100      	movs	r1, #0
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7fd faa3 	bl	8003dd8 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <_usb_ep0setup+0x94>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2106      	movs	r1, #6
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2206      	movs	r2, #6
 80068ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80068b0:	e05b      	b.n	800696a <_usb_ep0setup+0x156>
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	334a      	adds	r3, #74	; 0x4a
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7ff fc1b 	bl	80060f2 <get_hword>
 80068bc:	4603      	mov	r3, r0
 80068be:	60fb      	str	r3, [r7, #12]
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d902      	bls.n	80068d0 <_usb_ep0setup+0xbc>
    usbp->ep0n = max;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068d6:	b25b      	sxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	da23      	bge.n	8006924 <_usb_ep0setup+0x110>
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d010      	beq.n	8006906 <_usb_ep0setup+0xf2>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_IN_TX;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2209      	movs	r2, #9
 80068e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      osalSysLockFromISR();
 80068ec:	f7ff fbf7 	bl	80060de <osalSysLockFromISR>
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f8:	2100      	movs	r1, #0
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff feef 	bl	80066de <usbStartTransmitI>
      osalSysUnlockFromISR();
 8006900:	f7ff fbf2 	bl	80060e8 <osalSysUnlockFromISR>
         packet.*/
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, NULL, 0);
      osalSysUnlockFromISR();
 8006904:	e031      	b.n	800696a <_usb_ep0setup+0x156>
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2214      	movs	r2, #20
 800690a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      osalSysLockFromISR();
 800690e:	f7ff fbe6 	bl	80060de <osalSysLockFromISR>
      usbStartReceiveI(usbp, 0, NULL, 0);
 8006912:	2300      	movs	r3, #0
 8006914:	2200      	movs	r2, #0
 8006916:	2100      	movs	r1, #0
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff feb4 	bl	8006686 <usbStartReceiveI>
      osalSysUnlockFromISR();
 800691e:	f7ff fbe3 	bl	80060e8 <osalSysUnlockFromISR>
 8006922:	e022      	b.n	800696a <_usb_ep0setup+0x156>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006928:	2b00      	cmp	r3, #0
 800692a:	d010      	beq.n	800694e <_usb_ep0setup+0x13a>
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_OUT_RX;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2215      	movs	r2, #21
 8006930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      osalSysLockFromISR();
 8006934:	f7ff fbd3 	bl	80060de <osalSysLockFromISR>
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006940:	2100      	movs	r1, #0
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff fe9f 	bl	8006686 <usbStartReceiveI>
      osalSysUnlockFromISR();
 8006948:	f7ff fbce 	bl	80060e8 <osalSysUnlockFromISR>
 800694c:	e00d      	b.n	800696a <_usb_ep0setup+0x156>
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	220b      	movs	r2, #11
 8006952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      osalSysLockFromISR();
 8006956:	f7ff fbc2 	bl	80060de <osalSysLockFromISR>
      usbStartTransmitI(usbp, 0, NULL, 0);
 800695a:	2300      	movs	r3, #0
 800695c:	2200      	movs	r2, #0
 800695e:	2100      	movs	r1, #0
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff febc 	bl	80066de <usbStartTransmitI>
      osalSysUnlockFromISR();
 8006966:	f7ff fbbf 	bl	80060e8 <osalSysUnlockFromISR>
#else
      usb_lld_end_setup(usbp, ep);
#endif
    }
  }
}
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	70fb      	strb	r3, [r7, #3]
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006982:	2b15      	cmp	r3, #21
 8006984:	f200 808a 	bhi.w	8006a9c <_usb_ep0in+0x12c>
 8006988:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <_usb_ep0in+0x20>)
 800698a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698e:	bf00      	nop
 8006990:	08006a6f 	.word	0x08006a6f
 8006994:	08006a9d 	.word	0x08006a9d
 8006998:	08006a9d 	.word	0x08006a9d
 800699c:	08006a9d 	.word	0x08006a9d
 80069a0:	08006a9d 	.word	0x08006a9d
 80069a4:	08006a9d 	.word	0x08006a9d
 80069a8:	08006a6f 	.word	0x08006a6f
 80069ac:	08006a9d 	.word	0x08006a9d
 80069b0:	08006a9d 	.word	0x08006a9d
 80069b4:	080069e9 	.word	0x080069e9
 80069b8:	08006a37 	.word	0x08006a37
 80069bc:	08006a55 	.word	0x08006a55
 80069c0:	08006a9d 	.word	0x08006a9d
 80069c4:	08006a9d 	.word	0x08006a9d
 80069c8:	08006a9d 	.word	0x08006a9d
 80069cc:	08006a9d 	.word	0x08006a9d
 80069d0:	08006a9d 	.word	0x08006a9d
 80069d4:	08006a9d 	.word	0x08006a9d
 80069d8:	08006a9d 	.word	0x08006a9d
 80069dc:	08006a9d 	.word	0x08006a9d
 80069e0:	08006a6f 	.word	0x08006a6f
 80069e4:	08006a6f 	.word	0x08006a6f
  case USB_EP0_IN_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	334a      	adds	r3, #74	; 0x4a
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fb80 	bl	80060f2 <get_hword>
 80069f2:	4603      	mov	r3, r0
 80069f4:	60fb      	str	r3, [r7, #12]
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d21a      	bcs.n	8006a36 <_usb_ep0in+0xc6>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	68d2      	ldr	r2, [r2, #12]
 8006a08:	8a12      	ldrh	r2, [r2, #16]
 8006a0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a0e:	fb02 f201 	mul.w	r2, r2, r1
 8006a12:	1a9b      	subs	r3, r3, r2
    if ((usbp->ep0n < max) &&
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10e      	bne.n	8006a36 <_usb_ep0in+0xc6>
      osalSysLockFromISR();
 8006a18:	f7ff fb61 	bl	80060de <osalSysLockFromISR>
      usbStartTransmitI(usbp, 0, NULL, 0);
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2100      	movs	r1, #0
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff fe5b 	bl	80066de <usbStartTransmitI>
      osalSysUnlockFromISR();
 8006a28:	f7ff fb5e 	bl	80060e8 <osalSysUnlockFromISR>
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	220a      	movs	r2, #10
 8006a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006a34:	e032      	b.n	8006a9c <_usb_ep0in+0x12c>
      return;
    }
    /* Falls through.*/
  case USB_EP0_IN_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2214      	movs	r2, #20
 8006a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
 8006a3e:	f7ff fb4e 	bl	80060de <osalSysLockFromISR>
    usbStartReceiveI(usbp, 0, NULL, 0);
 8006a42:	2300      	movs	r3, #0
 8006a44:	2200      	movs	r2, #0
 8006a46:	2100      	movs	r1, #0
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff fe1c 	bl	8006686 <usbStartReceiveI>
    osalSysUnlockFromISR();
 8006a4e:	f7ff fb4b 	bl	80060e8 <osalSysUnlockFromISR>
 8006a52:	e023      	b.n	8006a9c <_usb_ep0in+0x12c>
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_IN_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <_usb_ep0in+0xf4>
      usbp->ep0endcb(usbp);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006a6c:	e016      	b.n	8006a9c <_usb_ep0in+0x12c>
    /* Falls through.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 8006a6e:	2100      	movs	r1, #0
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7fd f9cc 	bl	8003e0e <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8006a76:	2100      	movs	r1, #0
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7fd f9ad 	bl	8003dd8 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d005      	beq.n	8006a94 <_usb_ep0in+0x124>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2106      	movs	r1, #6
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2206      	movs	r2, #6
 8006a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop

08006aa4 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]

  (void)ep;
  switch (usbp->ep0state) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ab6:	2b15      	cmp	r3, #21
 8006ab8:	d867      	bhi.n	8006b8a <_usb_ep0out+0xe6>
 8006aba:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <_usb_ep0out+0x1c>)
 8006abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac0:	08006b5d 	.word	0x08006b5d
 8006ac4:	08006b8b 	.word	0x08006b8b
 8006ac8:	08006b8b 	.word	0x08006b8b
 8006acc:	08006b8b 	.word	0x08006b8b
 8006ad0:	08006b8b 	.word	0x08006b8b
 8006ad4:	08006b8b 	.word	0x08006b8b
 8006ad8:	08006b5d 	.word	0x08006b5d
 8006adc:	08006b8b 	.word	0x08006b8b
 8006ae0:	08006b8b 	.word	0x08006b8b
 8006ae4:	08006b5d 	.word	0x08006b5d
 8006ae8:	08006b5d 	.word	0x08006b5d
 8006aec:	08006b5d 	.word	0x08006b5d
 8006af0:	08006b8b 	.word	0x08006b8b
 8006af4:	08006b8b 	.word	0x08006b8b
 8006af8:	08006b8b 	.word	0x08006b8b
 8006afc:	08006b8b 	.word	0x08006b8b
 8006b00:	08006b8b 	.word	0x08006b8b
 8006b04:	08006b8b 	.word	0x08006b8b
 8006b08:	08006b8b 	.word	0x08006b8b
 8006b0c:	08006b8b 	.word	0x08006b8b
 8006b10:	08006b37 	.word	0x08006b37
 8006b14:	08006b19 	.word	0x08006b19
  case USB_EP0_OUT_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	220b      	movs	r2, #11
 8006b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
 8006b20:	f7ff fadd 	bl	80060de <osalSysLockFromISR>
    usbStartTransmitI(usbp, 0, NULL, 0);
 8006b24:	2300      	movs	r3, #0
 8006b26:	2200      	movs	r2, #0
 8006b28:	2100      	movs	r1, #0
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7ff fdd7 	bl	80066de <usbStartTransmitI>
    osalSysUnlockFromISR();
 8006b30:	f7ff fada 	bl	80060e8 <osalSysUnlockFromISR>
 8006b34:	e029      	b.n	8006b8a <_usb_ep0out+0xe6>
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d123      	bne.n	8006b8a <_usb_ep0out+0xe6>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <_usb_ep0out+0xae>
      usbp->ep0endcb(usbp);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006b5a:	e016      	b.n	8006b8a <_usb_ep0out+0xe6>
    /* Falls through.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fd f955 	bl	8003e0e <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8006b64:	2100      	movs	r1, #0
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fd f936 	bl	8003dd8 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <_usb_ep0out+0xde>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2106      	movs	r1, #6
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2206      	movs	r2, #6
 8006b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006b9a:	4a13      	ldr	r2, [pc, #76]	; (8006be8 <nvicEnableVector+0x58>)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	011b      	lsls	r3, r3, #4
 8006ba2:	b2d9      	uxtb	r1, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006bac:	460a      	mov	r2, r1
 8006bae:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006bb0:	490d      	ldr	r1, [pc, #52]	; (8006be8 <nvicEnableVector+0x58>)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	095b      	lsrs	r3, r3, #5
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	f002 021f 	and.w	r2, r2, #31
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8006bc2:	3360      	adds	r3, #96	; 0x60
 8006bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006bc8:	4907      	ldr	r1, [pc, #28]	; (8006be8 <nvicEnableVector+0x58>)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	095b      	lsrs	r3, r3, #5
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	f002 021f 	and.w	r2, r2, #31
 8006bd4:	2001      	movs	r0, #1
 8006bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8006bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	e000e100 	.word	0xe000e100

08006bec <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8006bf0:	2106      	movs	r1, #6
 8006bf2:	2006      	movs	r0, #6
 8006bf4:	f7ff ffcc 	bl	8006b90 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 8006bf8:	2106      	movs	r1, #6
 8006bfa:	2007      	movs	r0, #7
 8006bfc:	f7ff ffc8 	bl	8006b90 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 8006c00:	2106      	movs	r1, #6
 8006c02:	2008      	movs	r0, #8
 8006c04:	f7ff ffc4 	bl	8006b90 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 8006c08:	2106      	movs	r1, #6
 8006c0a:	2009      	movs	r0, #9
 8006c0c:	f7ff ffc0 	bl	8006b90 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 8006c10:	2106      	movs	r1, #6
 8006c12:	200a      	movs	r0, #10
 8006c14:	f7ff ffbc 	bl	8006b90 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 8006c18:	2106      	movs	r1, #6
 8006c1a:	2017      	movs	r0, #23
 8006c1c:	f7ff ffb8 	bl	8006b90 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 8006c20:	2106      	movs	r1, #6
 8006c22:	2028      	movs	r0, #40	; 0x28
 8006c24:	f7ff ffb4 	bl	8006b90 <nvicEnableVector>
#endif
}
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <hal_lld_backup_domain_init>:
/**
 * @brief   Initializes the backup domain.
 * @note    WARNING! Changing clock source impossible without resetting
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8006c30:	4a0e      	ldr	r2, [pc, #56]	; (8006c6c <hal_lld_backup_domain_init+0x40>)
 8006c32:	4b0e      	ldr	r3, [pc, #56]	; (8006c6c <hal_lld_backup_domain_init+0x40>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c3a:	6013      	str	r3, [r2, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8006c3c:	4b0c      	ldr	r3, [pc, #48]	; (8006c70 <hal_lld_backup_domain_init+0x44>)
 8006c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c48:	d006      	beq.n	8006c58 <hal_lld_backup_domain_init+0x2c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8006c4a:	4b09      	ldr	r3, [pc, #36]	; (8006c70 <hal_lld_backup_domain_init+0x44>)
 8006c4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006c50:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8006c52:	4b07      	ldr	r3, [pc, #28]	; (8006c70 <hal_lld_backup_domain_init+0x44>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8006c58:	4a04      	ldr	r2, [pc, #16]	; (8006c6c <hal_lld_backup_domain_init+0x40>)
 8006c5a:	4b04      	ldr	r3, [pc, #16]	; (8006c6c <hal_lld_backup_domain_init+0x40>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c62:	6053      	str	r3, [r2, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	40007000 	.word	0x40007000
 8006c70:	40023800 	.word	0x40023800

08006c74 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8006c78:	4a1b      	ldr	r2, [pc, #108]	; (8006ce8 <hal_lld_init+0x74>)
 8006c7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <hal_lld_init+0x74>)
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f063 031f 	orn	r3, r3, #31
 8006c82:	6113      	str	r3, [r2, #16]
 8006c84:	4b18      	ldr	r3, [pc, #96]	; (8006ce8 <hal_lld_init+0x74>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8006c8a:	4b17      	ldr	r3, [pc, #92]	; (8006ce8 <hal_lld_init+0x74>)
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	4b16      	ldr	r3, [pc, #88]	; (8006ce8 <hal_lld_init+0x74>)
 8006c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c94:	615a      	str	r2, [r3, #20]
 8006c96:	4b14      	ldr	r3, [pc, #80]	; (8006ce8 <hal_lld_init+0x74>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	615a      	str	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8006c9c:	4a12      	ldr	r2, [pc, #72]	; (8006ce8 <hal_lld_init+0x74>)
 8006c9e:	4b12      	ldr	r3, [pc, #72]	; (8006ce8 <hal_lld_init+0x74>)
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f063 5380 	orn	r3, r3, #268435456	; 0x10000000
 8006ca6:	6213      	str	r3, [r2, #32]
 8006ca8:	4b0f      	ldr	r3, [pc, #60]	; (8006ce8 <hal_lld_init+0x74>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8006cae:	4b0e      	ldr	r3, [pc, #56]	; (8006ce8 <hal_lld_init+0x74>)
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ce8 <hal_lld_init+0x74>)
 8006cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cb8:	625a      	str	r2, [r3, #36]	; 0x24
 8006cba:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <hal_lld_init+0x74>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8006cc0:	4a09      	ldr	r2, [pc, #36]	; (8006ce8 <hal_lld_init+0x74>)
 8006cc2:	4b09      	ldr	r3, [pc, #36]	; (8006ce8 <hal_lld_init+0x74>)
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cca:	6413      	str	r3, [r2, #64]	; 0x40
 8006ccc:	4a06      	ldr	r2, [pc, #24]	; (8006ce8 <hal_lld_init+0x74>)
 8006cce:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <hal_lld_init+0x74>)
 8006cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd6:	6613      	str	r3, [r2, #96]	; 0x60

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 8006cd8:	f7ff ffa8 	bl	8006c2c <hal_lld_backup_domain_init>

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8006cdc:	f7fe f842 	bl	8004d64 <dmaInit>
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
 8006ce0:	f7ff ff84 	bl	8006bec <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	40023800 	.word	0x40023800

08006cec <stm32_clock_init>:
 * @note    All the involved constants come from the file @p board.h.
 * @note    This function should be invoked just after the system reset.
 *
 * @special
 */
void stm32_clock_init(void) {
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8006cf0:	4b43      	ldr	r3, [pc, #268]	; (8006e00 <stm32_clock_init+0x114>)
 8006cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf6:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8006cf8:	4b42      	ldr	r3, [pc, #264]	; (8006e04 <stm32_clock_init+0x118>)
 8006cfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006cfe:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8006d00:	4a3f      	ldr	r2, [pc, #252]	; (8006e00 <stm32_clock_init+0x114>)
 8006d02:	4b3f      	ldr	r3, [pc, #252]	; (8006e00 <stm32_clock_init+0x114>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8006d0c:	4b3c      	ldr	r3, [pc, #240]	; (8006e00 <stm32_clock_init+0x114>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0f9      	beq.n	8006d0c <stm32_clock_init+0x20>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8006d18:	4a39      	ldr	r2, [pc, #228]	; (8006e00 <stm32_clock_init+0x114>)
 8006d1a:	4b39      	ldr	r3, [pc, #228]	; (8006e00 <stm32_clock_init+0x114>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f023 0303 	bic.w	r3, r3, #3
 8006d22:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8006d24:	4b36      	ldr	r3, [pc, #216]	; (8006e00 <stm32_clock_init+0x114>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 030c 	and.w	r3, r3, #12
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1f9      	bne.n	8006d24 <stm32_clock_init+0x38>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8006d30:	4a33      	ldr	r2, [pc, #204]	; (8006e00 <stm32_clock_init+0x114>)
 8006d32:	4b33      	ldr	r3, [pc, #204]	; (8006e00 <stm32_clock_init+0x114>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8006d3a:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8006d3c:	4b30      	ldr	r3, [pc, #192]	; (8006e00 <stm32_clock_init+0x114>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	609a      	str	r2, [r3, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8006d42:	4a2f      	ldr	r2, [pc, #188]	; (8006e00 <stm32_clock_init+0x114>)
 8006d44:	4b2e      	ldr	r3, [pc, #184]	; (8006e00 <stm32_clock_init+0x114>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d4c:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8006d4e:	4b2c      	ldr	r3, [pc, #176]	; (8006e00 <stm32_clock_init+0x114>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f9      	beq.n	8006d4e <stm32_clock_init+0x62>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8006d5a:	4a29      	ldr	r2, [pc, #164]	; (8006e00 <stm32_clock_init+0x114>)
 8006d5c:	4b28      	ldr	r3, [pc, #160]	; (8006e00 <stm32_clock_init+0x114>)
 8006d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d60:	f043 0301 	orr.w	r3, r3, #1
 8006d64:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8006d66:	4b26      	ldr	r3, [pc, #152]	; (8006e00 <stm32_clock_init+0x114>)
 8006d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0f9      	beq.n	8006d66 <stm32_clock_init+0x7a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8006d72:	4b23      	ldr	r3, [pc, #140]	; (8006e00 <stm32_clock_init+0x114>)
 8006d74:	4a24      	ldr	r2, [pc, #144]	; (8006e08 <stm32_clock_init+0x11c>)
 8006d76:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8006d78:	4a21      	ldr	r2, [pc, #132]	; (8006e00 <stm32_clock_init+0x114>)
 8006d7a:	4b21      	ldr	r3, [pc, #132]	; (8006e00 <stm32_clock_init+0x114>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d82:	6013      	str	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8006d84:	4b1f      	ldr	r3, [pc, #124]	; (8006e04 <stm32_clock_init+0x118>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0f9      	beq.n	8006d84 <stm32_clock_init+0x98>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8006d90:	4b1b      	ldr	r3, [pc, #108]	; (8006e00 <stm32_clock_init+0x114>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0f9      	beq.n	8006d90 <stm32_clock_init+0xa4>
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8006d9c:	4b18      	ldr	r3, [pc, #96]	; (8006e00 <stm32_clock_init+0x114>)
 8006d9e:	4a1b      	ldr	r2, [pc, #108]	; (8006e0c <stm32_clock_init+0x120>)
 8006da0:	609a      	str	r2, [r3, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8006da2:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <stm32_clock_init+0x124>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1b      	ldr	r2, [pc, #108]	; (8006e14 <stm32_clock_init+0x128>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d109      	bne.n	8006dc0 <stm32_clock_init+0xd4>
 8006dac:	4b1a      	ldr	r3, [pc, #104]	; (8006e18 <stm32_clock_init+0x12c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a1a      	ldr	r2, [pc, #104]	; (8006e1c <stm32_clock_init+0x130>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d104      	bne.n	8006dc0 <stm32_clock_init+0xd4>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8006db6:	4b1a      	ldr	r3, [pc, #104]	; (8006e20 <stm32_clock_init+0x134>)
 8006db8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	e003      	b.n	8006dc8 <stm32_clock_init+0xdc>
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8006dc0:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <stm32_clock_init+0x134>)
 8006dc2:	f240 7202 	movw	r2, #1794	; 0x702
 8006dc6:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8006dc8:	4a0d      	ldr	r2, [pc, #52]	; (8006e00 <stm32_clock_init+0x114>)
 8006dca:	4b0d      	ldr	r3, [pc, #52]	; (8006e00 <stm32_clock_init+0x114>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f043 0302 	orr.w	r3, r3, #2
 8006dd2:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8006dd4:	4b0a      	ldr	r3, [pc, #40]	; (8006e00 <stm32_clock_init+0x114>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f003 030c 	and.w	r3, r3, #12
 8006ddc:	2b08      	cmp	r3, #8
 8006dde:	d1f9      	bne.n	8006dd4 <stm32_clock_init+0xe8>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8006de0:	4a07      	ldr	r2, [pc, #28]	; (8006e00 <stm32_clock_init+0x114>)
 8006de2:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <stm32_clock_init+0x114>)
 8006de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dea:	6453      	str	r3, [r2, #68]	; 0x44
 8006dec:	4a04      	ldr	r2, [pc, #16]	; (8006e00 <stm32_clock_init+0x114>)
 8006dee:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <stm32_clock_init+0x114>)
 8006df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006df6:	6653      	str	r3, [r2, #100]	; 0x64
}
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	40023800 	.word	0x40023800
 8006e04:	40007000 	.word	0x40007000
 8006e08:	07415408 	.word	0x07415408
 8006e0c:	38881000 	.word	0x38881000
 8006e10:	e0042000 	.word	0xe0042000
 8006e14:	20006411 	.word	0x20006411
 8006e18:	e000ed00 	.word	0xe000ed00
 8006e1c:	410fc241 	.word	0x410fc241
 8006e20:	40023c00 	.word	0x40023c00

08006e24 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8006e2a:	4b0c      	ldr	r3, [pc, #48]	; (8006e5c <Vector6C+0x38>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006e32:	607b      	str	r3, [r7, #4]
  DMA1->LIFCR = flags << 0U;
 8006e34:	4a09      	ldr	r2, [pc, #36]	; (8006e5c <Vector6C+0x38>)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[0].dma_func)
 8006e3a:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <Vector6C+0x3c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d006      	beq.n	8006e50 <Vector6C+0x2c>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8006e42:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <Vector6C+0x3c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a06      	ldr	r2, [pc, #24]	; (8006e60 <Vector6C+0x3c>)
 8006e48:	6852      	ldr	r2, [r2, #4]
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8006e50:	f7fa f85a 	bl	8000f08 <_port_irq_epilogue>
}
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	40026000 	.word	0x40026000
 8006e60:	20000844 	.word	0x20000844

08006e64 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <Vector70+0x3c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	099b      	lsrs	r3, r3, #6
 8006e70:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006e74:	607b      	str	r3, [r7, #4]
  DMA1->LIFCR = flags << 6U;
 8006e76:	4a0a      	ldr	r2, [pc, #40]	; (8006ea0 <Vector70+0x3c>)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	019b      	lsls	r3, r3, #6
 8006e7c:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[1].dma_func)
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <Vector70+0x40>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d006      	beq.n	8006e94 <Vector70+0x30>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8006e86:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <Vector70+0x40>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	4a06      	ldr	r2, [pc, #24]	; (8006ea4 <Vector70+0x40>)
 8006e8c:	68d2      	ldr	r2, [r2, #12]
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	4610      	mov	r0, r2
 8006e92:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8006e94:	f7fa f838 	bl	8000f08 <_port_irq_epilogue>
}
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	40026000 	.word	0x40026000
 8006ea4:	20000844 	.word	0x20000844

08006ea8 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8006eae:	4b0d      	ldr	r3, [pc, #52]	; (8006ee4 <Vector74+0x3c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	0c1b      	lsrs	r3, r3, #16
 8006eb4:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006eb8:	607b      	str	r3, [r7, #4]
  DMA1->LIFCR = flags << 16U;
 8006eba:	4a0a      	ldr	r2, [pc, #40]	; (8006ee4 <Vector74+0x3c>)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	041b      	lsls	r3, r3, #16
 8006ec0:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[2].dma_func)
 8006ec2:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <Vector74+0x40>)
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d006      	beq.n	8006ed8 <Vector74+0x30>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8006eca:	4b07      	ldr	r3, [pc, #28]	; (8006ee8 <Vector74+0x40>)
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	4a06      	ldr	r2, [pc, #24]	; (8006ee8 <Vector74+0x40>)
 8006ed0:	6952      	ldr	r2, [r2, #20]
 8006ed2:	6879      	ldr	r1, [r7, #4]
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8006ed8:	f7fa f816 	bl	8000f08 <_port_irq_epilogue>
}
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	40026000 	.word	0x40026000
 8006ee8:	20000844 	.word	0x20000844

08006eec <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8006ef2:	4b0d      	ldr	r3, [pc, #52]	; (8006f28 <Vector78+0x3c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	0d9b      	lsrs	r3, r3, #22
 8006ef8:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006efc:	607b      	str	r3, [r7, #4]
  DMA1->LIFCR = flags << 22U;
 8006efe:	4a0a      	ldr	r2, [pc, #40]	; (8006f28 <Vector78+0x3c>)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	059b      	lsls	r3, r3, #22
 8006f04:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[3].dma_func)
 8006f06:	4b09      	ldr	r3, [pc, #36]	; (8006f2c <Vector78+0x40>)
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d006      	beq.n	8006f1c <Vector78+0x30>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8006f0e:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <Vector78+0x40>)
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	4a06      	ldr	r2, [pc, #24]	; (8006f2c <Vector78+0x40>)
 8006f14:	69d2      	ldr	r2, [r2, #28]
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	4610      	mov	r0, r2
 8006f1a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8006f1c:	f7f9 fff4 	bl	8000f08 <_port_irq_epilogue>
}
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	40026000 	.word	0x40026000
 8006f2c:	20000844 	.word	0x20000844

08006f30 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8006f36:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <Vector7C+0x38>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006f3e:	607b      	str	r3, [r7, #4]
  DMA1->HIFCR = flags << 0U;
 8006f40:	4a09      	ldr	r2, [pc, #36]	; (8006f68 <Vector7C+0x38>)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[4].dma_func)
 8006f46:	4b09      	ldr	r3, [pc, #36]	; (8006f6c <Vector7C+0x3c>)
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d006      	beq.n	8006f5c <Vector7C+0x2c>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8006f4e:	4b07      	ldr	r3, [pc, #28]	; (8006f6c <Vector7C+0x3c>)
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	4a06      	ldr	r2, [pc, #24]	; (8006f6c <Vector7C+0x3c>)
 8006f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4610      	mov	r0, r2
 8006f5a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8006f5c:	f7f9 ffd4 	bl	8000f08 <_port_irq_epilogue>
}
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	40026000 	.word	0x40026000
 8006f6c:	20000844 	.word	0x20000844

08006f70 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8006f76:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <Vector80+0x3c>)
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	099b      	lsrs	r3, r3, #6
 8006f7c:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006f80:	607b      	str	r3, [r7, #4]
  DMA1->HIFCR = flags << 6U;
 8006f82:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <Vector80+0x3c>)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	019b      	lsls	r3, r3, #6
 8006f88:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[5].dma_func)
 8006f8a:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <Vector80+0x40>)
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d006      	beq.n	8006fa0 <Vector80+0x30>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8006f92:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <Vector80+0x40>)
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	4a06      	ldr	r2, [pc, #24]	; (8006fb0 <Vector80+0x40>)
 8006f98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8006fa0:	f7f9 ffb2 	bl	8000f08 <_port_irq_epilogue>
}
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	40026000 	.word	0x40026000
 8006fb0:	20000844 	.word	0x20000844

08006fb4 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8006fba:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <Vector84+0x3c>)
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	0c1b      	lsrs	r3, r3, #16
 8006fc0:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006fc4:	607b      	str	r3, [r7, #4]
  DMA1->HIFCR = flags << 16U;
 8006fc6:	4a0a      	ldr	r2, [pc, #40]	; (8006ff0 <Vector84+0x3c>)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	041b      	lsls	r3, r3, #16
 8006fcc:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[6].dma_func)
 8006fce:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <Vector84+0x40>)
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d006      	beq.n	8006fe4 <Vector84+0x30>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8006fd6:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <Vector84+0x40>)
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	4a06      	ldr	r2, [pc, #24]	; (8006ff4 <Vector84+0x40>)
 8006fdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8006fe4:	f7f9 ff90 	bl	8000f08 <_port_irq_epilogue>
}
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	40026000 	.word	0x40026000
 8006ff4:	20000844 	.word	0x20000844

08006ff8 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8006ffe:	4b0d      	ldr	r3, [pc, #52]	; (8007034 <VectorFC+0x3c>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	0d9b      	lsrs	r3, r3, #22
 8007004:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8007008:	607b      	str	r3, [r7, #4]
  DMA1->HIFCR = flags << 22U;
 800700a:	4a0a      	ldr	r2, [pc, #40]	; (8007034 <VectorFC+0x3c>)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	059b      	lsls	r3, r3, #22
 8007010:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[7].dma_func)
 8007012:	4b09      	ldr	r3, [pc, #36]	; (8007038 <VectorFC+0x40>)
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	2b00      	cmp	r3, #0
 8007018:	d006      	beq.n	8007028 <VectorFC+0x30>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 800701a:	4b07      	ldr	r3, [pc, #28]	; (8007038 <VectorFC+0x40>)
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	4a06      	ldr	r2, [pc, #24]	; (8007038 <VectorFC+0x40>)
 8007020:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	4610      	mov	r0, r2
 8007026:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8007028:	f7f9 ff6e 	bl	8000f08 <_port_irq_epilogue>
}
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	40026000 	.word	0x40026000
 8007038:	20000844 	.word	0x20000844

0800703c <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint8_t b;

  osalSysLock();
 8007046:	f001 fcb0 	bl	80089aa <osalSysLock.lto_priv.213>
 800704a:	e00c      	b.n	8007066 <iqGetTimeout+0x2a>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	4618      	mov	r0, r3
 8007052:	f001 fcbe 	bl	80089d2 <osalThreadEnqueueTimeoutS.lto_priv.226>
 8007056:	60f8      	str	r0, [r7, #12]
    if (msg < MSG_OK) {
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	da03      	bge.n	8007066 <iqGetTimeout+0x2a>
      osalSysUnlock();
 800705e:	f001 fca9 	bl	80089b4 <osalSysUnlock.lto_priv.209>
      return msg;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	e024      	b.n	80070b0 <iqGetTimeout+0x74>
  while (iqIsEmptyI(iqp)) {
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0ee      	beq.n	800704c <iqGetTimeout+0x10>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	1e5a      	subs	r2, r3, #1
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	1c59      	adds	r1, r3, #1
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6191      	str	r1, [r2, #24]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	72fb      	strb	r3, [r7, #11]
  if (iqp->q_rdptr >= iqp->q_top) {
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	699a      	ldr	r2, [r3, #24]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	429a      	cmp	r2, r3
 8007090:	d303      	bcc.n	800709a <iqGetTimeout+0x5e>
    iqp->q_rdptr = iqp->q_buffer;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <iqGetTimeout+0x6e>
    iqp->q_notify(iqp);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4798      	blx	r3
  }

  osalSysUnlock();
 80070aa:	f001 fc83 	bl	80089b4 <osalSysUnlock.lto_priv.209>

  return (msg_t)b;
 80070ae:	7afb      	ldrb	r3, [r7, #11]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	603b      	str	r3, [r7, #0]
  qnotify_t nfy = iqp->q_notify;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	61bb      	str	r3, [r7, #24]
  size_t rd = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	61fb      	str	r3, [r7, #28]

  osalDbgCheck(n > 0U);

  osalSysLock();
 80070d0:	f001 fc6b 	bl	80089aa <osalSysLock.lto_priv.213>
 80070d4:	e024      	b.n	8007120 <iqReadTimeout+0x68>

  while (rd < n) {
    size_t done;

    done = iq_read(iqp, bp, n);
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	68b9      	ldr	r1, [r7, #8]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f001 fc93 	bl	8008a06 <iq_read.lto_priv.230>
 80070e0:	6178      	str	r0, [r7, #20]
    if (done == (size_t)0) {
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <iqReadTimeout+0x44>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f001 fc70 	bl	80089d2 <osalThreadEnqueueTimeoutS.lto_priv.226>
 80070f2:	6138      	str	r0, [r7, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d116      	bne.n	8007128 <iqReadTimeout+0x70>
 80070fa:	e011      	b.n	8007120 <iqReadTimeout+0x68>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <iqReadTimeout+0x50>
        nfy(iqp);
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8007108:	f001 fc54 	bl	80089b4 <osalSysUnlock.lto_priv.209>

      rd += done;
 800710c:	69fa      	ldr	r2, [r7, #28]
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	4413      	add	r3, r2
 8007112:	61fb      	str	r3, [r7, #28]
      bp += done;
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	4413      	add	r3, r2
 800711a:	60bb      	str	r3, [r7, #8]

      osalSysLock();
 800711c:	f001 fc45 	bl	80089aa <osalSysLock.lto_priv.213>
  while (rd < n) {
 8007120:	69fa      	ldr	r2, [r7, #28]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	429a      	cmp	r2, r3
 8007126:	d3d6      	bcc.n	80070d6 <iqReadTimeout+0x1e>
    }
  }

  osalSysUnlock();
 8007128:	f001 fc44 	bl	80089b4 <osalSysUnlock.lto_priv.209>
  return rd;
 800712c:	69fb      	ldr	r3, [r7, #28]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3720      	adds	r7, #32
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	607a      	str	r2, [r7, #4]
 8007142:	603b      	str	r3, [r7, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4618      	mov	r0, r3
 8007148:	f001 fc39 	bl	80089be <osalThreadQueueObjectInit.lto_priv.229>
  oqp->q_counter = size;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	441a      	add	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	460b      	mov	r3, r1
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	72fb      	strb	r3, [r7, #11]

  osalSysLock();
 800718e:	f001 fc0c 	bl	80089aa <osalSysLock.lto_priv.213>
 8007192:	e00c      	b.n	80071ae <oqPutTimeout+0x2e>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	4618      	mov	r0, r3
 800719a:	f001 fc1a 	bl	80089d2 <osalThreadEnqueueTimeoutS.lto_priv.226>
 800719e:	6178      	str	r0, [r7, #20]
    if (msg < MSG_OK) {
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	da03      	bge.n	80071ae <oqPutTimeout+0x2e>
      osalSysUnlock();
 80071a6:	f001 fc05 	bl	80089b4 <osalSysUnlock.lto_priv.209>
      return msg;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	e024      	b.n	80071f8 <oqPutTimeout+0x78>
  while (oqIsFullI(oqp)) {
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0ee      	beq.n	8007194 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	1e5a      	subs	r2, r3, #1
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	1c59      	adds	r1, r3, #1
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	6151      	str	r1, [r2, #20]
 80071ca:	7afa      	ldrb	r2, [r7, #11]
 80071cc:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	695a      	ldr	r2, [r3, #20]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d303      	bcc.n	80071e2 <oqPutTimeout+0x62>
    oqp->q_wrptr = oqp->q_buffer;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <oqPutTimeout+0x72>
    oqp->q_notify(oqp);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	4798      	blx	r3
  }

  osalSysUnlock();
 80071f2:	f001 fbdf 	bl	80089b4 <osalSysUnlock.lto_priv.209>

  return MSG_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	695a      	ldr	r2, [r3, #20]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	429a      	cmp	r2, r3
 8007212:	d105      	bne.n	8007220 <oqGetI+0x20>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <oqGetI+0x20>
 800721c:	2301      	movs	r3, #1
 800721e:	e000      	b.n	8007222 <oqGetI+0x22>
 8007220:	2300      	movs	r3, #0
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	b2db      	uxtb	r3, r3
 8007228:	f083 0301 	eor.w	r3, r3, #1
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01c      	beq.n	800726c <oqGetI+0x6c>
    uint8_t b;

    oqp->q_counter++;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	609a      	str	r2, [r3, #8]
    b = *oqp->q_rdptr++;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	1c59      	adds	r1, r3, #1
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6191      	str	r1, [r2, #24]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	73fb      	strb	r3, [r7, #15]
    if (oqp->q_rdptr >= oqp->q_top) {
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	429a      	cmp	r2, r3
 8007254:	d303      	bcc.n	800725e <oqGetI+0x5e>
      oqp->q_rdptr = oqp->q_buffer;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	619a      	str	r2, [r3, #24]
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2100      	movs	r1, #0
 8007262:	4618      	mov	r0, r3
 8007264:	f001 fbc3 	bl	80089ee <osalThreadDequeueNextI.lto_priv.228>

    return (msg_t)b;
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	e001      	b.n	8007270 <oqGetI+0x70>
  }

  return MSG_TIMEOUT;
 800726c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
  qnotify_t nfy = oqp->q_notify;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	61bb      	str	r3, [r7, #24]
  size_t wr = 0;
 800728c:	2300      	movs	r3, #0
 800728e:	61fb      	str	r3, [r7, #28]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8007290:	f001 fb8b 	bl	80089aa <osalSysLock.lto_priv.213>
 8007294:	e024      	b.n	80072e0 <oqWriteTimeout+0x68>

  while (wr < n) {
    size_t done;

    done = oq_write(oqp, bp, n);
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f001 fc11 	bl	8008ac2 <oq_write.lto_priv.227>
 80072a0:	6178      	str	r0, [r7, #20]
    if (done == (size_t)0) {
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d109      	bne.n	80072bc <oqWriteTimeout+0x44>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f001 fb90 	bl	80089d2 <osalThreadEnqueueTimeoutS.lto_priv.226>
 80072b2:	6138      	str	r0, [r7, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d116      	bne.n	80072e8 <oqWriteTimeout+0x70>
 80072ba:	e011      	b.n	80072e0 <oqWriteTimeout+0x68>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <oqWriteTimeout+0x50>
        nfy(oqp);
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 80072c8:	f001 fb74 	bl	80089b4 <osalSysUnlock.lto_priv.209>

      wr += done;
 80072cc:	69fa      	ldr	r2, [r7, #28]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	4413      	add	r3, r2
 80072d2:	61fb      	str	r3, [r7, #28]
      bp += done;
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	4413      	add	r3, r2
 80072da:	60bb      	str	r3, [r7, #8]

      osalSysLock();
 80072dc:	f001 fb65 	bl	80089aa <osalSysLock.lto_priv.213>
  while (wr < n) {
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d3d6      	bcc.n	8007296 <oqWriteTimeout+0x1e>
    }
  }

  osalSysUnlock();
 80072e8:	f001 fb64 	bl	80089b4 <osalSysUnlock.lto_priv.209>
  return wr;
 80072ec:	69fb      	ldr	r3, [r7, #28]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3720      	adds	r7, #32
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <chEvtObjectInit.lto_priv.224>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]

  esp->next = (event_listener_t *)esp;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	601a      	str	r2, [r3, #0]
}
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <osalEventObjectInit.lto_priv.220>:
static inline void osalEventObjectInit(event_source_t *esp) {
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  chEvtObjectInit(esp);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff ffed 	bl	80072f6 <chEvtObjectInit.lto_priv.224>
}
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <osalEventBroadcastFlagsI.lto_priv.218>:
                                            eventflags_t flags) {
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
  chEvtBroadcastFlagsI(esp, flags);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fb fa76 	bl	8002820 <chEvtBroadcastFlagsI>
}
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <_write.lto_priv.19>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800734c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	f7ff ff90 	bl	8007278 <oqWriteTimeout>
 8007358:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <_read.lto_priv.21>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8007362:	b580      	push	{r7, lr}
 8007364:	b084      	sub	sp, #16
 8007366:	af00      	add	r7, sp, #0
 8007368:	60f8      	str	r0, [r7, #12]
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	607a      	str	r2, [r7, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f103 000c 	add.w	r0, r3, #12
 8007374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	f7ff fe9c 	bl	80070b8 <iqReadTimeout>
 8007380:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <_put.lto_priv.15>:

static msg_t _put(void *ip, uint8_t b) {
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	460b      	mov	r3, r1
 8007394:	70fb      	strb	r3, [r7, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	3330      	adds	r3, #48	; 0x30
 800739a:	78f9      	ldrb	r1, [r7, #3]
 800739c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff feed 	bl	8007180 <oqPutTimeout>
 80073a6:	4603      	mov	r3, r0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <_get.lto_priv.12>:

static msg_t _get(void *ip) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	330c      	adds	r3, #12
 80073bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff fe3b 	bl	800703c <iqGetTimeout>
 80073c6:	4603      	mov	r3, r0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <_putt.lto_priv.23>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	460b      	mov	r3, r1
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	72fb      	strb	r3, [r7, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3330      	adds	r3, #48	; 0x30
 80073e2:	7af9      	ldrb	r1, [r7, #11]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff feca 	bl	8007180 <oqPutTimeout>
 80073ec:	4603      	mov	r3, r0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <_gett.lto_priv.25>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b082      	sub	sp, #8
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	330c      	adds	r3, #12
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff fe18 	bl	800703c <iqGetTimeout>
 800740c:	4603      	mov	r3, r0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <_writet.lto_priv.27>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
 8007422:	603b      	str	r3, [r7, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	68b9      	ldr	r1, [r7, #8]
 8007430:	f7ff ff22 	bl	8007278 <oqWriteTimeout>
 8007434:	4603      	mov	r3, r0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <_readt.lto_priv.29>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	607a      	str	r2, [r7, #4]
 800744a:	603b      	str	r3, [r7, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f103 000c 	add.w	r0, r3, #12
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	68b9      	ldr	r1, [r7, #8]
 8007458:	f7ff fe2e 	bl	80070b8 <iqReadTimeout>
 800745c:	4603      	mov	r3, r0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <_ctl.lto_priv.31>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8007466:	b480      	push	{r7}
 8007468:	b087      	sub	sp, #28
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]
  SerialDriver *sdp = (SerialDriver *)ip;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	617b      	str	r3, [r7, #20]

  osalDbgCheck(sdp != NULL);

  switch (operation) {
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d000      	beq.n	800747e <_ctl.lto_priv.31+0x18>
 800747c:	2b01      	cmp	r3, #1
    return sd_lld_control(sdp, operation, arg);
#else
    break;
#endif
  }
  return MSG_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0

  sd_lld_init();
 8007490:	f7fd f93c 	bl	800470c <sd_lld_init>
}
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af02      	add	r7, sp, #8
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]

  sdp->vmt = &vmt;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4a12      	ldr	r2, [pc, #72]	; (80074f0 <sdObjectInit+0x58>)
 80074a8:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3304      	adds	r3, #4
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff ff2d 	bl	800730e <osalEventObjectInit.lto_priv.220>
  sdp->state = SD_STOP;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2201      	movs	r2, #1
 80074b8:	721a      	strb	r2, [r3, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f103 000c 	add.w	r0, r3, #12
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2210      	movs	r2, #16
 80074ce:	f001 fb56 	bl	8008b7e <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f103 0164 	add.w	r1, r3, #100	; 0x64
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2210      	movs	r2, #16
 80074e6:	f7ff fe26 	bl	8007136 <oqObjectInit>
}
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	08008cec 	.word	0x08008cec

080074f4 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d105      	bne.n	8007514 <sdIncomingDataI+0x20>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3304      	adds	r3, #4
 800750c:	2104      	movs	r1, #4
 800750e:	4618      	mov	r0, r3
 8007510:	f7ff ff07 	bl	8007322 <osalEventBroadcastFlagsI.lto_priv.218>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	330c      	adds	r3, #12
 8007518:	78fa      	ldrb	r2, [r7, #3]
 800751a:	4611      	mov	r1, r2
 800751c:	4618      	mov	r0, r3
 800751e:	f001 fb53 	bl	8008bc8 <iqPutI>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	da06      	bge.n	8007536 <sdIncomingDataI+0x42>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3304      	adds	r3, #4
 800752c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007530:	4618      	mov	r0, r3
 8007532:	f7ff fef6 	bl	8007322 <osalEventBroadcastFlagsI.lto_priv.218>
}
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <port_lock.lto_priv.203>:
static inline void port_lock(void) {
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	2320      	movs	r3, #32
 8007544:	607b      	str	r3, [r7, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f383 8811 	msr	BASEPRI, r3
}
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <port_unlock.lto_priv.199>:
static inline void port_unlock(void) {
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	2300      	movs	r3, #0
 800755e:	607b      	str	r3, [r7, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f383 8811 	msr	BASEPRI, r3
}
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <port_lock_from_isr>:
static inline void port_lock_from_isr(void) {
 8007570:	b580      	push	{r7, lr}
 8007572:	af00      	add	r7, sp, #0
  port_lock();
 8007574:	f7ff ffe2 	bl	800753c <port_lock.lto_priv.203>
}
 8007578:	bd80      	pop	{r7, pc}

0800757a <port_unlock_from_isr>:
static inline void port_unlock_from_isr(void) {
 800757a:	b580      	push	{r7, lr}
 800757c:	af00      	add	r7, sp, #0
  port_unlock();
 800757e:	f7ff ffea 	bl	8007556 <port_unlock.lto_priv.199>
}
 8007582:	bd80      	pop	{r7, pc}

08007584 <chSysLock.lto_priv.195>:
static inline void chSysLock(void) {
 8007584:	b580      	push	{r7, lr}
 8007586:	af00      	add	r7, sp, #0
  port_lock();
 8007588:	f7ff ffd8 	bl	800753c <port_lock.lto_priv.203>
}
 800758c:	bd80      	pop	{r7, pc}

0800758e <chSysUnlock.lto_priv.191>:
static inline void chSysUnlock(void) {
 800758e:	b580      	push	{r7, lr}
 8007590:	af00      	add	r7, sp, #0
  port_unlock();
 8007592:	f7ff ffe0 	bl	8007556 <port_unlock.lto_priv.199>
}
 8007596:	bd80      	pop	{r7, pc}

08007598 <chSysLockFromISR>:
static inline void chSysLockFromISR(void) {
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 800759c:	f7ff ffe8 	bl	8007570 <port_lock_from_isr>
}
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <chSysUnlockFromISR>:
static inline void chSysUnlockFromISR(void) {
 80075a2:	b580      	push	{r7, lr}
 80075a4:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 80075a6:	f7ff ffe8 	bl	800757a <port_unlock_from_isr>
}
 80075aa:	bd80      	pop	{r7, pc}

080075ac <chEvtObjectInit.lto_priv.225>:
static inline void chEvtObjectInit(event_source_t *esp) {
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  esp->next = (event_listener_t *)esp;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	601a      	str	r2, [r3, #0]
}
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <osalSysLock.lto_priv.215>:
static inline void osalSysLock(void) {
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
  chSysLock();
 80075c8:	f7ff ffdc 	bl	8007584 <chSysLock.lto_priv.195>
}
 80075cc:	bd80      	pop	{r7, pc}

080075ce <osalSysUnlock.lto_priv.211>:
static inline void osalSysUnlock(void) {
 80075ce:	b580      	push	{r7, lr}
 80075d0:	af00      	add	r7, sp, #0
  chSysUnlock();
 80075d2:	f7ff ffdc 	bl	800758e <chSysUnlock.lto_priv.191>
}
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <osalSysLockFromISR>:
static inline void osalSysLockFromISR(void) {
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  chSysLockFromISR();
 80075dc:	f7ff ffdc 	bl	8007598 <chSysLockFromISR>
}
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <osalSysUnlockFromISR>:
static inline void osalSysUnlockFromISR(void) {
 80075e2:	b580      	push	{r7, lr}
 80075e4:	af00      	add	r7, sp, #0
  chSysUnlockFromISR();
 80075e6:	f7ff ffdc 	bl	80075a2 <chSysUnlockFromISR>
}
 80075ea:	bd80      	pop	{r7, pc}

080075ec <osalThreadDequeueAllI.lto_priv.223>:
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  chThdDequeueAllI(tqp, msg);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7fb fadf 	bl	8002bbc <chThdDequeueAllI>
}
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <osalEventObjectInit.lto_priv.221>:
static inline void osalEventObjectInit(event_source_t *esp) {
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  chEvtObjectInit(esp);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7ff ffcd 	bl	80075ac <chEvtObjectInit.lto_priv.225>
}
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <osalEventBroadcastFlagsI.lto_priv.219>:
                                            eventflags_t flags) {
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7fb f8fb 	bl	8002820 <chEvtBroadcastFlagsI>
}
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <sdu_start_receive>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static bool sdu_start_receive(SerialUSBDriver *sdup) {
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  uint8_t *buf;

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	2b04      	cmp	r3, #4
 8007644:	d103      	bne.n	800764e <sdu_start_receive+0x1e>
      (sdup->state != SDU_READY)) {
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	7a1b      	ldrb	r3, [r3, #8]
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800764a:	2b02      	cmp	r3, #2
 800764c:	d001      	beq.n	8007652 <sdu_start_receive+0x22>
    return true;
 800764e:	2301      	movs	r3, #1
 8007650:	e02b      	b.n	80076aa <sdu_start_receive+0x7a>
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	895a      	ldrh	r2, [r3, #10]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007662:	791b      	ldrb	r3, [r3, #4]
 8007664:	4619      	mov	r1, r3
 8007666:	2301      	movs	r3, #1
 8007668:	408b      	lsls	r3, r1
 800766a:	b29b      	uxth	r3, r3
 800766c:	4013      	ands	r3, r2
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <sdu_start_receive+0x48>
    return true;
 8007674:	2301      	movs	r3, #1
 8007676:	e018      	b.n	80076aa <sdu_start_receive+0x7a>
  }

  /* Checking if there is a buffer ready for incoming data.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	330c      	adds	r3, #12
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fdde 	bl	800823e <ibqGetEmptyBufferI>
 8007682:	60f8      	str	r0, [r7, #12]
  if (buf == NULL) {
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <sdu_start_receive+0x5e>
    return true;
 800768a:	2301      	movs	r3, #1
 800768c:	e00d      	b.n	80076aa <sdu_start_receive+0x7a>
  }

  /* Buffer found, starting a new transaction.*/
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800769c:	7959      	ldrb	r1, [r3, #5]
 800769e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	f7fe ffef 	bl	8006686 <usbStartReceiveI>
                   buf, SERIAL_USB_BUFFERS_SIZE);

  return false;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <_write.lto_priv.20>:

/*
 * Interface implementation.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80076c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	68b9      	ldr	r1, [r7, #8]
 80076cc:	f001 f84c 	bl	8008768 <obqWriteTimeout>
 80076d0:	4603      	mov	r3, r0
                         n, TIME_INFINITE);
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <_read.lto_priv.22>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	607a      	str	r2, [r7, #4]

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f103 000c 	add.w	r0, r3, #12
 80076ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	f000 fe71 	bl	80083da <ibqReadTimeout>
 80076f8:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <_put.lto_priv.16>:

static msg_t _put(void *ip, uint8_t b) {
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	460b      	mov	r3, r1
 800770c:	70fb      	strb	r3, [r7, #3]

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	3344      	adds	r3, #68	; 0x44
 8007712:	78f9      	ldrb	r1, [r7, #3]
 8007714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007718:	4618      	mov	r0, r3
 800771a:	f000 ffef 	bl	80086fc <obqPutTimeout>
 800771e:	4603      	mov	r3, r0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <_get.lto_priv.13>:

static msg_t _get(void *ip) {
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	330c      	adds	r3, #12
 8007734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007738:	4618      	mov	r0, r3
 800773a:	f000 fe1e 	bl	800837a <ibqGetTimeout>
 800773e:	4603      	mov	r3, r0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <_putt.lto_priv.24>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	460b      	mov	r3, r1
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	72fb      	strb	r3, [r7, #11]

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3344      	adds	r3, #68	; 0x44
 800775a:	7af9      	ldrb	r1, [r7, #11]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	4618      	mov	r0, r3
 8007760:	f000 ffcc 	bl	80086fc <obqPutTimeout>
 8007764:	4603      	mov	r3, r0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <_gett.lto_priv.26>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	330c      	adds	r3, #12
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fdfb 	bl	800837a <ibqGetTimeout>
 8007784:	4603      	mov	r3, r0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <_writet.lto_priv.28>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	607a      	str	r2, [r7, #4]
 800779a:	603b      	str	r3, [r7, #0]

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	f000 ffde 	bl	8008768 <obqWriteTimeout>
 80077ac:	4603      	mov	r3, r0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <_readt.lto_priv.30>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	607a      	str	r2, [r7, #4]
 80077c2:	603b      	str	r3, [r7, #0]

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f103 000c 	add.w	r0, r3, #12
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	68b9      	ldr	r1, [r7, #8]
 80077d0:	f000 fe03 	bl	80083da <ibqReadTimeout>
 80077d4:	4603      	mov	r3, r0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <_ctl.lto_priv.32>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 80077de:	b480      	push	{r7}
 80077e0:	b087      	sub	sp, #28
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
  SerialUSBDriver *sdup = (SerialUSBDriver *)ip;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	617b      	str	r3, [r7, #20]

  osalDbgCheck(sdup != NULL);

  switch (operation) {
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d000      	beq.n	80077f6 <_ctl.lto_priv.32+0x18>
 80077f4:	2b01      	cmp	r3, #1
    return sdu_lld_control(sdup, operation, arg);
#else
    break;
#endif
  }
  return MSG_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <ibnotify>:
/**
 * @brief   Notification of empty buffer released into the input buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void ibnotify(io_buffers_queue_t *bqp) {
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007810:	60fb      	str	r3, [r7, #12]
  (void) sdu_start_receive(sdup);
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7ff ff0c 	bl	8007630 <sdu_start_receive>
}
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <obnotify>:
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 800781e:	b580      	push	{r7, lr}
 8007820:	b086      	sub	sp, #24
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782a:	617b      	str	r3, [r7, #20]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2b04      	cmp	r3, #4
 8007838:	d12d      	bne.n	8007896 <obnotify+0x78>
      (sdup->state != SDU_READY)) {
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	7a1b      	ldrb	r3, [r3, #8]
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800783e:	2b02      	cmp	r3, #2
 8007840:	d129      	bne.n	8007896 <obnotify+0x78>
    return;
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	891a      	ldrh	r2, [r3, #8]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007852:	791b      	ldrb	r3, [r3, #4]
 8007854:	4619      	mov	r1, r3
 8007856:	2301      	movs	r3, #1
 8007858:	408b      	lsls	r3, r1
 800785a:	b29b      	uxth	r3, r3
 800785c:	4013      	ands	r3, r2
 800785e:	b29b      	uxth	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d119      	bne.n	8007898 <obnotify+0x7a>
    /* Trying to get a full buffer.*/
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	3344      	adds	r3, #68	; 0x44
 8007868:	f107 020c 	add.w	r2, r7, #12
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fea1 	bl	80085b6 <obqGetFullBufferI>
 8007874:	6138      	str	r0, [r7, #16]
    if (buf != NULL) {
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00d      	beq.n	8007898 <obnotify+0x7a>
      /* Buffer found, starting a new transaction.*/
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800788a:	7919      	ldrb	r1, [r3, #4]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	f7fe ff25 	bl	80066de <usbStartTransmitI>
 8007894:	e000      	b.n	8007898 <obnotify+0x7a>
    return;
 8007896:	bf00      	nop
    }
  }
}
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <sduInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
 800789e:	b480      	push	{r7}
 80078a0:	af00      	add	r7, sp, #0
}
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
	...

080078ac <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af04      	add	r7, sp, #16
 80078b2:	6078      	str	r0, [r7, #4]

  sdup->vmt = &vmt;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a17      	ldr	r2, [pc, #92]	; (8007914 <sduObjectInit+0x68>)
 80078b8:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdup->event);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3304      	adds	r3, #4
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff fea0 	bl	8007604 <osalEventObjectInit.lto_priv.221>
  sdup->state = SDU_STOP;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	721a      	strb	r2, [r3, #8]
  ibqObjectInit(&sdup->ibqueue, true, sdup->ib,
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f103 000c 	add.w	r0, r3, #12
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	9302      	str	r3, [sp, #8]
 80078da:	4b0f      	ldr	r3, [pc, #60]	; (8007918 <sduObjectInit+0x6c>)
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	2302      	movs	r3, #2
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078e6:	2101      	movs	r1, #1
 80078e8:	f000 fc51 	bl	800818e <ibqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                ibnotify, sdup);
  obqObjectInit(&sdup->obqueue, true, sdup->ob,
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f503 7221 	add.w	r2, r3, #644	; 0x284
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	9302      	str	r3, [sp, #8]
 80078fc:	4b07      	ldr	r3, [pc, #28]	; (800791c <sduObjectInit+0x70>)
 80078fe:	9301      	str	r3, [sp, #4]
 8007900:	2302      	movs	r3, #2
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007908:	2101      	movs	r1, #1
 800790a:	f000 fdfb 	bl	8008504 <obqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                obnotify, sdup);
}
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	08008d14 	.word	0x08008d14
 8007918:	08007805 	.word	0x08007805
 800791c:	0800781f 	.word	0x0800781f

08007920 <sduStart>:
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  USBDriver *usbp = config->usbp;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	60fb      	str	r3, [r7, #12]

  osalDbgCheck(sdup != NULL);

  osalSysLock();
 8007930:	f7ff fe48 	bl	80075c4 <osalSysLock.lto_priv.215>
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	791b      	ldrb	r3, [r3, #4]
 8007938:	3b01      	subs	r3, #1
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	3306      	adds	r3, #6
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	605a      	str	r2, [r3, #4]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	795b      	ldrb	r3, [r3, #5]
 800794a:	1e5a      	subs	r2, r3, #1
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	320a      	adds	r2, #10
 8007950:	6879      	ldr	r1, [r7, #4]
 8007952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	799b      	ldrb	r3, [r3, #6]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d008      	beq.n	8007970 <sduStart+0x50>
    usbp->in_params[config->int_in - 1U]  = sdup;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	799b      	ldrb	r3, [r3, #6]
 8007962:	3b01      	subs	r3, #1
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	3306      	adds	r3, #6
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	605a      	str	r2, [r3, #4]
  }
  sdup->config = config;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
  sdup->state = SDU_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	721a      	strb	r2, [r3, #8]
  osalSysUnlock();
 800797e:	f7ff fe26 	bl	80075ce <osalSysUnlock.lto_priv.211>
}
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <sduSuspendHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSuspendHookI(SerialUSBDriver *sdup) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]

  chnAddFlagsI(sdup, CHN_DISCONNECTED);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3304      	adds	r3, #4
 8007994:	2102      	movs	r1, #2
 8007996:	4618      	mov	r0, r3
 8007998:	f7ff fe3e 	bl	8007618 <osalEventBroadcastFlagsI.lto_priv.219>
  bqSuspendI(&sdup->ibqueue);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	751a      	strb	r2, [r3, #20]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	330c      	adds	r3, #12
 80079a6:	f06f 0101 	mvn.w	r1, #1
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7ff fe1e 	bl	80075ec <osalThreadDequeueAllI.lto_priv.223>
  bqSuspendI(&sdup->obqueue);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3344      	adds	r3, #68	; 0x44
 80079bc:	f06f 0101 	mvn.w	r1, #1
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff fe13 	bl	80075ec <osalThreadDequeueAllI.lto_priv.223>
}
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <sduWakeupHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduWakeupHookI(SerialUSBDriver *sdup) {
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]

  chnAddFlagsI(sdup, CHN_CONNECTED);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3304      	adds	r3, #4
 80079d8:	2101      	movs	r1, #1
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff fe1c 	bl	8007618 <osalEventBroadcastFlagsI.lto_priv.219>
  bqResumeX(&sdup->ibqueue);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	751a      	strb	r2, [r3, #20]
  bqResumeX(&sdup->obqueue);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]

  ibqResetI(&sdup->ibqueue);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	330c      	adds	r3, #12
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 fbfe 	bl	8008202 <ibqResetI>
  bqResumeX(&sdup->ibqueue);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	751a      	strb	r2, [r3, #20]
  obqResetI(&sdup->obqueue);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3344      	adds	r3, #68	; 0x44
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fdb1 	bl	8008578 <obqResetI>
  bqResumeX(&sdup->obqueue);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  chnAddFlagsI(sdup, CHN_CONNECTED);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	3304      	adds	r3, #4
 8007a22:	2101      	movs	r1, #1
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff fdf7 	bl	8007618 <osalEventBroadcastFlagsI.lto_priv.219>
  (void) sdu_start_receive(sdup);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff fe00 	bl	8007630 <sdu_start_receive>
}
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
	...

08007a38 <sduRequestsHook>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @return              The hook status.
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d12c      	bne.n	8007aa8 <sduRequestsHook+0x70>
    switch (usbp->setup[1]) {
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a54:	2b21      	cmp	r3, #33	; 0x21
 8007a56:	d004      	beq.n	8007a62 <sduRequestsHook+0x2a>
 8007a58:	2b22      	cmp	r3, #34	; 0x22
 8007a5a:	d018      	beq.n	8007a8e <sduRequestsHook+0x56>
 8007a5c:	2b20      	cmp	r3, #32
 8007a5e:	d00b      	beq.n	8007a78 <sduRequestsHook+0x40>
 8007a60:	e020      	b.n	8007aa4 <sduRequestsHook+0x6c>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a14      	ldr	r2, [pc, #80]	; (8007ab8 <sduRequestsHook+0x80>)
 8007a66:	639a      	str	r2, [r3, #56]	; 0x38
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2207      	movs	r2, #7
 8007a6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e018      	b.n	8007aaa <sduRequestsHook+0x72>
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a0f      	ldr	r2, [pc, #60]	; (8007ab8 <sduRequestsHook+0x80>)
 8007a7c:	639a      	str	r2, [r3, #56]	; 0x38
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2207      	movs	r2, #7
 8007a82:	63da      	str	r2, [r3, #60]	; 0x3c
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e00d      	b.n	8007aaa <sduRequestsHook+0x72>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	639a      	str	r2, [r3, #56]	; 0x38
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	63da      	str	r2, [r3, #60]	; 0x3c
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e002      	b.n	8007aaa <sduRequestsHook+0x72>
    default:
      return false;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	e000      	b.n	8007aaa <sduRequestsHook+0x72>
    }
  }
  return false;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	20000800 	.word	0x20000800

08007abc <sduSOFHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSOFHookI(SerialUSBDriver *sdup) {
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d131      	bne.n	8007b36 <sduSOFHookI+0x7a>
      (sdup->state != SDU_READY)) {
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	7a1b      	ldrb	r3, [r3, #8]
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d12d      	bne.n	8007b36 <sduSOFHookI+0x7a>
    return;
  }

  /* If there is already a transaction ongoing then another one cannot be
     started.*/
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	891a      	ldrh	r2, [r3, #8]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007aea:	791b      	ldrb	r3, [r3, #4]
 8007aec:	4619      	mov	r1, r3
 8007aee:	2301      	movs	r3, #1
 8007af0:	408b      	lsls	r3, r1
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	4013      	ands	r3, r2
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d11c      	bne.n	8007b36 <sduSOFHookI+0x7a>
    return;
  }

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3344      	adds	r3, #68	; 0x44
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 feca 	bl	800889a <obqTryFlushI>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d014      	beq.n	8007b36 <sduSOFHookI+0x7a>
    size_t n;
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3344      	adds	r3, #68	; 0x44
 8007b10:	f107 0208 	add.w	r2, r7, #8
 8007b14:	4611      	mov	r1, r2
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 fd4d 	bl	80085b6 <obqGetFullBufferI>
 8007b1c:	60f8      	str	r0, [r7, #12]

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007b2c:	7919      	ldrb	r1, [r3, #4]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	f7fe fdd4 	bl	80066de <usbStartTransmitI>
  }
}
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	460b      	mov	r3, r1
 8007b46:	70fb      	strb	r3, [r7, #3]
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	3306      	adds	r3, #6
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	617b      	str	r3, [r7, #20]

  if (sdup == NULL) {
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d051      	beq.n	8007c02 <sduDataTransmitted+0xc6>
    return;
  }

  osalSysLockFromISR();
 8007b5e:	f7ff fd3b 	bl	80075d8 <osalSysLockFromISR>

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	3304      	adds	r3, #4
 8007b66:	2108      	movs	r1, #8
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7ff fd55 	bl	8007618 <osalEventBroadcastFlagsI.lto_priv.219>

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8007b6e:	78fb      	ldrb	r3, [r7, #3]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	3302      	adds	r3, #2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <sduDataTransmitted+0x50>
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	3344      	adds	r3, #68	; 0x44
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 fd3c 	bl	8008604 <obqReleaseEmptyBufferI>
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	3344      	adds	r3, #68	; 0x44
 8007b90:	f107 020c 	add.w	r2, r7, #12
 8007b94:	4611      	mov	r1, r2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 fd0d 	bl	80085b6 <obqGetFullBufferI>
 8007b9c:	6138      	str	r0, [r7, #16]

  if (buf != NULL) {
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d006      	beq.n	8007bb2 <sduDataTransmitted+0x76>
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	78f9      	ldrb	r1, [r7, #3]
 8007ba8:	693a      	ldr	r2, [r7, #16]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7fe fd97 	bl	80066de <usbStartTransmitI>
 8007bb0:	e024      	b.n	8007bfc <sduDataTransmitted+0xc0>
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8007bb2:	78fb      	ldrb	r3, [r7, #3]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	3302      	adds	r3, #2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d01a      	beq.n	8007bfc <sduDataTransmitted+0xc0>
           ((usbp->epc[ep]->in_state->txsize &
 8007bc6:	78fb      	ldrb	r3, [r7, #3]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	3302      	adds	r3, #2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	681a      	ldr	r2, [r3, #0]
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8007bd6:	78fb      	ldrb	r3, [r7, #3]
 8007bd8:	6879      	ldr	r1, [r7, #4]
 8007bda:	3302      	adds	r3, #2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	440b      	add	r3, r1
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	8a1b      	ldrh	r3, [r3, #16]
 8007be4:	3b01      	subs	r3, #1
           ((usbp->epc[ep]->in_state->txsize &
 8007be6:	4013      	ands	r3, r2
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d107      	bne.n	8007bfc <sduDataTransmitted+0xc0>
    /* Transmit zero sized packet in case the last one has maximum allowed
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8007bf2:	78f9      	ldrb	r1, [r7, #3]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7fe fd71 	bl	80066de <usbStartTransmitI>
  }
  else {
    /* Nothing to transmit.*/
  }

  osalSysUnlockFromISR();
 8007bfc:	f7ff fcf1 	bl	80075e2 <osalSysUnlockFromISR>
 8007c00:	e000      	b.n	8007c04 <sduDataTransmitted+0xc8>
    return;
 8007c02:	bf00      	nop
}
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <sduDataReceived>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	460b      	mov	r3, r1
 8007c14:	70fb      	strb	r3, [r7, #3]
  size_t size;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8007c16:	78fb      	ldrb	r3, [r7, #3]
 8007c18:	1e5a      	subs	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	320a      	adds	r2, #10
 8007c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c22:	60fb      	str	r3, [r7, #12]

  if (sdup == NULL) {
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d024      	beq.n	8007c74 <sduDataReceived+0x6a>
    return;
  }

  osalSysLockFromISR();
 8007c2a:	f7ff fcd5 	bl	80075d8 <osalSysLockFromISR>

  /* Checking for zero-size transactions.*/
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007c3c:	795b      	ldrb	r3, [r3, #5]
 8007c3e:	3302      	adds	r3, #2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	60bb      	str	r3, [r7, #8]
                                       sdup->config->bulk_out);
  if (size > (size_t)0) {
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00b      	beq.n	8007c6a <sduDataReceived+0x60>
    /* Signaling that data is available in the input queue.*/
    chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3304      	adds	r3, #4
 8007c56:	2104      	movs	r1, #4
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7ff fcdd 	bl	8007618 <osalEventBroadcastFlagsI.lto_priv.219>

    /* Posting the filled buffer in the queue.*/
    ibqPostFullBufferI(&sdup->ibqueue, size);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	330c      	adds	r3, #12
 8007c62:	68b9      	ldr	r1, [r7, #8]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fb0b 	bl	8008280 <ibqPostFullBufferI>
  }

  /* The endpoint cannot be busy, we are in the context of the callback,
     so a packet is in the buffer for sure. Trying to get a free buffer
     for the next transaction.*/
  (void) sdu_start_receive(sdup);
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f7ff fce0 	bl	8007630 <sdu_start_receive>

  osalSysUnlockFromISR();
 8007c70:	f7ff fcb7 	bl	80075e2 <osalSysUnlockFromISR>
}
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	460b      	mov	r3, r1
 8007c84:	70fb      	strb	r3, [r7, #3]

  (void)usbp;
  (void)ep;
}
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <port_lock.lto_priv.204>:
static inline void port_lock(void) {
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	2320      	movs	r3, #32
 8007c98:	607b      	str	r3, [r7, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f383 8811 	msr	BASEPRI, r3
}
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <port_unlock.lto_priv.200>:
static inline void port_unlock(void) {
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	607b      	str	r3, [r7, #4]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f383 8811 	msr	BASEPRI, r3
}
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <chSysLock.lto_priv.196>:
static inline void chSysLock(void) {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  port_lock();
 8007cc8:	f7ff ffe2 	bl	8007c90 <port_lock.lto_priv.204>
}
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <chSysUnlock.lto_priv.192>:
static inline void chSysUnlock(void) {
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	af00      	add	r7, sp, #0
  port_unlock();
 8007cd2:	f7ff ffea 	bl	8007caa <port_unlock.lto_priv.200>
}
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <osalSysLock.lto_priv.216>:
static inline void osalSysLock(void) {
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  chSysLock();
 8007cdc:	f7ff fff2 	bl	8007cc4 <chSysLock.lto_priv.196>
}
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <osalSysUnlock.lto_priv.212>:
static inline void osalSysUnlock(void) {
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	af00      	add	r7, sp, #0
  chSysUnlock();
 8007ce6:	f7ff fff2 	bl	8007cce <chSysUnlock.lto_priv.192>
}
 8007cea:	bd80      	pop	{r7, pc}

08007cec <osalThreadSuspendS>:
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 8007cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7fa fefb 	bl	8002af4 <chThdSuspendTimeoutS>
 8007cfe:	4603      	mov	r3, r0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <osalMutexObjectInit>:
 *
 * @param[out] mp       pointer to the @p mutex_t object
 *
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7fa fd77 	bl	8002804 <chMtxObjectInit>
#elif CH_CFG_USE_SEMAPHORES
  chSemObjectInit((semaphore_t *)mp, 1);
#else
 *mp = 0;
#endif
}
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <spiInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void spiInit(void) {
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	af00      	add	r7, sp, #0

  spi_lld_init();
 8007d20:	f7fc f9bc 	bl	800409c <spi_lld_init>
}
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <spiObjectInit>:
 *
 * @param[out] spip     pointer to the @p SPIDriver object
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]

  spip->state = SPI_STOP;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	701a      	strb	r2, [r3, #0]
  spip->config = NULL;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	605a      	str	r2, [r3, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	609a      	str	r2, [r3, #8]
#endif
#if SPI_USE_MUTUAL_EXCLUSION == TRUE
  osalMutexObjectInit(&spip->mutex);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	330c      	adds	r3, #12
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff ffdf 	bl	8007d08 <osalMutexObjectInit>
#endif
#if defined(SPI_DRIVER_EXT_INIT_HOOK)
  SPI_DRIVER_EXT_INIT_HOOK(spip);
#endif
}
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]

  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
 8007d5a:	f7ff ffbd 	bl	8007cd8 <osalSysLock.lto_priv.216>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	605a      	str	r2, [r3, #4]
  spi_lld_start(spip);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7fc f9bb 	bl	80040e0 <spi_lld_start>
  spip->state = SPI_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	701a      	strb	r2, [r3, #0]
  osalSysUnlock();
 8007d70:	f7ff ffb7 	bl	8007ce2 <osalSysUnlock.lto_priv.212>
}
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <spiSelect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]

  osalDbgCheck(spip != NULL);

  osalSysLock();
 8007d82:	f7ff ffa9 	bl	8007cd8 <osalSysLock.lto_priv.216>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiSelectI(spip);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6852      	ldr	r2, [r2, #4]
 8007d90:	68d2      	ldr	r2, [r2, #12]
 8007d92:	2101      	movs	r1, #1
 8007d94:	fa01 f202 	lsl.w	r2, r1, r2
 8007d98:	b292      	uxth	r2, r2
 8007d9a:	835a      	strh	r2, [r3, #26]
  osalSysUnlock();
 8007d9c:	f7ff ffa1 	bl	8007ce2 <osalSysUnlock.lto_priv.212>
}
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <spiUnselect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]

  osalDbgCheck(spip != NULL);

  osalSysLock();
 8007dae:	f7ff ff93 	bl	8007cd8 <osalSysLock.lto_priv.216>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	6852      	ldr	r2, [r2, #4]
 8007dbc:	68d2      	ldr	r2, [r2, #12]
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8007dc4:	b292      	uxth	r2, r2
 8007dc6:	831a      	strh	r2, [r3, #24]
  osalSysUnlock();
 8007dc8:	f7ff ff8b 	bl	8007ce2 <osalSysUnlock.lto_priv.212>
}
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <spiSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	607a      	str	r2, [r7, #4]
  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
 8007dde:	f7ff ff7b 	bl	8007cd8 <osalSysLock.lto_priv.216>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartSendI(spip, n, txbuf);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2203      	movs	r2, #3
 8007de6:	701a      	strb	r2, [r3, #0]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	68b9      	ldr	r1, [r7, #8]
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7fc fa1f 	bl	8004230 <spi_lld_send>
  (void) osalThreadSuspendS(&spip->thread);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3308      	adds	r3, #8
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7ff ff78 	bl	8007cec <osalThreadSuspendS>
  osalSysUnlock();
 8007dfc:	f7ff ff71 	bl	8007ce2 <osalSysUnlock.lto_priv.212>
}
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <spiReceive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	60f8      	str	r0, [r7, #12]
 8007e0e:	60b9      	str	r1, [r7, #8]
 8007e10:	607a      	str	r2, [r7, #4]
  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
 8007e12:	f7ff ff61 	bl	8007cd8 <osalSysLock.lto_priv.216>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartReceiveI(spip, n, rxbuf);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2203      	movs	r2, #3
 8007e1a:	701a      	strb	r2, [r3, #0]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	68b9      	ldr	r1, [r7, #8]
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f7fc fa49 	bl	80042b8 <spi_lld_receive>
  (void) osalThreadSuspendS(&spip->thread);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3308      	adds	r3, #8
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7ff ff5e 	bl	8007cec <osalThreadSuspendS>
  osalSysUnlock();
 8007e30:	f7ff ff57 	bl	8007ce2 <osalSysUnlock.lto_priv.212>
}
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <port_lock.lto_priv.205>:
static inline void port_lock(void) {
 8007e3a:	b480      	push	{r7}
 8007e3c:	b083      	sub	sp, #12
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	2320      	movs	r3, #32
 8007e42:	607b      	str	r3, [r7, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f383 8811 	msr	BASEPRI, r3
}
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <port_unlock.lto_priv.201>:
static inline void port_unlock(void) {
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	607b      	str	r3, [r7, #4]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f383 8811 	msr	BASEPRI, r3
}
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <chSysLock.lto_priv.197>:
static inline void chSysLock(void) {
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	af00      	add	r7, sp, #0
  port_lock();
 8007e72:	f7ff ffe2 	bl	8007e3a <port_lock.lto_priv.205>
}
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <chSysUnlock.lto_priv.193>:
static inline void chSysUnlock(void) {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
  port_unlock();
 8007e7c:	f7ff ffea 	bl	8007e54 <port_unlock.lto_priv.201>
}
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <osalSysLock.lto_priv.188>:
static inline void osalSysLock(void) {
 8007e82:	b580      	push	{r7, lr}
 8007e84:	af00      	add	r7, sp, #0
  chSysLock();
 8007e86:	f7ff fff2 	bl	8007e6e <chSysLock.lto_priv.197>
}
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <osalSysUnlock.lto_priv.186>:
static inline void osalSysUnlock(void) {
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	af00      	add	r7, sp, #0
  chSysUnlock();
 8007e90:	f7ff fff2 	bl	8007e78 <chSysUnlock.lto_priv.193>
}
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8007e96:	b480      	push	{r7}
 8007e98:	af00      	add	r7, sp, #0

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8007ea2:	b480      	push	{r7}
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8007eae:	b480      	push	{r7}
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	e7fe      	b.n	8007eb2 <__default_exit+0x4>

08007eb4 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8007eba:	4b18      	ldr	r3, [pc, #96]	; (8007f1c <__init_ram_areas+0x68>)
 8007ebc:	60fb      	str	r3, [r7, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60bb      	str	r3, [r7, #8]
    uint32_t *p = rap->init_area;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	607b      	str	r3, [r7, #4]
 8007eca:	e009      	b.n	8007ee0 <__init_ram_areas+0x2c>

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
      *p = *tp;
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
      p++;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	607b      	str	r3, [r7, #4]
      tp++;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	3304      	adds	r3, #4
 8007ede:	60bb      	str	r3, [r7, #8]
    while (p < rap->clear_area) {
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d8f0      	bhi.n	8007ecc <__init_ram_areas+0x18>
 8007eea:	e005      	b.n	8007ef8 <__init_ram_areas+0x44>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	601a      	str	r2, [r3, #0]
      p++;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	607b      	str	r3, [r7, #4]
    while (p < rap->no_init_area) {
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d8f4      	bhi.n	8007eec <__init_ram_areas+0x38>
    }
    rap++;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	3310      	adds	r3, #16
 8007f06:	60fb      	str	r3, [r7, #12]
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4a05      	ldr	r2, [pc, #20]	; (8007f20 <__init_ram_areas+0x6c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d3d6      	bcc.n	8007ebe <__init_ram_areas+0xa>
#endif
}
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	08008c6c 	.word	0x08008c6c
 8007f20:	08008cec 	.word	0x08008cec

08007f24 <osalInit>:
static inline void osalInit(void) {
 8007f24:	b480      	push	{r7}
 8007f26:	af00      	add	r7, sp, #0
}
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8007f30:	b580      	push	{r7, lr}
 8007f32:	af00      	add	r7, sp, #0

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 8007f34:	f7ff fff6 	bl	8007f24 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 8007f38:	f7fe fe9c 	bl	8006c74 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 8007f3c:	f7fc ffd4 	bl	8004ee8 <_pal_lld_init>
#endif
#if (HAL_USE_QSPI == TRUE) || defined(__DOXYGEN__)
  qspiInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 8007f40:	f7ff faa4 	bl	800748c <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 8007f44:	f7ff feea 	bl	8007d1c <spiInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 8007f48:	f7fe f82e 	bl	8005fa8 <uartInit>
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 8007f4c:	f7fe faf2 	bl	8006534 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 8007f50:	f7ff fca5 	bl	800789e <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8007f54:	f7fb f86b 	bl	800302e <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8007f58:	f000 f82d 	bl	8007fb6 <stInit>
#endif
}
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <st_lld_start_alarm>:
 *
 * @param[in] time      the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8007f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8007f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f72:	2200      	movs	r2, #0
 8007f74:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8007f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	60da      	str	r2, [r3, #12]
}
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <st_lld_stop_alarm>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {
 8007f88:	b480      	push	{r7}
 8007f8a:	af00      	add	r7, sp, #0

  STM32_ST_TIM->DIER = 0;
 8007f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f90:	2200      	movs	r2, #0
 8007f92:	60da      	str	r2, [r3, #12]
}
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <st_lld_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8007fa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6353      	str	r3, [r2, #52]	; 0x34
}
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	af00      	add	r7, sp, #0

  st_lld_init();
 8007fba:	f7fc fa15 	bl	80043e8 <st_lld_init>
}
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff ffc8 	bl	8007f5e <st_lld_start_alarm>
}
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0

  st_lld_stop_alarm();
 8007fd8:	f7ff ffd6 	bl	8007f88 <st_lld_stop_alarm>
}
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7ff ffd8 	bl	8007f9c <st_lld_set_alarm>
}
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <chTimeAddX>:
                                   sysinterval_t interval) {
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
  return systime + (systime_t)interval;
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	4413      	add	r3, r2
}
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <chTimeDiffX>:
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
  return (sysinterval_t)((systime_t)(end - start));
 8008018:	683a      	ldr	r2, [r7, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	1ad3      	subs	r3, r2, r3
}
 800801e:	4618      	mov	r0, r3
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <port_lock.lto_priv.241>:
static inline void port_lock(void) {
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	2320      	movs	r3, #32
 8008032:	607b      	str	r3, [r7, #4]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f383 8811 	msr	BASEPRI, r3
}
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <port_unlock.lto_priv.239>:
static inline void port_unlock(void) {
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	2300      	movs	r3, #0
 800804c:	607b      	str	r3, [r7, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f383 8811 	msr	BASEPRI, r3
}
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <st_lld_get_counter>:
static inline systime_t st_lld_get_counter(void) {
 800805e:	b480      	push	{r7}
 8008060:	af00      	add	r7, sp, #0
  return (systime_t)STM32_ST_TIM->CNT;
 8008062:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8008068:	4618      	mov	r0, r3
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <port_timer_get_time>:
static inline systime_t port_timer_get_time(void) {
 8008072:	b580      	push	{r7, lr}
 8008074:	af00      	add	r7, sp, #0
  return stGetCounter();
 8008076:	f7ff fff2 	bl	800805e <st_lld_get_counter>
 800807a:	4603      	mov	r3, r0
}
 800807c:	4618      	mov	r0, r3
 800807e:	bd80      	pop	{r7, pc}

08008080 <queue_init.lto_priv.237>:
static inline void queue_init(threads_queue_t *tqp) {
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  tqp->next = (thread_t *)tqp;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	605a      	str	r2, [r3, #4]
}
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <chSysLock.lto_priv.235>:
static inline void chSysLock(void) {
 800809e:	b580      	push	{r7, lr}
 80080a0:	af00      	add	r7, sp, #0
  port_lock();
 80080a2:	f7ff ffc2 	bl	800802a <port_lock.lto_priv.241>
}
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <chSysUnlock.lto_priv.233>:
static inline void chSysUnlock(void) {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  port_unlock();
 80080ac:	f7ff ffca 	bl	8008044 <port_unlock.lto_priv.239>
}
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <chVTGetSystemTimeX>:
static inline systime_t chVTGetSystemTimeX(void) {
 80080b2:	b580      	push	{r7, lr}
 80080b4:	af00      	add	r7, sp, #0
  return port_timer_get_time();
 80080b6:	f7ff ffdc 	bl	8008072 <port_timer_get_time>
 80080ba:	4603      	mov	r3, r0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	bd80      	pop	{r7, pc}

080080c0 <chThdQueueObjectInit.lto_priv.231>:
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  queue_init(tqp);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff ffd9 	bl	8008080 <queue_init.lto_priv.237>
}
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <osalSysLock>:
static inline void osalSysLock(void) {
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
  chSysLock();
 80080d8:	f7ff ffe1 	bl	800809e <chSysLock.lto_priv.235>
}
 80080dc:	bd80      	pop	{r7, pc}

080080de <osalSysUnlock>:
static inline void osalSysUnlock(void) {
 80080de:	b580      	push	{r7, lr}
 80080e0:	af00      	add	r7, sp, #0
  chSysUnlock();
 80080e2:	f7ff ffe1 	bl	80080a8 <chSysUnlock.lto_priv.233>
}
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <osalOsGetSystemTimeX>:
static inline systime_t osalOsGetSystemTimeX(void) {
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
  return chVTGetSystemTimeX();
 80080ec:	f7ff ffe1 	bl	80080b2 <chVTGetSystemTimeX>
 80080f0:	4603      	mov	r3, r0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <osalTimeAddX>:
                                     sysinterval_t interval) {
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  return chTimeAddX(systime, interval);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff ff75 	bl	8007ff2 <chTimeAddX>
 8008108:	4603      	mov	r3, r0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <osalTimeDiffX>:
static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
  return chTimeDiffX(start, end);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff ff75 	bl	800800e <chTimeDiffX>
 8008124:	4603      	mov	r3, r0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <osalThreadQueueObjectInit>:
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  chThdQueueObjectInit(tqp);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7ff ffc2 	bl	80080c0 <chThdQueueObjectInit.lto_priv.231>
}
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <osalThreadEnqueueTimeoutS>:
                                              sysinterval_t timeout) {
 8008142:	b580      	push	{r7, lr}
 8008144:	b082      	sub	sp, #8
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  return chThdEnqueueTimeoutS(tqp, timeout);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7fa fd06 	bl	8002b60 <chThdEnqueueTimeoutS>
 8008154:	4603      	mov	r3, r0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <osalThreadDequeueNextI>:
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	6039      	str	r1, [r7, #0]
  chThdDequeueNextI(tqp, msg);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7fa fd14 	bl	8002b98 <chThdDequeueNextI>
}
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <osalThreadDequeueAllI>:
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	6039      	str	r1, [r7, #0]
  chThdDequeueAllI(tqp, msg);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7fa fd1a 	bl	8002bbc <chThdDequeueAllI>
}
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <ibqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t infy, void *link) {
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	603b      	str	r3, [r7, #0]
 800819a:	460b      	mov	r3, r1
 800819c:	72fb      	strb	r3, [r7, #11]

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff ffc4 	bl	800812e <osalThreadQueueObjectInit>
  ibqp->suspended = suspended;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	7afa      	ldrb	r2, [r7, #11]
 80081aa:	721a      	strb	r2, [r3, #8]
  ibqp->bcounter  = 0;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	60da      	str	r2, [r3, #12]
  ibqp->brdptr    = bp;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	615a      	str	r2, [r3, #20]
  ibqp->bwrptr    = bp;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	611a      	str	r2, [r3, #16]
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	3304      	adds	r3, #4
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	fb02 f303 	mul.w	r3, r2, r3
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	441a      	add	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	619a      	str	r2, [r3, #24]
  ibqp->bsize     = size + sizeof (size_t);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	1d1a      	adds	r2, r3, #4
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	61da      	str	r2, [r3, #28]
  ibqp->bn        = n;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	621a      	str	r2, [r3, #32]
  ibqp->buffers   = bp;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	625a      	str	r2, [r3, #36]	; 0x24
  ibqp->ptr       = NULL;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	629a      	str	r2, [r3, #40]	; 0x28
  ibqp->top       = NULL;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	62da      	str	r2, [r3, #44]	; 0x2c
  ibqp->notify    = infy;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	631a      	str	r2, [r3, #48]	; 0x30
  ibqp->link      = link;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6a3a      	ldr	r2, [r7, #32]
 80081fa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <ibqResetI>:
 *
 * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 *
 * @iclass
 */
void ibqResetI(input_buffers_queue_t *ibqp) {
 8008202:	b580      	push	{r7, lr}
 8008204:	b082      	sub	sp, #8
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassI();

  ibqp->bcounter  = 0;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	60da      	str	r2, [r3, #12]
  ibqp->brdptr    = ibqp->buffers;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	615a      	str	r2, [r3, #20]
  ibqp->bwrptr    = ibqp->buffers;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	611a      	str	r2, [r3, #16]
  ibqp->ptr       = NULL;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	629a      	str	r2, [r3, #40]	; 0x28
  ibqp->top       = NULL;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	62da      	str	r2, [r3, #44]	; 0x2c
  osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f06f 0101 	mvn.w	r1, #1
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff ff9f 	bl	8008176 <osalThreadDequeueAllI>
}
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <ibqGetEmptyBufferI>:
 * @return              A pointer to the next buffer to be filled.
 * @retval NULL         if the queue is full.
 *
 * @iclass
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 800823e:	b480      	push	{r7}
 8008240:	b083      	sub	sp, #12
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691a      	ldr	r2, [r3, #16]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	429a      	cmp	r2, r3
 8008250:	d105      	bne.n	800825e <ibqGetEmptyBufferI+0x20>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <ibqGetEmptyBufferI+0x20>
 800825a:	2301      	movs	r3, #1
 800825c:	e000      	b.n	8008260 <ibqGetEmptyBufferI+0x22>
 800825e:	2300      	movs	r3, #0
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <ibqGetEmptyBufferI+0x30>
    return NULL;
 800826a:	2300      	movs	r3, #0
 800826c:	e002      	b.n	8008274 <ibqGetEmptyBufferI+0x36>
  }

  return ibqp->bwrptr + sizeof (size_t);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	3304      	adds	r3, #4
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <ibqPostFullBufferI>:
 * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @iclass
 */
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	601a      	str	r2, [r3, #0]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	1c5a      	adds	r2, r3, #1
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	60da      	str	r2, [r3, #12]
  ibqp->bwrptr += ibqp->bsize;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	691a      	ldr	r2, [r3, #16]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	441a      	add	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	611a      	str	r2, [r3, #16]
  if (ibqp->bwrptr >= ibqp->btop) {
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691a      	ldr	r2, [r3, #16]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d303      	bcc.n	80082be <ibqPostFullBufferI+0x3e>
    ibqp->bwrptr = ibqp->buffers;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	611a      	str	r2, [r3, #16]
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2100      	movs	r1, #0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff ff4b 	bl	800815e <osalThreadDequeueNextI>
}
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <ibqGetFullBufferTimeoutS>:
   *                      suspended state.
   *
   * @sclass
   */
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 sysinterval_t timeout) {
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	6039      	str	r1, [r7, #0]
 80082d8:	e011      	b.n	80082fe <ibqGetFullBufferTimeoutS+0x30>

  osalDbgCheckClassS();

  while (ibqIsEmptyI(ibqp)) {
    if (ibqp->suspended) {
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	7a1b      	ldrb	r3, [r3, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <ibqGetFullBufferTimeoutS+0x1a>
      return MSG_RESET;
 80082e2:	f06f 0301 	mvn.w	r3, #1
 80082e6:	e01c      	b.n	8008322 <ibqGetFullBufferTimeoutS+0x54>
    }
    msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff ff28 	bl	8008142 <osalThreadEnqueueTimeoutS>
 80082f2:	60f8      	str	r0, [r7, #12]
    if (msg < MSG_OK) {
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	da01      	bge.n	80082fe <ibqGetFullBufferTimeoutS+0x30>
       return msg;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	e011      	b.n	8008322 <ibqGetFullBufferTimeoutS+0x54>
  while (ibqIsEmptyI(ibqp)) {
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d0e9      	beq.n	80082da <ibqGetFullBufferTimeoutS+0xc>
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	1d1a      	adds	r2, r3, #4
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	629a      	str	r2, [r3, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	441a      	add	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	62da      	str	r2, [r3, #44]	; 0x2c

  return MSG_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <ibqReleaseEmptyBufferS>:
   *
   * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
   *
   * @sclass
   */
  void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	1e5a      	subs	r2, r3, #1
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	60da      	str	r2, [r3, #12]
  ibqp->brdptr += ibqp->bsize;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	695a      	ldr	r2, [r3, #20]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	441a      	add	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	615a      	str	r2, [r3, #20]
  if (ibqp->brdptr >= ibqp->btop) {
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	695a      	ldr	r2, [r3, #20]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	429a      	cmp	r2, r3
 8008354:	d303      	bcc.n	800835e <ibqReleaseEmptyBufferS+0x34>
    ibqp->brdptr = ibqp->buffers;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	615a      	str	r2, [r3, #20]
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	629a      	str	r2, [r3, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <ibqReleaseEmptyBufferS+0x4a>
    ibqp->notify(ibqp);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	4798      	blx	r3
  }
}
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <ibqGetTimeout>:
 * @retval MSG_RESET    if the queue has been reset or has been put in
 *                      suspended state.
 *
 * @api
 */
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	6039      	str	r1, [r7, #0]
  msg_t msg;

  osalSysLock();
 8008384:	f7ff fea6 	bl	80080d4 <osalSysLock>

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10b      	bne.n	80083a8 <ibqGetTimeout+0x2e>
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff ff9b 	bl	80082ce <ibqGetFullBufferTimeoutS>
 8008398:	60f8      	str	r0, [r7, #12]
    if (msg != MSG_OK) {
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <ibqGetTimeout+0x2e>
      osalSysUnlock();
 80083a0:	f7ff fe9d 	bl	80080de <osalSysUnlock>
      return msg;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	e014      	b.n	80083d2 <ibqGetTimeout+0x58>
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	60fb      	str	r3, [r7, #12]
  ibqp->ptr++;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d302      	bcc.n	80083cc <ibqGetTimeout+0x52>
    ibqReleaseEmptyBufferS(ibqp);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7ff ffaf 	bl	800832a <ibqReleaseEmptyBufferS>
  }

  osalSysUnlock();
 80083cc:	f7ff fe87 	bl	80080de <osalSysUnlock>
  return msg;
 80083d0:	68fb      	ldr	r3, [r7, #12]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <ibqReadTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 80083da:	b580      	push	{r7, lr}
 80083dc:	b08a      	sub	sp, #40	; 0x28
 80083de:	af00      	add	r7, sp, #0
 80083e0:	60f8      	str	r0, [r7, #12]
 80083e2:	60b9      	str	r1, [r7, #8]
 80083e4:	607a      	str	r2, [r7, #4]
 80083e6:	603b      	str	r3, [r7, #0]
  size_t r = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	627b      	str	r3, [r7, #36]	; 0x24
  systime_t deadline;

  osalDbgCheck(n > 0U);

  osalSysLock();
 80083ec:	f7ff fe72 	bl	80080d4 <osalSysLock>

  /* Time window for the whole operation.*/
  deadline = osalTimeAddX(osalOsGetSystemTimeX(), timeout);
 80083f0:	f7ff fe7a 	bl	80080e8 <osalOsGetSystemTimeX>
 80083f4:	4603      	mov	r3, r0
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7ff fe7c 	bl	80080f6 <osalTimeAddX>
 80083fe:	61b8      	str	r0, [r7, #24]

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008404:	2b00      	cmp	r3, #0
 8008406:	d128      	bne.n	800845a <ibqReadTimeout+0x80>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800840e:	d002      	beq.n	8008416 <ibqReadTimeout+0x3c>
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d105      	bne.n	8008422 <ibqReadTimeout+0x48>
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f7ff ff58 	bl	80082ce <ibqGetFullBufferTimeoutS>
 800841e:	61f8      	str	r0, [r7, #28]
 8008420:	e014      	b.n	800844c <ibqReadTimeout+0x72>
      }
      else {
        sysinterval_t next_timeout = osalTimeDiffX(osalOsGetSystemTimeX(),
 8008422:	f7ff fe61 	bl	80080e8 <osalOsGetSystemTimeX>
 8008426:	4603      	mov	r3, r0
 8008428:	69b9      	ldr	r1, [r7, #24]
 800842a:	4618      	mov	r0, r3
 800842c:	f7ff fe71 	bl	8008112 <osalTimeDiffX>
 8008430:	6178      	str	r0, [r7, #20]
                                                   deadline);

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	429a      	cmp	r2, r3
 8008438:	d903      	bls.n	8008442 <ibqReadTimeout+0x68>
          osalSysUnlock();
 800843a:	f7ff fe50 	bl	80080de <osalSysUnlock>
          return r;
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	e05c      	b.n	80084fc <ibqReadTimeout+0x122>
        }
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 8008442:	6979      	ldr	r1, [r7, #20]
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f7ff ff42 	bl	80082ce <ibqGetFullBufferTimeoutS>
 800844a:	61f8      	str	r0, [r7, #28]
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <ibqReadTimeout+0x80>
        osalSysUnlock();
 8008452:	f7ff fe44 	bl	80080de <osalSysUnlock>
        return r;
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	e050      	b.n	80084fc <ibqReadTimeout+0x122>
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	461a      	mov	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	623b      	str	r3, [r7, #32]
    if (size > (n - r)) {
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	1ad2      	subs	r2, r2, r3
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	429a      	cmp	r2, r3
 8008472:	d203      	bcs.n	800847c <ibqReadTimeout+0xa2>
      size = n - r;
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	623b      	str	r3, [r7, #32]
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	2b40      	cmp	r3, #64	; 0x40
 8008480:	d913      	bls.n	80084aa <ibqReadTimeout+0xd0>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008486:	2240      	movs	r2, #64	; 0x40
 8008488:	4619      	mov	r1, r3
 800848a:	68b8      	ldr	r0, [r7, #8]
 800848c:	f000 fbda 	bl	8008c44 <memcpy>
      bp        += 64U;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	3340      	adds	r3, #64	; 0x40
 8008494:	60bb      	str	r3, [r7, #8]
      ibqp->ptr += 64U;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	629a      	str	r2, [r3, #40]	; 0x28
      r         += 64U;
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	3340      	adds	r3, #64	; 0x40
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
 80084a8:	e014      	b.n	80084d4 <ibqReadTimeout+0xfa>
    }
    else {
      memcpy(bp, ibqp->ptr, size);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ae:	6a3a      	ldr	r2, [r7, #32]
 80084b0:	4619      	mov	r1, r3
 80084b2:	68b8      	ldr	r0, [r7, #8]
 80084b4:	f000 fbc6 	bl	8008c44 <memcpy>
      bp        += size;
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	4413      	add	r3, r2
 80084be:	60bb      	str	r3, [r7, #8]
      ibqp->ptr += size;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	441a      	add	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	629a      	str	r2, [r3, #40]	; 0x28
      r         += size;
 80084cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	4413      	add	r3, r2
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	429a      	cmp	r2, r3
 80084de:	d302      	bcc.n	80084e6 <ibqReadTimeout+0x10c>
      ibqReleaseEmptyBufferS(ibqp);
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f7ff ff22 	bl	800832a <ibqReleaseEmptyBufferS>
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
 80084e6:	f7ff fdfa 	bl	80080de <osalSysUnlock>
    if (r >= n) {
 80084ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d301      	bcc.n	80084f6 <ibqReadTimeout+0x11c>
      return r;
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	e002      	b.n	80084fc <ibqReadTimeout+0x122>
    }
    osalSysLock();
 80084f6:	f7ff fded 	bl	80080d4 <osalSysLock>
 80084fa:	e781      	b.n	8008400 <ibqReadTimeout+0x26>
  }
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3728      	adds	r7, #40	; 0x28
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <obqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t onfy, void *link) {
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	607a      	str	r2, [r7, #4]
 800850e:	603b      	str	r3, [r7, #0]
 8008510:	460b      	mov	r3, r1
 8008512:	72fb      	strb	r3, [r7, #11]

  osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&obqp->waiting);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4618      	mov	r0, r3
 8008518:	f7ff fe09 	bl	800812e <osalThreadQueueObjectInit>
  obqp->suspended = suspended;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	7afa      	ldrb	r2, [r7, #11]
 8008520:	721a      	strb	r2, [r3, #8]
  obqp->bcounter  = n;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	60da      	str	r2, [r3, #12]
  obqp->brdptr    = bp;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	615a      	str	r2, [r3, #20]
  obqp->bwrptr    = bp;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	611a      	str	r2, [r3, #16]
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	3304      	adds	r3, #4
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	fb02 f303 	mul.w	r3, r2, r3
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	441a      	add	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	619a      	str	r2, [r3, #24]
  obqp->bsize     = size + sizeof (size_t);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	1d1a      	adds	r2, r3, #4
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	61da      	str	r2, [r3, #28]
  obqp->bn        = n;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	621a      	str	r2, [r3, #32]
  obqp->buffers   = bp;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	625a      	str	r2, [r3, #36]	; 0x24
  obqp->ptr       = NULL;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	629a      	str	r2, [r3, #40]	; 0x28
  obqp->top       = NULL;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	62da      	str	r2, [r3, #44]	; 0x2c
  obqp->notify    = onfy;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	69fa      	ldr	r2, [r7, #28]
 800856a:	631a      	str	r2, [r3, #48]	; 0x30
  obqp->link      = link;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6a3a      	ldr	r2, [r7, #32]
 8008570:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <obqResetI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqResetI(output_buffers_queue_t *obqp) {
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassI();

  obqp->bcounter  = bqSizeX(obqp);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a1a      	ldr	r2, [r3, #32]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	60da      	str	r2, [r3, #12]
  obqp->brdptr    = obqp->buffers;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	615a      	str	r2, [r3, #20]
  obqp->bwrptr    = obqp->buffers;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	611a      	str	r2, [r3, #16]
  obqp->ptr       = NULL;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	629a      	str	r2, [r3, #40]	; 0x28
  obqp->top       = NULL;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	62da      	str	r2, [r3, #44]	; 0x2c
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f06f 0101 	mvn.w	r1, #1
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff fde3 	bl	8008176 <osalThreadDequeueAllI>
}
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	691a      	ldr	r2, [r3, #16]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d105      	bne.n	80085d8 <obqGetFullBufferI+0x22>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <obqGetFullBufferI+0x22>
 80085d4:	2301      	movs	r3, #1
 80085d6:	e000      	b.n	80085da <obqGetFullBufferI+0x24>
 80085d8:	2300      	movs	r3, #0
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <obqGetFullBufferI+0x32>
    return NULL;
 80085e4:	2300      	movs	r3, #0
 80085e6:	e007      	b.n	80085f8 <obqGetFullBufferI+0x42>
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	601a      	str	r2, [r3, #0]

  return obqp->brdptr + sizeof (size_t);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	3304      	adds	r3, #4
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <obqReleaseEmptyBufferI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	60da      	str	r2, [r3, #12]
  obqp->brdptr += obqp->bsize;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	695a      	ldr	r2, [r3, #20]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	441a      	add	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	615a      	str	r2, [r3, #20]
  if (obqp->brdptr >= obqp->btop) {
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	695a      	ldr	r2, [r3, #20]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	429a      	cmp	r2, r3
 800862e:	d303      	bcc.n	8008638 <obqReleaseEmptyBufferI+0x34>
    obqp->brdptr = obqp->buffers;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	615a      	str	r2, [r3, #20]
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2100      	movs	r1, #0
 800863c:	4618      	mov	r0, r3
 800863e:	f7ff fd8e 	bl	800815e <osalThreadDequeueNextI>
}
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <obqGetEmptyBufferTimeoutS>:
 *                      suspended state.
 *
 * @sclass
 */
msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                sysinterval_t timeout) {
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
 8008652:	e011      	b.n	8008678 <obqGetEmptyBufferTimeoutS+0x30>

  osalDbgCheckClassS();

  while (obqIsFullI(obqp)) {
    if (obqp->suspended) {
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	7a1b      	ldrb	r3, [r3, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <obqGetEmptyBufferTimeoutS+0x1a>
      return MSG_RESET;
 800865c:	f06f 0301 	mvn.w	r3, #1
 8008660:	e01b      	b.n	800869a <obqGetEmptyBufferTimeoutS+0x52>
    }
    msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff fd6b 	bl	8008142 <osalThreadEnqueueTimeoutS>
 800866c:	60f8      	str	r0, [r7, #12]
    if (msg < MSG_OK) {
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	da01      	bge.n	8008678 <obqGetEmptyBufferTimeoutS+0x30>
      return msg;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	e010      	b.n	800869a <obqGetEmptyBufferTimeoutS+0x52>
  while (obqIsFullI(obqp)) {
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0e9      	beq.n	8008654 <obqGetEmptyBufferTimeoutS+0xc>
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	1d1a      	adds	r2, r3, #4
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	629a      	str	r2, [r3, #40]	; 0x28
  obqp->top = obqp->bwrptr + obqp->bsize;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	691a      	ldr	r2, [r3, #16]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	441a      	add	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	62da      	str	r2, [r3, #44]	; 0x2c

  return MSG_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <obqPostFullBufferS>:
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @sclass
 */
void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	601a      	str	r2, [r3, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	1e5a      	subs	r2, r3, #1
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	60da      	str	r2, [r3, #12]
  obqp->bwrptr += obqp->bsize;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	691a      	ldr	r2, [r3, #16]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	441a      	add	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	611a      	str	r2, [r3, #16]
  if (obqp->bwrptr >= obqp->btop) {
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691a      	ldr	r2, [r3, #16]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d303      	bcc.n	80086e0 <obqPostFullBufferS+0x3e>
    obqp->bwrptr = obqp->buffers;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	611a      	str	r2, [r3, #16]
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <obqPostFullBufferS+0x54>
    obqp->notify(obqp);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	4798      	blx	r3
  }
}
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <obqPutTimeout>:
 *                      suspended state.
 *
 * @api
 */
msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
                    sysinterval_t timeout) {
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	460b      	mov	r3, r1
 8008706:	607a      	str	r2, [r7, #4]
 8008708:	72fb      	strb	r3, [r7, #11]
  msg_t msg;

  osalSysLock();
 800870a:	f7ff fce3 	bl	80080d4 <osalSysLock>

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10b      	bne.n	800872e <obqPutTimeout+0x32>
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8008716:	6879      	ldr	r1, [r7, #4]
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f7ff ff95 	bl	8008648 <obqGetEmptyBufferTimeoutS>
 800871e:	6178      	str	r0, [r7, #20]
    if (msg != MSG_OK) {
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <obqPutTimeout+0x32>
      osalSysUnlock();
 8008726:	f7ff fcda 	bl	80080de <osalSysUnlock>
      return msg;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	e018      	b.n	8008760 <obqPutTimeout+0x64>
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008732:	7afa      	ldrb	r2, [r7, #11]
 8008734:	701a      	strb	r2, [r3, #0]
  obqp->ptr++;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	629a      	str	r2, [r3, #40]	; 0x28

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	429a      	cmp	r2, r3
 800874a:	d306      	bcc.n	800875a <obqPutTimeout+0x5e>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	3b04      	subs	r3, #4
 8008752:	4619      	mov	r1, r3
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f7ff ffa4 	bl	80086a2 <obqPostFullBufferS>
  }

  osalSysUnlock();
 800875a:	f7ff fcc0 	bl	80080de <osalSysUnlock>
  return MSG_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, sysinterval_t timeout) {
 8008768:	b580      	push	{r7, lr}
 800876a:	b08a      	sub	sp, #40	; 0x28
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	603b      	str	r3, [r7, #0]
  size_t w = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
  systime_t deadline;

  osalDbgCheck(n > 0U);

  osalSysLock();
 800877a:	f7ff fcab 	bl	80080d4 <osalSysLock>

  /* Time window for the whole operation.*/
  deadline = osalTimeAddX(osalOsGetSystemTimeX(), timeout);
 800877e:	f7ff fcb3 	bl	80080e8 <osalOsGetSystemTimeX>
 8008782:	4603      	mov	r3, r0
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	4618      	mov	r0, r3
 8008788:	f7ff fcb5 	bl	80080f6 <osalTimeAddX>
 800878c:	61b8      	str	r0, [r7, #24]

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008792:	2b00      	cmp	r3, #0
 8008794:	d128      	bne.n	80087e8 <obqWriteTimeout+0x80>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800879c:	d002      	beq.n	80087a4 <obqWriteTimeout+0x3c>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d105      	bne.n	80087b0 <obqWriteTimeout+0x48>
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f7ff ff4e 	bl	8008648 <obqGetEmptyBufferTimeoutS>
 80087ac:	61f8      	str	r0, [r7, #28]
 80087ae:	e014      	b.n	80087da <obqWriteTimeout+0x72>
      }
      else {
        sysinterval_t next_timeout = osalTimeDiffX(osalOsGetSystemTimeX(),
 80087b0:	f7ff fc9a 	bl	80080e8 <osalOsGetSystemTimeX>
 80087b4:	4603      	mov	r3, r0
 80087b6:	69b9      	ldr	r1, [r7, #24]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fcaa 	bl	8008112 <osalTimeDiffX>
 80087be:	6178      	str	r0, [r7, #20]
                                                   deadline);

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d903      	bls.n	80087d0 <obqWriteTimeout+0x68>
          osalSysUnlock();
 80087c8:	f7ff fc89 	bl	80080de <osalSysUnlock>
          return w;
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	e060      	b.n	8008892 <obqWriteTimeout+0x12a>
        }
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 80087d0:	6979      	ldr	r1, [r7, #20]
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f7ff ff38 	bl	8008648 <obqGetEmptyBufferTimeoutS>
 80087d8:	61f8      	str	r0, [r7, #28]
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d003      	beq.n	80087e8 <obqWriteTimeout+0x80>
        osalSysUnlock();
 80087e0:	f7ff fc7d 	bl	80080de <osalSysUnlock>
        return w;
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	e054      	b.n	8008892 <obqWriteTimeout+0x12a>
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	461a      	mov	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	623b      	str	r3, [r7, #32]
    if (size > (n - w)) {
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	1ad2      	subs	r2, r2, r3
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d203      	bcs.n	800880a <obqWriteTimeout+0xa2>
      size = n - w;
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	623b      	str	r3, [r7, #32]
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	2b40      	cmp	r3, #64	; 0x40
 800880e:	d913      	bls.n	8008838 <obqWriteTimeout+0xd0>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008814:	2240      	movs	r2, #64	; 0x40
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	4618      	mov	r0, r3
 800881a:	f000 fa13 	bl	8008c44 <memcpy>
      bp        += 64U;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	3340      	adds	r3, #64	; 0x40
 8008822:	60bb      	str	r3, [r7, #8]
      obqp->ptr += 64U;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008828:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	629a      	str	r2, [r3, #40]	; 0x28
      w         += 64U;
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	3340      	adds	r3, #64	; 0x40
 8008834:	627b      	str	r3, [r7, #36]	; 0x24
 8008836:	e014      	b.n	8008862 <obqWriteTimeout+0xfa>
    }
    else {
      memcpy(obqp->ptr, bp, size);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883c:	6a3a      	ldr	r2, [r7, #32]
 800883e:	68b9      	ldr	r1, [r7, #8]
 8008840:	4618      	mov	r0, r3
 8008842:	f000 f9ff 	bl	8008c44 <memcpy>
      bp        += size;
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	4413      	add	r3, r2
 800884c:	60bb      	str	r3, [r7, #8]
      obqp->ptr += size;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	441a      	add	r2, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	629a      	str	r2, [r3, #40]	; 0x28
      w         += size;
 800885a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	4413      	add	r3, r2
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886a:	429a      	cmp	r2, r3
 800886c:	d306      	bcc.n	800887c <obqWriteTimeout+0x114>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	3b04      	subs	r3, #4
 8008874:	4619      	mov	r1, r3
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7ff ff13 	bl	80086a2 <obqPostFullBufferS>
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
 800887c:	f7ff fc2f 	bl	80080de <osalSysUnlock>
    if (w >= n) {
 8008880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	429a      	cmp	r2, r3
 8008886:	d301      	bcc.n	800888c <obqWriteTimeout+0x124>
      return w;
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	e002      	b.n	8008892 <obqWriteTimeout+0x12a>
    }
    osalSysLock();
 800888c:	f7ff fc22 	bl	80080d4 <osalSysLock>
 8008890:	e77d      	b.n	800878e <obqWriteTimeout+0x26>
  }
}
 8008892:	4618      	mov	r0, r3
 8008894:	3728      	adds	r7, #40	; 0x28
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <obqTryFlushI>:
 * @retval false        if no new filled buffer has been posted to the queue.
 * @retval true         if a new filled buffer has been posted to the queue.
 *
 * @iclass
 */
bool obqTryFlushI(output_buffers_queue_t *obqp) {
 800889a:	b480      	push	{r7}
 800889c:	b085      	sub	sp, #20
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	691a      	ldr	r2, [r3, #16]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d105      	bne.n	80088ba <obqTryFlushI+0x20>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <obqTryFlushI+0x20>
 80088b6:	2301      	movs	r3, #1
 80088b8:	e000      	b.n	80088bc <obqTryFlushI+0x22>
 80088ba:	2300      	movs	r3, #0
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d02d      	beq.n	8008922 <obqTryFlushI+0x88>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d029      	beq.n	8008922 <obqTryFlushI+0x88>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d2:	461a      	mov	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	3b04      	subs	r3, #4
 80088dc:	60fb      	str	r3, [r7, #12]

    if (size > 0U) {
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d01e      	beq.n	8008922 <obqTryFlushI+0x88>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	1e5a      	subs	r2, r3, #1
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	60da      	str	r2, [r3, #12]
      obqp->bwrptr += obqp->bsize;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	691a      	ldr	r2, [r3, #16]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	441a      	add	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	611a      	str	r2, [r3, #16]
      if (obqp->bwrptr >= obqp->btop) {
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691a      	ldr	r2, [r3, #16]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	429a      	cmp	r2, r3
 800890e:	d303      	bcc.n	8008918 <obqTryFlushI+0x7e>
        obqp->bwrptr = obqp->buffers;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	611a      	str	r2, [r3, #16]
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	629a      	str	r2, [r3, #40]	; 0x28

      return true;
 800891e:	2301      	movs	r3, #1
 8008920:	e000      	b.n	8008924 <obqTryFlushI+0x8a>
    }
  }
  return false;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <port_lock.lto_priv.242>:
static inline void port_lock(void) {
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	2320      	movs	r3, #32
 8008938:	607b      	str	r3, [r7, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f383 8811 	msr	BASEPRI, r3
}
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <port_unlock.lto_priv.240>:
static inline void port_unlock(void) {
 800894a:	b480      	push	{r7}
 800894c:	b083      	sub	sp, #12
 800894e:	af00      	add	r7, sp, #0
 8008950:	2300      	movs	r3, #0
 8008952:	607b      	str	r3, [r7, #4]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f383 8811 	msr	BASEPRI, r3
}
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <queue_init.lto_priv.238>:
static inline void queue_init(threads_queue_t *tqp) {
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  tqp->next = (thread_t *)tqp;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	605a      	str	r2, [r3, #4]
}
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <chSysLock.lto_priv.236>:
static inline void chSysLock(void) {
 8008982:	b580      	push	{r7, lr}
 8008984:	af00      	add	r7, sp, #0
  port_lock();
 8008986:	f7ff ffd3 	bl	8008930 <port_lock.lto_priv.242>
}
 800898a:	bd80      	pop	{r7, pc}

0800898c <chSysUnlock.lto_priv.234>:
static inline void chSysUnlock(void) {
 800898c:	b580      	push	{r7, lr}
 800898e:	af00      	add	r7, sp, #0
  port_unlock();
 8008990:	f7ff ffdb 	bl	800894a <port_unlock.lto_priv.240>
}
 8008994:	bd80      	pop	{r7, pc}

08008996 <chThdQueueObjectInit.lto_priv.232>:
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  queue_init(tqp);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff ffe0 	bl	8008964 <queue_init.lto_priv.238>
}
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <osalSysLock.lto_priv.213>:
static inline void osalSysLock(void) {
 80089aa:	b580      	push	{r7, lr}
 80089ac:	af00      	add	r7, sp, #0
  chSysLock();
 80089ae:	f7ff ffe8 	bl	8008982 <chSysLock.lto_priv.236>
}
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <osalSysUnlock.lto_priv.209>:
static inline void osalSysUnlock(void) {
 80089b4:	b580      	push	{r7, lr}
 80089b6:	af00      	add	r7, sp, #0
  chSysUnlock();
 80089b8:	f7ff ffe8 	bl	800898c <chSysUnlock.lto_priv.234>
}
 80089bc:	bd80      	pop	{r7, pc}

080089be <osalThreadQueueObjectInit.lto_priv.229>:
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  chThdQueueObjectInit(tqp);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff ffe5 	bl	8008996 <chThdQueueObjectInit.lto_priv.232>
}
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <osalThreadEnqueueTimeoutS.lto_priv.226>:
                                              sysinterval_t timeout) {
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b082      	sub	sp, #8
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	6039      	str	r1, [r7, #0]
  return chThdEnqueueTimeoutS(tqp, timeout);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7fa f8be 	bl	8002b60 <chThdEnqueueTimeoutS>
 80089e4:	4603      	mov	r3, r0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <osalThreadDequeueNextI.lto_priv.228>:
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	6039      	str	r1, [r7, #0]
  chThdDequeueNextI(tqp, msg);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7fa f8cc 	bl	8002b98 <chThdDequeueNextI>
}
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <iq_read.lto_priv.230>:
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b086      	sub	sp, #24
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	60f8      	str	r0, [r7, #12]
 8008a0e:	60b9      	str	r1, [r7, #8]
 8008a10:	607a      	str	r2, [r7, #4]
  if (n > iqGetFullI(iqp)) {
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	689a      	ldr	r2, [r3, #8]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d202      	bcs.n	8008a22 <iq_read.lto_priv.230+0x1c>
    n = iqGetFullI(iqp);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	607b      	str	r3, [r7, #4]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	461a      	mov	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	617b      	str	r3, [r7, #20]
  if (n < s1) {
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d20d      	bcs.n	8008a54 <iq_read.lto_priv.230+0x4e>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	68b8      	ldr	r0, [r7, #8]
 8008a42:	f000 f8ff 	bl	8008c44 <memcpy>
    iqp->q_rdptr += n;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	699a      	ldr	r2, [r3, #24]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	441a      	add	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	619a      	str	r2, [r3, #24]
 8008a52:	e02b      	b.n	8008aac <iq_read.lto_priv.230+0xa6>
  else if (n > s1) {
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d91c      	bls.n	8008a96 <iq_read.lto_priv.230+0x90>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	4619      	mov	r1, r3
 8008a64:	68b8      	ldr	r0, [r7, #8]
 8008a66:	f000 f8ed 	bl	8008c44 <memcpy>
    bp += s1;
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	4413      	add	r3, r2
 8008a70:	60bb      	str	r3, [r7, #8]
    s2 = n - s1;
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	613b      	str	r3, [r7, #16]
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	4619      	mov	r1, r3
 8008a82:	68b8      	ldr	r0, [r7, #8]
 8008a84:	f000 f8de 	bl	8008c44 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	68da      	ldr	r2, [r3, #12]
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	441a      	add	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	619a      	str	r2, [r3, #24]
 8008a94:	e00a      	b.n	8008aac <iq_read.lto_priv.230+0xa6>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	68b8      	ldr	r0, [r7, #8]
 8008aa0:	f000 f8d0 	bl	8008c44 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	68da      	ldr	r2, [r3, #12]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	619a      	str	r2, [r3, #24]
  iqp->q_counter -= n;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	689a      	ldr	r2, [r3, #8]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	1ad2      	subs	r2, r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	609a      	str	r2, [r3, #8]
  return n;
 8008ab8:	687b      	ldr	r3, [r7, #4]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <oq_write.lto_priv.227>:
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b086      	sub	sp, #24
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	60f8      	str	r0, [r7, #12]
 8008aca:	60b9      	str	r1, [r7, #8]
 8008acc:	607a      	str	r2, [r7, #4]
  if (n > oqGetEmptyI(oqp)) {
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	689a      	ldr	r2, [r3, #8]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d202      	bcs.n	8008ade <oq_write.lto_priv.227+0x1c>
    n = oqGetEmptyI(oqp);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	607b      	str	r3, [r7, #4]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	617b      	str	r3, [r7, #20]
  if (n < s1) {
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d20d      	bcs.n	8008b10 <oq_write.lto_priv.227+0x4e>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	68b9      	ldr	r1, [r7, #8]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 f8a1 	bl	8008c44 <memcpy>
    oqp->q_wrptr += n;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	695a      	ldr	r2, [r3, #20]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	441a      	add	r2, r3
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	615a      	str	r2, [r3, #20]
 8008b0e:	e02b      	b.n	8008b68 <oq_write.lto_priv.227+0xa6>
  else if (n > s1) {
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d91c      	bls.n	8008b52 <oq_write.lto_priv.227+0x90>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	68b9      	ldr	r1, [r7, #8]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 f88f 	bl	8008c44 <memcpy>
    bp += s1;
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	60bb      	str	r3, [r7, #8]
    s2 = n - s1;
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	613b      	str	r3, [r7, #16]
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	68b9      	ldr	r1, [r7, #8]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 f880 	bl	8008c44 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	68da      	ldr	r2, [r3, #12]
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	441a      	add	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	615a      	str	r2, [r3, #20]
 8008b50:	e00a      	b.n	8008b68 <oq_write.lto_priv.227+0xa6>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	68b9      	ldr	r1, [r7, #8]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 f872 	bl	8008c44 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	68da      	ldr	r2, [r3, #12]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	615a      	str	r2, [r3, #20]
  oqp->q_counter -= n;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	1ad2      	subs	r2, r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	609a      	str	r2, [r3, #8]
  return n;
 8008b74:	687b      	ldr	r3, [r7, #4]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <iqObjectInit>:
                  qnotify_t infy, void *link) {
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	60f8      	str	r0, [r7, #12]
 8008b86:	60b9      	str	r1, [r7, #8]
 8008b88:	607a      	str	r2, [r7, #4]
 8008b8a:	603b      	str	r3, [r7, #0]
  osalThreadQueueObjectInit(&iqp->q_waiting);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff ff15 	bl	80089be <osalThreadQueueObjectInit.lto_priv.229>
  iqp->q_counter = 0;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	441a      	add	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	621a      	str	r2, [r3, #32]
}
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <iqPutI>:
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	70fb      	strb	r3, [r7, #3]
  if (!iqIsFullI(iqp)) {
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	695a      	ldr	r2, [r3, #20]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d105      	bne.n	8008bec <iqPutI+0x24>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <iqPutI+0x24>
 8008be8:	2301      	movs	r3, #1
 8008bea:	e000      	b.n	8008bee <iqPutI+0x26>
 8008bec:	2300      	movs	r3, #0
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f083 0301 	eor.w	r3, r3, #1
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d01c      	beq.n	8008c38 <iqPutI+0x70>
    iqp->q_counter++;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	609a      	str	r2, [r3, #8]
    *iqp->q_wrptr++ = b;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	1c59      	adds	r1, r3, #1
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	6151      	str	r1, [r2, #20]
 8008c12:	78fa      	ldrb	r2, [r7, #3]
 8008c14:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	695a      	ldr	r2, [r3, #20]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d303      	bcc.n	8008c2a <iqPutI+0x62>
      iqp->q_wrptr = iqp->q_buffer;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68da      	ldr	r2, [r3, #12]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	615a      	str	r2, [r3, #20]
    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7ff fedd 	bl	80089ee <osalThreadDequeueNextI.lto_priv.228>
    return MSG_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	e001      	b.n	8008c3c <iqPutI+0x74>
  return MSG_TIMEOUT;
 8008c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <memcpy>:
 8008c44:	b510      	push	{r4, lr}
 8008c46:	1e43      	subs	r3, r0, #1
 8008c48:	440a      	add	r2, r1
 8008c4a:	4291      	cmp	r1, r2
 8008c4c:	d100      	bne.n	8008c50 <memcpy+0xc>
 8008c4e:	bd10      	pop	{r4, pc}
 8008c50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c58:	e7f7      	b.n	8008c4a <memcpy+0x6>

08008c5a <memset>:
 8008c5a:	4402      	add	r2, r0
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d100      	bne.n	8008c64 <memset+0xa>
 8008c62:	4770      	bx	lr
 8008c64:	f803 1b01 	strb.w	r1, [r3], #1
 8008c68:	e7f9      	b.n	8008c5e <memset+0x4>
