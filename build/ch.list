
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000301 	.word	0x08000301
 8000008:	08000303 	.word	0x08000303
 800000c:	08000302 	.word	0x08000302
 8000010:	08000302 	.word	0x08000302
 8000014:	08000302 	.word	0x08000302
 8000018:	08000302 	.word	0x08000302
 800001c:	08000302 	.word	0x08000302
 8000020:	08000302 	.word	0x08000302
 8000024:	08000302 	.word	0x08000302
 8000028:	08000302 	.word	0x08000302
 800002c:	08000ecd 	.word	0x08000ecd
 8000030:	08000302 	.word	0x08000302
 8000034:	08000302 	.word	0x08000302
 8000038:	08000302 	.word	0x08000302
 800003c:	08000302 	.word	0x08000302
 8000040:	08000302 	.word	0x08000302
 8000044:	08000302 	.word	0x08000302
 8000048:	08000302 	.word	0x08000302
 800004c:	08000302 	.word	0x08000302
 8000050:	08000302 	.word	0x08000302
 8000054:	08000302 	.word	0x08000302
 8000058:	08000302 	.word	0x08000302
 800005c:	08000302 	.word	0x08000302
 8000060:	08000302 	.word	0x08000302
 8000064:	08000302 	.word	0x08000302
 8000068:	08000302 	.word	0x08000302
 800006c:	08006e89 	.word	0x08006e89
 8000070:	08006ec9 	.word	0x08006ec9
 8000074:	08006f0d 	.word	0x08006f0d
 8000078:	08006f51 	.word	0x08006f51
 800007c:	08006f95 	.word	0x08006f95
 8000080:	08006fd5 	.word	0x08006fd5
 8000084:	08007019 	.word	0x08007019
 8000088:	08000302 	.word	0x08000302
 800008c:	08000302 	.word	0x08000302
 8000090:	08000302 	.word	0x08000302
 8000094:	08000302 	.word	0x08000302
 8000098:	08000302 	.word	0x08000302
 800009c:	08000302 	.word	0x08000302
 80000a0:	08000302 	.word	0x08000302
 80000a4:	08000302 	.word	0x08000302
 80000a8:	08000302 	.word	0x08000302
 80000ac:	08000302 	.word	0x08000302
 80000b0:	0800441f 	.word	0x0800441f
 80000b4:	08000302 	.word	0x08000302
 80000b8:	08000302 	.word	0x08000302
 80000bc:	08000302 	.word	0x08000302
 80000c0:	08000302 	.word	0x08000302
 80000c4:	08000302 	.word	0x08000302
 80000c8:	08000302 	.word	0x08000302
 80000cc:	08000302 	.word	0x08000302
 80000d0:	08000302 	.word	0x08000302
 80000d4:	08004749 	.word	0x08004749
 80000d8:	0800475d 	.word	0x0800475d
 80000dc:	08000302 	.word	0x08000302
 80000e0:	08000302 	.word	0x08000302
 80000e4:	08000302 	.word	0x08000302
 80000e8:	08000302 	.word	0x08000302
 80000ec:	08000302 	.word	0x08000302
 80000f0:	08000302 	.word	0x08000302
 80000f4:	08000302 	.word	0x08000302
 80000f8:	08000302 	.word	0x08000302
 80000fc:	0800705d 	.word	0x0800705d
 8000100:	08000302 	.word	0x08000302
 8000104:	08000302 	.word	0x08000302
 8000108:	08000302 	.word	0x08000302
 800010c:	08000302 	.word	0x08000302
 8000110:	08000302 	.word	0x08000302
 8000114:	08000302 	.word	0x08000302
 8000118:	08000302 	.word	0x08000302
 800011c:	08000302 	.word	0x08000302
 8000120:	08004bb1 	.word	0x08004bb1
 8000124:	08004bf1 	.word	0x08004bf1
 8000128:	08004c35 	.word	0x08004c35
 800012c:	08004c79 	.word	0x08004c79
 8000130:	08004cbd 	.word	0x08004cbd
 8000134:	08000302 	.word	0x08000302
 8000138:	08000302 	.word	0x08000302
 800013c:	08000302 	.word	0x08000302
 8000140:	08000302 	.word	0x08000302
 8000144:	08000302 	.word	0x08000302
 8000148:	08000302 	.word	0x08000302
 800014c:	08005969 	.word	0x08005969
 8000150:	08004cfd 	.word	0x08004cfd
 8000154:	08004d41 	.word	0x08004d41
 8000158:	08004d85 	.word	0x08004d85
 800015c:	08002d99 	.word	0x08002d99
 8000160:	08000302 	.word	0x08000302
 8000164:	08000302 	.word	0x08000302
 8000168:	08000302 	.word	0x08000302
 800016c:	08000302 	.word	0x08000302
 8000170:	08000302 	.word	0x08000302
 8000174:	08000302 	.word	0x08000302
 8000178:	08000302 	.word	0x08000302
 800017c:	08000302 	.word	0x08000302
 8000180:	08000302 	.word	0x08000302
 8000184:	08000302 	.word	0x08000302
 8000188:	08000302 	.word	0x08000302
 800018c:	08000302 	.word	0x08000302
 8000190:	08000302 	.word	0x08000302
 8000194:	08000302 	.word	0x08000302
 8000198:	08000302 	.word	0x08000302
 800019c:	08000302 	.word	0x08000302
 80001a0:	08000302 	.word	0x08000302
 80001a4:	08000302 	.word	0x08000302
 80001a8:	08000302 	.word	0x08000302
 80001ac:	08000302 	.word	0x08000302
 80001b0:	08000302 	.word	0x08000302
 80001b4:	08000302 	.word	0x08000302
 80001b8:	08000302 	.word	0x08000302
 80001bc:	08000302 	.word	0x08000302
 80001c0:	08000302 	.word	0x08000302
 80001c4:	08000302 	.word	0x08000302
 80001c8:	08000302 	.word	0x08000302
 80001cc:	08000302 	.word	0x08000302
 80001d0:	08000302 	.word	0x08000302
 80001d4:	08000302 	.word	0x08000302
 80001d8:	08000302 	.word	0x08000302
 80001dc:	08000302 	.word	0x08000302

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4839      	ldr	r0, [pc, #228]	; (80002c8 <endfiniloop+0x6>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4838      	ldr	r0, [pc, #224]	; (80002cc <endfiniloop+0xa>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4838      	ldr	r0, [pc, #224]	; (80002d0 <endfiniloop+0xe>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001fa:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80001fe:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 8000202:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 8000206:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800020a:	6008      	str	r0, [r1, #0]
                dsb
 800020c:	f3bf 8f4f 	dsb	sy
                isb
 8000210:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 8000214:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 8000218:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 800021c:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 8000220:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000224:	6008      	str	r0, [r1, #0]
                dsb
 8000226:	f3bf 8f4f 	dsb	sy
                isb
 800022a:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 800022e:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 8000232:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 8000236:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 800023a:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800023e:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 8000240:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 8000242:	f380 8814 	msr	CONTROL, r0
                isb
 8000246:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 800024a:	f007 fe56 	bl	8007efa <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 800024e:	f002 ff19 	bl	8003084 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000252:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000256:	491f      	ldr	r1, [pc, #124]	; (80002d4 <endfiniloop+0x12>)
                ldr     r2, =__main_stack_end__
 8000258:	4a1b      	ldr	r2, [pc, #108]	; (80002c8 <endfiniloop+0x6>)

0800025a <msloop>:
msloop:
                cmp     r1, r2
 800025a:	4291      	cmp	r1, r2
                itt     lo
 800025c:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800025e:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000262:	e7fa      	bcc.n	800025a <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000264:	491c      	ldr	r1, [pc, #112]	; (80002d8 <endfiniloop+0x16>)
                ldr     r2, =__process_stack_end__
 8000266:	4a19      	ldr	r2, [pc, #100]	; (80002cc <endfiniloop+0xa>)

08000268 <psloop>:
psloop:
                cmp     r1, r2
 8000268:	4291      	cmp	r1, r2
                itt     lo
 800026a:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026c:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 8000270:	e7fa      	bcc.n	8000268 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 8000272:	491a      	ldr	r1, [pc, #104]	; (80002dc <endfiniloop+0x1a>)
                ldr     r2, =_data_start
 8000274:	4a1a      	ldr	r2, [pc, #104]	; (80002e0 <endfiniloop+0x1e>)
                ldr     r3, =_data_end
 8000276:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <endfiniloop+0x22>)

08000278 <dloop>:
dloop:
                cmp     r2, r3
 8000278:	429a      	cmp	r2, r3
                ittt    lo
 800027a:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 800027c:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 8000280:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 8000284:	e7f8      	bcc.n	8000278 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000286:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000288:	4917      	ldr	r1, [pc, #92]	; (80002e8 <endfiniloop+0x26>)
                ldr     r2, =_bss_end
 800028a:	4a18      	ldr	r2, [pc, #96]	; (80002ec <endfiniloop+0x2a>)

0800028c <bloop>:
bloop:
                cmp     r1, r2
 800028c:	4291      	cmp	r1, r2
                itt     lo
 800028e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000290:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 8000294:	e7fa      	bcc.n	800028c <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000296:	f007 fe3f 	bl	8007f18 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 800029a:	f007 fe34 	bl	8007f06 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 800029e:	4c14      	ldr	r4, [pc, #80]	; (80002f0 <endfiniloop+0x2e>)
                ldr     r5, =__init_array_end
 80002a0:	4d14      	ldr	r5, [pc, #80]	; (80002f4 <endfiniloop+0x32>)

080002a2 <initloop>:
initloop:
                cmp     r4, r5
 80002a2:	42ac      	cmp	r4, r5
                bge     endinitloop
 80002a4:	da03      	bge.n	80002ae <endinitloop>
                ldr     r1, [r4], #4
 80002a6:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002aa:	4788      	blx	r1
                b       initloop
 80002ac:	e7f9      	b.n	80002a2 <initloop>

080002ae <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80002ae:	f001 ff4f 	bl	8002150 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80002b2:	4c11      	ldr	r4, [pc, #68]	; (80002f8 <endfiniloop+0x36>)
                ldr     r5, =__fini_array_end
 80002b4:	4d11      	ldr	r5, [pc, #68]	; (80002fc <endfiniloop+0x3a>)

080002b6 <finiloop>:
finiloop:
                cmp     r4, r5
 80002b6:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80002b8:	da03      	bge.n	80002c2 <endfiniloop>
                ldr     r1, [r4], #4
 80002ba:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002be:	4788      	blx	r1
                b       finiloop
 80002c0:	e7f9      	b.n	80002b6 <finiloop>

080002c2 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80002c2:	f007 be26 	b.w	8007f12 <__default_exit>
 80002c6:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 80002c8:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002cc:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002d0:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002d4:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002d8:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 80002dc:	080093d4 	.word	0x080093d4
                ldr     r2, =_data_start
 80002e0:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 80002e4:	20000844 	.word	0x20000844
                ldr     r1, =_bss_start
 80002e8:	20000848 	.word	0x20000848
                ldr     r2, =_bss_end
 80002ec:	200013d0 	.word	0x200013d0
                ldr     r4, =__init_array_start
 80002f0:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002f4:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_start
 80002f8:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end
 80002fc:	080001e0 	.word	0x080001e0

08000300 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000300:	e76e      	b.n	80001e0 <_crt0_entry>

08000302 <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
        bl          _unhandled_exception
 8000302:	f000 f800 	bl	8000306 <_unhandled_exception>

08000306 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 8000306:	e7fe      	b.n	8000306 <_unhandled_exception>

08000308 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
 800030c:	ed2d 8a10 	vpush	{s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000310:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000314:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 8000316:	469d      	mov	sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
 8000318:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800031c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000320 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000320:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000322:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000326:	4628      	mov	r0, r5
                blx     r4
 8000328:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 800032a:	2000      	movs	r0, #0
                bl      chThdExit
 800032c:	f002 fbc0 	bl	8002ab0 <chThdExit>

08000330 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000330:	f003 fbf2 	bl	8003b18 <chSchDoReschedule>

08000334 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000334:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000336:	e7fe      	b.n	8000336 <_port_exit_from_isr+0x2>

08000338 <__aeabi_drsub>:
 8000338:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800033c:	e002      	b.n	8000344 <__adddf3>
 800033e:	bf00      	nop

08000340 <__aeabi_dsub>:
 8000340:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000344 <__adddf3>:
 8000344:	b530      	push	{r4, r5, lr}
 8000346:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800034a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800034e:	ea94 0f05 	teq	r4, r5
 8000352:	bf08      	it	eq
 8000354:	ea90 0f02 	teqeq	r0, r2
 8000358:	bf1f      	itttt	ne
 800035a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800035e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000362:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000366:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800036a:	f000 80e2 	beq.w	8000532 <__adddf3+0x1ee>
 800036e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000372:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000376:	bfb8      	it	lt
 8000378:	426d      	neglt	r5, r5
 800037a:	dd0c      	ble.n	8000396 <__adddf3+0x52>
 800037c:	442c      	add	r4, r5
 800037e:	ea80 0202 	eor.w	r2, r0, r2
 8000382:	ea81 0303 	eor.w	r3, r1, r3
 8000386:	ea82 0000 	eor.w	r0, r2, r0
 800038a:	ea83 0101 	eor.w	r1, r3, r1
 800038e:	ea80 0202 	eor.w	r2, r0, r2
 8000392:	ea81 0303 	eor.w	r3, r1, r3
 8000396:	2d36      	cmp	r5, #54	; 0x36
 8000398:	bf88      	it	hi
 800039a:	bd30      	pophi	{r4, r5, pc}
 800039c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003ac:	d002      	beq.n	80003b4 <__adddf3+0x70>
 80003ae:	4240      	negs	r0, r0
 80003b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c0:	d002      	beq.n	80003c8 <__adddf3+0x84>
 80003c2:	4252      	negs	r2, r2
 80003c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c8:	ea94 0f05 	teq	r4, r5
 80003cc:	f000 80a7 	beq.w	800051e <__adddf3+0x1da>
 80003d0:	f1a4 0401 	sub.w	r4, r4, #1
 80003d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d8:	db0d      	blt.n	80003f6 <__adddf3+0xb2>
 80003da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003de:	fa22 f205 	lsr.w	r2, r2, r5
 80003e2:	1880      	adds	r0, r0, r2
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80003ec:	1880      	adds	r0, r0, r2
 80003ee:	fa43 f305 	asr.w	r3, r3, r5
 80003f2:	4159      	adcs	r1, r3
 80003f4:	e00e      	b.n	8000414 <__adddf3+0xd0>
 80003f6:	f1a5 0520 	sub.w	r5, r5, #32
 80003fa:	f10e 0e20 	add.w	lr, lr, #32
 80003fe:	2a01      	cmp	r2, #1
 8000400:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000404:	bf28      	it	cs
 8000406:	f04c 0c02 	orrcs.w	ip, ip, #2
 800040a:	fa43 f305 	asr.w	r3, r3, r5
 800040e:	18c0      	adds	r0, r0, r3
 8000410:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	d507      	bpl.n	800042a <__adddf3+0xe6>
 800041a:	f04f 0e00 	mov.w	lr, #0
 800041e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000422:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000426:	eb6e 0101 	sbc.w	r1, lr, r1
 800042a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800042e:	d31b      	bcc.n	8000468 <__adddf3+0x124>
 8000430:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000434:	d30c      	bcc.n	8000450 <__adddf3+0x10c>
 8000436:	0849      	lsrs	r1, r1, #1
 8000438:	ea5f 0030 	movs.w	r0, r0, rrx
 800043c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000440:	f104 0401 	add.w	r4, r4, #1
 8000444:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000448:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800044c:	f080 809a 	bcs.w	8000584 <__adddf3+0x240>
 8000450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000454:	bf08      	it	eq
 8000456:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800045a:	f150 0000 	adcs.w	r0, r0, #0
 800045e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000462:	ea41 0105 	orr.w	r1, r1, r5
 8000466:	bd30      	pop	{r4, r5, pc}
 8000468:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800046c:	4140      	adcs	r0, r0
 800046e:	eb41 0101 	adc.w	r1, r1, r1
 8000472:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000476:	f1a4 0401 	sub.w	r4, r4, #1
 800047a:	d1e9      	bne.n	8000450 <__adddf3+0x10c>
 800047c:	f091 0f00 	teq	r1, #0
 8000480:	bf04      	itt	eq
 8000482:	4601      	moveq	r1, r0
 8000484:	2000      	moveq	r0, #0
 8000486:	fab1 f381 	clz	r3, r1
 800048a:	bf08      	it	eq
 800048c:	3320      	addeq	r3, #32
 800048e:	f1a3 030b 	sub.w	r3, r3, #11
 8000492:	f1b3 0220 	subs.w	r2, r3, #32
 8000496:	da0c      	bge.n	80004b2 <__adddf3+0x16e>
 8000498:	320c      	adds	r2, #12
 800049a:	dd08      	ble.n	80004ae <__adddf3+0x16a>
 800049c:	f102 0c14 	add.w	ip, r2, #20
 80004a0:	f1c2 020c 	rsb	r2, r2, #12
 80004a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a8:	fa21 f102 	lsr.w	r1, r1, r2
 80004ac:	e00c      	b.n	80004c8 <__adddf3+0x184>
 80004ae:	f102 0214 	add.w	r2, r2, #20
 80004b2:	bfd8      	it	le
 80004b4:	f1c2 0c20 	rsble	ip, r2, #32
 80004b8:	fa01 f102 	lsl.w	r1, r1, r2
 80004bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c0:	bfdc      	itt	le
 80004c2:	ea41 010c 	orrle.w	r1, r1, ip
 80004c6:	4090      	lslle	r0, r2
 80004c8:	1ae4      	subs	r4, r4, r3
 80004ca:	bfa2      	ittt	ge
 80004cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d0:	4329      	orrge	r1, r5
 80004d2:	bd30      	popge	{r4, r5, pc}
 80004d4:	ea6f 0404 	mvn.w	r4, r4
 80004d8:	3c1f      	subs	r4, #31
 80004da:	da1c      	bge.n	8000516 <__adddf3+0x1d2>
 80004dc:	340c      	adds	r4, #12
 80004de:	dc0e      	bgt.n	80004fe <__adddf3+0x1ba>
 80004e0:	f104 0414 	add.w	r4, r4, #20
 80004e4:	f1c4 0220 	rsb	r2, r4, #32
 80004e8:	fa20 f004 	lsr.w	r0, r0, r4
 80004ec:	fa01 f302 	lsl.w	r3, r1, r2
 80004f0:	ea40 0003 	orr.w	r0, r0, r3
 80004f4:	fa21 f304 	lsr.w	r3, r1, r4
 80004f8:	ea45 0103 	orr.w	r1, r5, r3
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	f1c4 040c 	rsb	r4, r4, #12
 8000502:	f1c4 0220 	rsb	r2, r4, #32
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 f304 	lsl.w	r3, r1, r4
 800050e:	ea40 0003 	orr.w	r0, r0, r3
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	fa21 f004 	lsr.w	r0, r1, r4
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	f094 0f00 	teq	r4, #0
 8000522:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000526:	bf06      	itte	eq
 8000528:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800052c:	3401      	addeq	r4, #1
 800052e:	3d01      	subne	r5, #1
 8000530:	e74e      	b.n	80003d0 <__adddf3+0x8c>
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf18      	it	ne
 8000538:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053c:	d029      	beq.n	8000592 <__adddf3+0x24e>
 800053e:	ea94 0f05 	teq	r4, r5
 8000542:	bf08      	it	eq
 8000544:	ea90 0f02 	teqeq	r0, r2
 8000548:	d005      	beq.n	8000556 <__adddf3+0x212>
 800054a:	ea54 0c00 	orrs.w	ip, r4, r0
 800054e:	bf04      	itt	eq
 8000550:	4619      	moveq	r1, r3
 8000552:	4610      	moveq	r0, r2
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	ea91 0f03 	teq	r1, r3
 800055a:	bf1e      	ittt	ne
 800055c:	2100      	movne	r1, #0
 800055e:	2000      	movne	r0, #0
 8000560:	bd30      	popne	{r4, r5, pc}
 8000562:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000566:	d105      	bne.n	8000574 <__adddf3+0x230>
 8000568:	0040      	lsls	r0, r0, #1
 800056a:	4149      	adcs	r1, r1
 800056c:	bf28      	it	cs
 800056e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000578:	bf3c      	itt	cc
 800057a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800057e:	bd30      	popcc	{r4, r5, pc}
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000588:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800058c:	f04f 0000 	mov.w	r0, #0
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000596:	bf1a      	itte	ne
 8000598:	4619      	movne	r1, r3
 800059a:	4610      	movne	r0, r2
 800059c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a0:	bf1c      	itt	ne
 80005a2:	460b      	movne	r3, r1
 80005a4:	4602      	movne	r2, r0
 80005a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005aa:	bf06      	itte	eq
 80005ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b0:	ea91 0f03 	teqeq	r1, r3
 80005b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop

080005bc <__aeabi_ui2d>:
 80005bc:	f090 0f00 	teq	r0, #0
 80005c0:	bf04      	itt	eq
 80005c2:	2100      	moveq	r1, #0
 80005c4:	4770      	bxeq	lr
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d0:	f04f 0500 	mov.w	r5, #0
 80005d4:	f04f 0100 	mov.w	r1, #0
 80005d8:	e750      	b.n	800047c <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_i2d>:
 80005dc:	f090 0f00 	teq	r0, #0
 80005e0:	bf04      	itt	eq
 80005e2:	2100      	moveq	r1, #0
 80005e4:	4770      	bxeq	lr
 80005e6:	b530      	push	{r4, r5, lr}
 80005e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005f4:	bf48      	it	mi
 80005f6:	4240      	negmi	r0, r0
 80005f8:	f04f 0100 	mov.w	r1, #0
 80005fc:	e73e      	b.n	800047c <__adddf3+0x138>
 80005fe:	bf00      	nop

08000600 <__aeabi_f2d>:
 8000600:	0042      	lsls	r2, r0, #1
 8000602:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000606:	ea4f 0131 	mov.w	r1, r1, rrx
 800060a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800060e:	bf1f      	itttt	ne
 8000610:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000614:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000618:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800061c:	4770      	bxne	lr
 800061e:	f092 0f00 	teq	r2, #0
 8000622:	bf14      	ite	ne
 8000624:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e720      	b.n	800047c <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aedc 	beq.w	800042a <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6c1      	b.n	800042a <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b97a 	b.w	8000ec8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	9e08      	ldr	r6, [sp, #32]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d151      	bne.n	8000ca0 <__udivmoddi4+0xb4>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4617      	mov	r7, r2
 8000c00:	d96d      	bls.n	8000cde <__udivmoddi4+0xf2>
 8000c02:	fab2 fe82 	clz	lr, r2
 8000c06:	f1be 0f00 	cmp.w	lr, #0
 8000c0a:	d00b      	beq.n	8000c24 <__udivmoddi4+0x38>
 8000c0c:	f1ce 0c20 	rsb	ip, lr, #32
 8000c10:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c14:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c18:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c1c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c20:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c24:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c28:	0c25      	lsrs	r5, r4, #16
 8000c2a:	fbbc f8fa 	udiv	r8, ip, sl
 8000c2e:	fa1f f987 	uxth.w	r9, r7
 8000c32:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c36:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c3a:	fb08 f309 	mul.w	r3, r8, r9
 8000c3e:	42ab      	cmp	r3, r5
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x6c>
 8000c42:	19ed      	adds	r5, r5, r7
 8000c44:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c48:	f080 8123 	bcs.w	8000e92 <__udivmoddi4+0x2a6>
 8000c4c:	42ab      	cmp	r3, r5
 8000c4e:	f240 8120 	bls.w	8000e92 <__udivmoddi4+0x2a6>
 8000c52:	f1a8 0802 	sub.w	r8, r8, #2
 8000c56:	443d      	add	r5, r7
 8000c58:	1aed      	subs	r5, r5, r3
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c60:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c64:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c68:	fb00 f909 	mul.w	r9, r0, r9
 8000c6c:	45a1      	cmp	r9, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x98>
 8000c70:	19e4      	adds	r4, r4, r7
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c76:	f080 810a 	bcs.w	8000e8e <__udivmoddi4+0x2a2>
 8000c7a:	45a1      	cmp	r9, r4
 8000c7c:	f240 8107 	bls.w	8000e8e <__udivmoddi4+0x2a2>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	eba4 0409 	sub.w	r4, r4, r9
 8000c88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d061      	beq.n	8000d56 <__udivmoddi4+0x16a>
 8000c92:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c96:	2300      	movs	r3, #0
 8000c98:	6034      	str	r4, [r6, #0]
 8000c9a:	6073      	str	r3, [r6, #4]
 8000c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0xc8>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d054      	beq.n	8000d52 <__udivmoddi4+0x166>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	f040 808e 	bne.w	8000dda <__udivmoddi4+0x1ee>
 8000cbe:	42ab      	cmp	r3, r5
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xdc>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2d0>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb65 0503 	sbc.w	r5, r5, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	46ac      	mov	ip, r5
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d03f      	beq.n	8000d56 <__udivmoddi4+0x16a>
 8000cd6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b912      	cbnz	r2, 8000ce6 <__udivmoddi4+0xfa>
 8000ce0:	2701      	movs	r7, #1
 8000ce2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ce6:	fab7 fe87 	clz	lr, r7
 8000cea:	f1be 0f00 	cmp.w	lr, #0
 8000cee:	d134      	bne.n	8000d5a <__udivmoddi4+0x16e>
 8000cf0:	1beb      	subs	r3, r5, r7
 8000cf2:	0c3a      	lsrs	r2, r7, #16
 8000cf4:	fa1f fc87 	uxth.w	ip, r7
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cfe:	0c25      	lsrs	r5, r4, #16
 8000d00:	fb02 3318 	mls	r3, r2, r8, r3
 8000d04:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d08:	fb0c f308 	mul.w	r3, ip, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x134>
 8000d10:	19ed      	adds	r5, r5, r7
 8000d12:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x132>
 8000d18:	42ab      	cmp	r3, r5
 8000d1a:	f200 80d1 	bhi.w	8000ec0 <__udivmoddi4+0x2d4>
 8000d1e:	4680      	mov	r8, r0
 8000d20:	1aed      	subs	r5, r5, r3
 8000d22:	b2a3      	uxth	r3, r4
 8000d24:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d28:	fb02 5510 	mls	r5, r2, r0, r5
 8000d2c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d30:	fb0c fc00 	mul.w	ip, ip, r0
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0x15c>
 8000d38:	19e4      	adds	r4, r4, r7
 8000d3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x15a>
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	f200 80b8 	bhi.w	8000eb6 <__udivmoddi4+0x2ca>
 8000d46:	4618      	mov	r0, r3
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d50:	e79d      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000d52:	4631      	mov	r1, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	f1ce 0420 	rsb	r4, lr, #32
 8000d5e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d62:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d66:	fa20 f804 	lsr.w	r8, r0, r4
 8000d6a:	0c3a      	lsrs	r2, r7, #16
 8000d6c:	fa25 f404 	lsr.w	r4, r5, r4
 8000d70:	ea48 0803 	orr.w	r8, r8, r3
 8000d74:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d78:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d7c:	fb02 4411 	mls	r4, r2, r1, r4
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d88:	fb01 f30c 	mul.w	r3, r1, ip
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x1bc>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d9a:	f080 808a 	bcs.w	8000eb2 <__udivmoddi4+0x2c6>
 8000d9e:	42ab      	cmp	r3, r5
 8000da0:	f240 8087 	bls.w	8000eb2 <__udivmoddi4+0x2c6>
 8000da4:	3902      	subs	r1, #2
 8000da6:	443d      	add	r5, r7
 8000da8:	1aeb      	subs	r3, r5, r3
 8000daa:	fa1f f588 	uxth.w	r5, r8
 8000dae:	fbb3 f0f2 	udiv	r0, r3, r2
 8000db2:	fb02 3310 	mls	r3, r2, r0, r3
 8000db6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dba:	fb00 f30c 	mul.w	r3, r0, ip
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1e6>
 8000dc2:	19ed      	adds	r5, r5, r7
 8000dc4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dc8:	d26f      	bcs.n	8000eaa <__udivmoddi4+0x2be>
 8000dca:	42ab      	cmp	r3, r5
 8000dcc:	d96d      	bls.n	8000eaa <__udivmoddi4+0x2be>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	443d      	add	r5, r7
 8000dd2:	1aeb      	subs	r3, r5, r3
 8000dd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd8:	e78f      	b.n	8000cfa <__udivmoddi4+0x10e>
 8000dda:	f1c1 0720 	rsb	r7, r1, #32
 8000dde:	fa22 f807 	lsr.w	r8, r2, r7
 8000de2:	408b      	lsls	r3, r1
 8000de4:	fa05 f401 	lsl.w	r4, r5, r1
 8000de8:	ea48 0303 	orr.w	r3, r8, r3
 8000dec:	fa20 fe07 	lsr.w	lr, r0, r7
 8000df0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000df4:	40fd      	lsrs	r5, r7
 8000df6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dfa:	fbb5 f9fc 	udiv	r9, r5, ip
 8000dfe:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e02:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e06:	fa1f f883 	uxth.w	r8, r3
 8000e0a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e0e:	fb09 f408 	mul.w	r4, r9, r8
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	fa02 f201 	lsl.w	r2, r2, r1
 8000e18:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x244>
 8000e1e:	18ed      	adds	r5, r5, r3
 8000e20:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e24:	d243      	bcs.n	8000eae <__udivmoddi4+0x2c2>
 8000e26:	42ac      	cmp	r4, r5
 8000e28:	d941      	bls.n	8000eae <__udivmoddi4+0x2c2>
 8000e2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e2e:	441d      	add	r5, r3
 8000e30:	1b2d      	subs	r5, r5, r4
 8000e32:	fa1f fe8e 	uxth.w	lr, lr
 8000e36:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e3a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e3e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e42:	fb00 f808 	mul.w	r8, r0, r8
 8000e46:	45a0      	cmp	r8, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x26e>
 8000e4a:	18e4      	adds	r4, r4, r3
 8000e4c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e50:	d229      	bcs.n	8000ea6 <__udivmoddi4+0x2ba>
 8000e52:	45a0      	cmp	r8, r4
 8000e54:	d927      	bls.n	8000ea6 <__udivmoddi4+0x2ba>
 8000e56:	3802      	subs	r0, #2
 8000e58:	441c      	add	r4, r3
 8000e5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5e:	eba4 0408 	sub.w	r4, r4, r8
 8000e62:	fba0 8902 	umull	r8, r9, r0, r2
 8000e66:	454c      	cmp	r4, r9
 8000e68:	46c6      	mov	lr, r8
 8000e6a:	464d      	mov	r5, r9
 8000e6c:	d315      	bcc.n	8000e9a <__udivmoddi4+0x2ae>
 8000e6e:	d012      	beq.n	8000e96 <__udivmoddi4+0x2aa>
 8000e70:	b156      	cbz	r6, 8000e88 <__udivmoddi4+0x29c>
 8000e72:	ebba 030e 	subs.w	r3, sl, lr
 8000e76:	eb64 0405 	sbc.w	r4, r4, r5
 8000e7a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431f      	orrs	r7, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	6037      	str	r7, [r6, #0]
 8000e86:	6074      	str	r4, [r6, #4]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	e6f8      	b.n	8000c84 <__udivmoddi4+0x98>
 8000e92:	4690      	mov	r8, r2
 8000e94:	e6e0      	b.n	8000c58 <__udivmoddi4+0x6c>
 8000e96:	45c2      	cmp	sl, r8
 8000e98:	d2ea      	bcs.n	8000e70 <__udivmoddi4+0x284>
 8000e9a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e9e:	eb69 0503 	sbc.w	r5, r9, r3
 8000ea2:	3801      	subs	r0, #1
 8000ea4:	e7e4      	b.n	8000e70 <__udivmoddi4+0x284>
 8000ea6:	4628      	mov	r0, r5
 8000ea8:	e7d7      	b.n	8000e5a <__udivmoddi4+0x26e>
 8000eaa:	4640      	mov	r0, r8
 8000eac:	e791      	b.n	8000dd2 <__udivmoddi4+0x1e6>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	e7be      	b.n	8000e30 <__udivmoddi4+0x244>
 8000eb2:	4601      	mov	r1, r0
 8000eb4:	e778      	b.n	8000da8 <__udivmoddi4+0x1bc>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	e745      	b.n	8000d48 <__udivmoddi4+0x15c>
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xe6>
 8000ec0:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec4:	443d      	add	r5, r7
 8000ec6:	e72b      	b.n	8000d20 <__udivmoddi4+0x134>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8000ed2:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <SVC_Handler+0x38>)
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <SVC_Handler+0x38>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f023 0301 	bic.w	r3, r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000ede:	f3ef 8309 	mrs	r3, PSP
 8000ee2:	461c      	mov	r4, r3
  return(result);
 8000ee4:	4623      	mov	r3, r4
#endif

  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();
 8000ee6:	607b      	str	r3, [r7, #4]

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3368      	adds	r3, #104	; 0x68
 8000eec:	607b      	str	r3, [r7, #4]

  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	f383 8809 	msr	PSP, r3

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
 8000ef8:	f001 fcb1 	bl	800285e <port_unlock_from_isr.lto_priv.4>
}
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd90      	pop	{r4, r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000ef30 	.word	0xe000ef30

08000f08 <_port_irq_epilogue>:
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 8000f0e:	f001 fca1 	bl	8002854 <port_lock_from_isr.lto_priv.6>
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <_port_irq_epilogue+0x6c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d025      	beq.n	8000f6a <_port_irq_epilogue+0x62>
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
#else
  uint32_t result;

  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8000f1e:	eef1 3a10 	vmrs	r3, fpscr
 8000f22:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000f24:	f3ef 8309 	mrs	r3, PSP
 8000f28:	461c      	mov	r4, r3
  return(result);
 8000f2a:	4623      	mov	r3, r4
      /* Enforcing a lazy FPU state save by accessing the FPCSR register.*/
      (void) __get_FPSCR();
#endif

    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();
 8000f2c:	60fb      	str	r3, [r7, #12]

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3b68      	subs	r3, #104	; 0x68
 8000f32:	60fb      	str	r3, [r7, #12]

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f3a:	61da      	str	r2, [r3, #28]
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <_port_irq_epilogue+0x70>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	461a      	mov	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	661a      	str	r2, [r3, #96]	; 0x60
#endif

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f383 8809 	msr	PSP, r3

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000f50:	f002 fdc8 	bl	8003ae4 <chSchIsPreemptionRequired>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <_port_irq_epilogue+0x5a>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <_port_irq_epilogue+0x74>)
 8000f5e:	619a      	str	r2, [r3, #24]
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000f60:	e005      	b.n	8000f6e <_port_irq_epilogue+0x66>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <_port_irq_epilogue+0x78>)
 8000f66:	619a      	str	r2, [r3, #24]
 8000f68:	e001      	b.n	8000f6e <_port_irq_epilogue+0x66>

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
 8000f6a:	f001 fc78 	bl	800285e <port_unlock_from_isr.lto_priv.4>
}
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd90      	pop	{r4, r7, pc}
 8000f74:	e000ed00 	.word	0xe000ed00
 8000f78:	e000ef30 	.word	0xe000ef30
 8000f7c:	08000331 	.word	0x08000331
 8000f80:	08000334 	.word	0x08000334

08000f84 <osalThreadSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
static inline void osalThreadSleep(sysinterval_t delay) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  chThdSleep(delay);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f001 fdd5 	bl	8002b3c <chThdSleep>
}
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <l3gd20SPIReadRegister>:
 * @param[in] reg       starting register address
 * @param[in] n         number of consecutive registers to read
 * @param[in] b         pointer to an output buffer.
 */
static void l3gd20SPIReadRegister(SPIDriver *spip, uint8_t reg,  size_t n,
                                     uint8_t* b) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	72fb      	strb	r3, [r7, #11]
  uint8_t cmd;
  (n == 1) ? (cmd = reg | L3GD20_RW) : (cmd = reg | L3GD20_RW | L3GD20_MS);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d105      	bne.n	8000fba <l3gd20SPIReadRegister+0x22>
 8000fae:	7afb      	ldrb	r3, [r7, #11]
 8000fb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	75fb      	strb	r3, [r7, #23]
 8000fb8:	e004      	b.n	8000fc4 <l3gd20SPIReadRegister+0x2c>
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	75fb      	strb	r3, [r7, #23]
  spiSelect(spip);
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f006 ff0a 	bl	8007dde <spiSelect>
  spiSend(spip, 1, &cmd);
 8000fca:	f107 0317 	add.w	r3, r7, #23
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f006 ff2f 	bl	8007e36 <spiSend>
  spiReceive(spip, n, b);
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f006 ff44 	bl	8007e6a <spiReceive>
  spiUnselect(spip);
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f006 ff11 	bl	8007e0a <spiUnselect>
}
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <l3gd20SPIWriteRegister>:
 * @param[in] reg       starting register address
 * @param[in] n         number of adjacent registers to write
 * @param[in] b         pointer to a buffer of values.
 */
static void l3gd20SPIWriteRegister(SPIDriver *spip, uint8_t reg, size_t n,
                                   uint8_t* b) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	72fb      	strb	r3, [r7, #11]
  uint8_t cmd;
  (n == 1) ? (cmd = reg) : (cmd = reg | L3GD20_MS);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d102      	bne.n	800100a <l3gd20SPIWriteRegister+0x1c>
 8001004:	7afb      	ldrb	r3, [r7, #11]
 8001006:	75fb      	strb	r3, [r7, #23]
 8001008:	e004      	b.n	8001014 <l3gd20SPIWriteRegister+0x26>
 800100a:	7afb      	ldrb	r3, [r7, #11]
 800100c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001010:	b2db      	uxtb	r3, r3
 8001012:	75fb      	strb	r3, [r7, #23]
  spiSelect(spip);
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f006 fee2 	bl	8007dde <spiSelect>
  spiSend(spip, 1, &cmd);
 800101a:	f107 0317 	add.w	r3, r7, #23
 800101e:	461a      	mov	r2, r3
 8001020:	2101      	movs	r1, #1
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f006 ff07 	bl	8007e36 <spiSend>
  spiSend(spip, n, b);
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f006 ff02 	bl	8007e36 <spiSend>
  spiUnselect(spip);
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f006 fee9 	bl	8007e0a <spiUnselect>
}
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <gyro_get_axes_number>:
 *
 * @param[in] ip        pointer to @p BaseGyroscope interface.
 *
 * @return              the number of axes.
 */
static size_t gyro_get_axes_number(void *ip) {
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  (void)ip;
  
  return L3GD20_GYRO_NUMBER_OF_AXES;
 8001046:	2303      	movs	r3, #3
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <gyro_read_raw>:
 * @param[out] axes     a buffer which would be filled with raw data.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_read_raw(void *ip, int32_t axes[L3GD20_GYRO_NUMBER_OF_AXES]) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  L3GD20Driver* devp;
  int16_t tmp;
  uint8_t i, buff [2 * L3GD20_GYRO_NUMBER_OF_AXES];
  msg_t msg = MSG_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  
  osalDbgCheck((ip != NULL) && (axes != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(L3GD20Driver*, (BaseGyroscope*)ip);
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
  spiAcquireBus(devp->config->spip);
  spiStart(devp->config->spip,
           devp->config->spicfg);
#endif /* L3GD20_SHARED_SPI */

  l3gd20SPIReadRegister(devp->config->spip, L3GD20_AD_OUT_X_L,
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2206      	movs	r2, #6
 800107a:	2128      	movs	r1, #40	; 0x28
 800107c:	f7ff ff8c 	bl	8000f98 <l3gd20SPIReadRegister>
#if	L3GD20_SHARED_SPI
  spiReleaseBus(devp->config->spip);
#endif /* L3GD20_SHARED_SPI */
#endif /* L3GD20_USE_SPI */

    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 8001080:	2300      	movs	r3, #0
 8001082:	77fb      	strb	r3, [r7, #31]
 8001084:	e01f      	b.n	80010c6 <gyro_read_raw+0x72>
      tmp = buff[2 * i] + (buff[2 * i + 1] << 8);
 8001086:	7ffb      	ldrb	r3, [r7, #31]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	f107 0220 	add.w	r2, r7, #32
 800108e:	4413      	add	r3, r2
 8001090:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001094:	b29a      	uxth	r2, r3
 8001096:	7ffb      	ldrb	r3, [r7, #31]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	3301      	adds	r3, #1
 800109c:	f107 0120 	add.w	r1, r7, #32
 80010a0:	440b      	add	r3, r1
 80010a2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4413      	add	r3, r2
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	827b      	strh	r3, [r7, #18]
      axes[i] = (int32_t)tmp;
 80010b2:	7ffb      	ldrb	r3, [r7, #31]
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80010be:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80010c0:	7ffb      	ldrb	r3, [r7, #31]
 80010c2:	3301      	adds	r3, #1
 80010c4:	77fb      	strb	r3, [r7, #31]
 80010c6:	7ffb      	ldrb	r3, [r7, #31]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d9dc      	bls.n	8001086 <gyro_read_raw+0x32>
    }
  return msg;
 80010cc:	69bb      	ldr	r3, [r7, #24]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <gyro_read_cooked>:
 * @param[out] axes     a buffer which would be filled with cooked data.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_read_cooked(void *ip, float axes[]) {
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b088      	sub	sp, #32
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
  msg_t msg;

  osalDbgCheck((ip != NULL) && (axes != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(L3GD20Driver*, (BaseGyroscope*)ip);
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	61bb      	str	r3, [r7, #24]
  
  osalDbgAssert((devp->state == L3GD20_READY),
                "gyro_read_cooked(), invalid state");

  msg = gyro_read_raw(ip, raw);
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	4619      	mov	r1, r3
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffae 	bl	8001054 <gyro_read_raw>
 80010f8:	6178      	str	r0, [r7, #20]
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++){
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	e026      	b.n	800114e <gyro_read_cooked+0x78>
    axes[i] = (raw[i] * devp->gyrosensitivity[i]) - devp->gyrobias[i];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	441a      	add	r2, r3
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	f107 0120 	add.w	r1, r7, #32
 8001110:	440b      	add	r3, r1
 8001112:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111e:	69b9      	ldr	r1, [r7, #24]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	3304      	adds	r3, #4
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	3304      	adds	r3, #4
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001132:	69b9      	ldr	r1, [r7, #24]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	3308      	adds	r3, #8
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	edd3 7a00 	vldr	s15, [r3]
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	edc2 7a00 	vstr	s15, [r2]
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++){
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	3301      	adds	r3, #1
 800114c:	61fb      	str	r3, [r7, #28]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d9d5      	bls.n	8001100 <gyro_read_cooked+0x2a>
  }
  return msg;
 8001154:	697b      	ldr	r3, [r7, #20]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <gyro_sample_bias>:
 * @param[in] ip        pointer to @p BaseGyroscope interface.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_sample_bias(void *ip) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	; 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  L3GD20Driver* devp;
  uint32_t i, j;
  int32_t raw[L3GD20_GYRO_NUMBER_OF_AXES];
  int32_t buff[L3GD20_GYRO_NUMBER_OF_AXES] = {0, 0, 0};
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  msg_t msg;
	
  osalDbgCheck(ip != NULL);

  /* Getting parent instance pointer.*/
  devp = objGetInstance(L3GD20Driver*, (BaseGyroscope*)ip);
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	623b      	str	r3, [r7, #32]
#if L3GD20_USE_SPI
  osalDbgAssert((devp->config->spip->state == SPI_READY),
                "gyro_sample_bias(), channel not ready");
#endif

  for(i = 0; i < L3GD20_BIAS_ACQ_TIMES; i++){
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001184:	e030      	b.n	80011e8 <gyro_sample_bias+0x88>
    msg = gyro_read_raw(ip, raw);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff61 	bl	8001054 <gyro_read_raw>
 8001192:	6278      	str	r0, [r7, #36]	; 0x24
		if(msg != MSG_OK)
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <gyro_sample_bias+0x3e>
			return msg;
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	e061      	b.n	8001262 <gyro_sample_bias+0x102>
    for(j = 0; j < L3GD20_GYRO_NUMBER_OF_AXES; j++){
 800119e:	2300      	movs	r3, #0
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80011a2:	e018      	b.n	80011d6 <gyro_sample_bias+0x76>
      buff[j] += raw[j];
 80011a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011ac:	4413      	add	r3, r2
 80011ae:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80011b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80011ba:	440b      	add	r3, r1
 80011bc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80011c0:	441a      	add	r2, r3
 80011c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80011ca:	440b      	add	r3, r1
 80011cc:	f843 2c28 	str.w	r2, [r3, #-40]
    for(j = 0; j < L3GD20_GYRO_NUMBER_OF_AXES; j++){
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d2:	3301      	adds	r3, #1
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d9e3      	bls.n	80011a4 <gyro_sample_bias+0x44>
    }
    osalThreadSleepMicroseconds(L3GD20_BIAS_SETTLING_US);
 80011dc:	2032      	movs	r0, #50	; 0x32
 80011de:	f7ff fed1 	bl	8000f84 <osalThreadSleep>
  for(i = 0; i < L3GD20_BIAS_ACQ_TIMES; i++){
 80011e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e4:	3301      	adds	r3, #1
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ea:	2b31      	cmp	r3, #49	; 0x31
 80011ec:	d9cb      	bls.n	8001186 <gyro_sample_bias+0x26>
  }

  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++){
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f2:	e032      	b.n	800125a <gyro_sample_bias+0xfa>
    devp->gyrobias[i] = (buff[i] / L3GD20_BIAS_ACQ_TIMES);
 80011f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011fc:	4413      	add	r3, r2
 80011fe:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001202:	4a1a      	ldr	r2, [pc, #104]	; (800126c <gyro_sample_bias+0x10c>)
 8001204:	fb82 1203 	smull	r1, r2, r2, r3
 8001208:	1112      	asrs	r2, r2, #4
 800120a:	17db      	asrs	r3, r3, #31
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001216:	6a3a      	ldr	r2, [r7, #32]
 8001218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121a:	3308      	adds	r3, #8
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	edc3 7a00 	vstr	s15, [r3]
    devp->gyrobias[i] *= devp->gyrosensitivity[i];
 8001224:	6a3a      	ldr	r2, [r7, #32]
 8001226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001228:	3308      	adds	r3, #8
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	ed93 7a00 	vldr	s14, [r3]
 8001232:	6a3a      	ldr	r2, [r7, #32]
 8001234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001236:	3304      	adds	r3, #4
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	3304      	adds	r3, #4
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	6a3a      	ldr	r2, [r7, #32]
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	3308      	adds	r3, #8
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	edc3 7a00 	vstr	s15, [r3]
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++){
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	3301      	adds	r3, #1
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	2b02      	cmp	r3, #2
 800125e:	d9c9      	bls.n	80011f4 <gyro_sample_bias+0x94>
  }
  return msg;
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001262:	4618      	mov	r0, r3
 8001264:	3730      	adds	r7, #48	; 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	51eb851f 	.word	0x51eb851f

08001270 <gyro_set_bias>:
 * @param[in] bp        a buffer which contains biases.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_set_bias(void *ip, float *bp) {
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  L3GD20Driver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  
  osalDbgCheck((ip != NULL) && (bp != NULL));
  
  /* Getting parent instance pointer.*/
  devp = objGetInstance(L3GD20Driver*, (BaseGyroscope*)ip);
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	60fb      	str	r3, [r7, #12]
  
  osalDbgAssert((devp->state == L3GD20_READY),
                "gyro_set_bias(), invalid state");
  
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	e00d      	b.n	80012ac <gyro_set_bias+0x3c>
    devp->gyrobias[i] = bp[i];
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	4413      	add	r3, r2
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3308      	adds	r3, #8
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	601a      	str	r2, [r3, #0]
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d9ee      	bls.n	8001290 <gyro_set_bias+0x20>
  }
  return msg;
 80012b2:	693b      	ldr	r3, [r7, #16]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <gyro_reset_bias>:
 * @param[in] ip        pointer to @p BaseGyroscope interface.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_reset_bias(void *ip) {
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  L3GD20Driver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]

  osalDbgCheck(ip != NULL);
  
  /* Getting parent instance pointer.*/
  devp = objGetInstance(L3GD20Driver*, (BaseGyroscope*)ip);
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	60fb      	str	r3, [r7, #12]
  
  osalDbgAssert((devp->state == L3GD20_READY),
                "gyro_reset_bias(), invalid state");

  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e00a      	b.n	80012f4 <gyro_reset_bias+0x34>
    devp->gyrobias[i] = L3GD20_GYRO_BIAS;
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	3308      	adds	r3, #8
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d9f1      	bls.n	80012de <gyro_reset_bias+0x1e>
  return msg;
 80012fa:	693b      	ldr	r3, [r7, #16]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	371c      	adds	r7, #28
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <gyro_set_sensivity>:
 * @param[in] sp        a buffer which contains sensitivities.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_set_sensivity(void *ip, float *sp) {
 8001308:	b480      	push	{r7}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  L3GD20Driver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  
  osalDbgCheck((ip != NULL) && (sp !=NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(L3GD20Driver*, (BaseGyroscope*)ip);
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	60fb      	str	r3, [r7, #12]

  osalDbgAssert((devp->state == L3GD20_READY),
                "gyro_set_sensivity(), invalid state");
  
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e00e      	b.n	8001346 <gyro_set_sensivity+0x3e>
    devp->gyrosensitivity[i] = sp[i];
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	4413      	add	r3, r2
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68f9      	ldr	r1, [r7, #12]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3304      	adds	r3, #4
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	3304      	adds	r3, #4
 800133e:	601a      	str	r2, [r3, #0]
  for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d9ed      	bls.n	8001328 <gyro_set_sensivity+0x20>
  }
  return msg;
 800134c:	693b      	ldr	r3, [r7, #16]
}
 800134e:	4618      	mov	r0, r3
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <gyro_reset_sensivity>:
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    otherwise.
 */
static msg_t gyro_reset_sensivity(void *ip) {
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  L3GD20Driver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
  
  osalDbgCheck(ip != NULL);

  /* Getting parent instance pointer.*/
  devp = objGetInstance(L3GD20Driver*, (BaseGyroscope*)ip);
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	60fb      	str	r3, [r7, #12]

  osalDbgAssert((devp->state == L3GD20_READY),
                "gyro_reset_sensivity(), invalid state");

  if(devp->config->gyrofullscale == L3GD20_FS_250DPS)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	7c1b      	ldrb	r3, [r3, #16]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d111      	bne.n	80013a2 <gyro_reset_sensivity+0x46>
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	e00a      	b.n	800139a <gyro_reset_sensivity+0x3e>
      devp->gyrosensitivity[i] = L3GD20_GYRO_SENS_250DPS;
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3304      	adds	r3, #4
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	3304      	adds	r3, #4
 8001390:	4a20      	ldr	r2, [pc, #128]	; (8001414 <gyro_reset_sensivity+0xb8>)
 8001392:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	3301      	adds	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d9f1      	bls.n	8001384 <gyro_reset_sensivity+0x28>
 80013a0:	e030      	b.n	8001404 <gyro_reset_sensivity+0xa8>
  else if(devp->config->gyrofullscale == L3GD20_FS_500DPS)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	7c1b      	ldrb	r3, [r3, #16]
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d111      	bne.n	80013d0 <gyro_reset_sensivity+0x74>
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e00a      	b.n	80013c8 <gyro_reset_sensivity+0x6c>
        devp->gyrosensitivity[i] = L3GD20_GYRO_SENS_500DPS;
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3304      	adds	r3, #4
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	3304      	adds	r3, #4
 80013be:	4a16      	ldr	r2, [pc, #88]	; (8001418 <gyro_reset_sensivity+0xbc>)
 80013c0:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d9f1      	bls.n	80013b2 <gyro_reset_sensivity+0x56>
 80013ce:	e019      	b.n	8001404 <gyro_reset_sensivity+0xa8>
  else if(devp->config->gyrofullscale == L3GD20_FS_2000DPS)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	7c1b      	ldrb	r3, [r3, #16]
 80013d6:	2b20      	cmp	r3, #32
 80013d8:	d111      	bne.n	80013fe <gyro_reset_sensivity+0xa2>
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	e00a      	b.n	80013f6 <gyro_reset_sensivity+0x9a>
        devp->gyrosensitivity[i] = L3GD20_GYRO_SENS_2000DPS;
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3304      	adds	r3, #4
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	3304      	adds	r3, #4
 80013ec:	4a0b      	ldr	r2, [pc, #44]	; (800141c <gyro_reset_sensivity+0xc0>)
 80013ee:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d9f1      	bls.n	80013e0 <gyro_reset_sensivity+0x84>
 80013fc:	e002      	b.n	8001404 <gyro_reset_sensivity+0xa8>
  else {
    osalDbgAssert(FALSE, "gyro_reset_sensivity(), full scale issue");
    return MSG_RESET;
 80013fe:	f06f 0301 	mvn.w	r3, #1
 8001402:	e000      	b.n	8001406 <gyro_reset_sensivity+0xaa>
  }
  return msg;
 8001404:	693b      	ldr	r3, [r7, #16]
}
 8001406:	4618      	mov	r0, r3
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	3c0f5c29 	.word	0x3c0f5c29
 8001418:	3c8f5c29 	.word	0x3c8f5c29
 800141c:	3d8f5c29 	.word	0x3d8f5c29

08001420 <gyro_set_full_scale>:
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    otherwise.
 */
static msg_t gyro_set_full_scale(L3GD20Driver *devp, l3gd20_fs_t fs) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
  float newfs, scale;
  uint8_t i, cr;
  msg_t msg = MSG_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
#if L3GD20_USE_SPI
  osalDbgAssert((devp->config->spip->state == SPI_READY),
                "gyro_set_full_scale(), channel not ready");
#endif

  if(fs == L3GD20_FS_250DPS) {
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <gyro_set_full_scale+0x1c>
    newfs = L3GD20_250DPS;
 8001436:	4b3c      	ldr	r3, [pc, #240]	; (8001528 <gyro_set_full_scale+0x108>)
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	e00e      	b.n	800145a <gyro_set_full_scale+0x3a>
  }
  else if(fs == L3GD20_FS_500DPS) {
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	2b10      	cmp	r3, #16
 8001440:	d102      	bne.n	8001448 <gyro_set_full_scale+0x28>
    newfs = L3GD20_500DPS;
 8001442:	4b3a      	ldr	r3, [pc, #232]	; (800152c <gyro_set_full_scale+0x10c>)
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	e008      	b.n	800145a <gyro_set_full_scale+0x3a>
  }
  else if(fs == L3GD20_FS_2000DPS) {
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b20      	cmp	r3, #32
 800144c:	d102      	bne.n	8001454 <gyro_set_full_scale+0x34>
    newfs = L3GD20_2000DPS;
 800144e:	4b38      	ldr	r3, [pc, #224]	; (8001530 <gyro_set_full_scale+0x110>)
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	e002      	b.n	800145a <gyro_set_full_scale+0x3a>
  }
  else {
    return MSG_RESET;
 8001454:	f06f 0301 	mvn.w	r3, #1
 8001458:	e061      	b.n	800151e <gyro_set_full_scale+0xfe>
  }

  if(newfs != devp->gyrofullscale) {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001460:	edd7 7a07 	vldr	s15, [r7, #28]
 8001464:	eeb4 7a67 	vcmp.f32	s14, s15
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	d056      	beq.n	800151c <gyro_set_full_scale+0xfc>
    scale = newfs / devp->gyrofullscale;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001474:	edd7 6a07 	vldr	s13, [r7, #28]
 8001478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147c:	edc7 7a04 	vstr	s15, [r7, #16]
    devp->gyrofullscale = newfs;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
		spiStart(devp->config->spip,
						 devp->config->spicfg);
#endif /* L3GD20_SHARED_SPI */

    /* Updating register.*/
    l3gd20SPIReadRegister(devp->config->spip,
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	f107 030f 	add.w	r3, r7, #15
 8001490:	2201      	movs	r2, #1
 8001492:	2123      	movs	r1, #35	; 0x23
 8001494:	f7ff fd80 	bl	8000f98 <l3gd20SPIReadRegister>

#if	L3GD20_SHARED_SPI
		spiReleaseBus(devp->config->spip);
#endif /* L3GD20_SHARED_SPI */
#endif /* L3GD20_USE_SPI */
    cr &= ~(L3GD20_CTRL_REG4_FS_MASK);
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	73fb      	strb	r3, [r7, #15]
    cr |= fs;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	73fb      	strb	r3, [r7, #15]
		spiAcquireBus(devp->config->spip);
		spiStart(devp->config->spip,
						 devp->config->spicfg);
#endif /* L3GD20_SHARED_SPI */

    l3gd20SPIWriteRegister(devp->config->spip,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	f107 030f 	add.w	r3, r7, #15
 80014b6:	2201      	movs	r2, #1
 80014b8:	2123      	movs	r1, #35	; 0x23
 80014ba:	f7ff fd98 	bl	8000fee <l3gd20SPIWriteRegister>
		spiReleaseBus(devp->config->spip);
#endif /* L3GD20_SHARED_SPI */
#endif /* L3GD20_USE_SPI */

    /* Scaling sensitivity and bias. Re-calibration is suggested anyway. */
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	76fb      	strb	r3, [r7, #27]
 80014c2:	e028      	b.n	8001516 <gyro_set_full_scale+0xf6>
      devp->gyrosensitivity[i] *= scale;
 80014c4:	7efb      	ldrb	r3, [r7, #27]
 80014c6:	7efa      	ldrb	r2, [r7, #27]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	3204      	adds	r2, #4
 80014cc:	0092      	lsls	r2, r2, #2
 80014ce:	440a      	add	r2, r1
 80014d0:	3204      	adds	r2, #4
 80014d2:	ed92 7a00 	vldr	s14, [r2]
 80014d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80014da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	3304      	adds	r3, #4
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3304      	adds	r3, #4
 80014e8:	edc3 7a00 	vstr	s15, [r3]
      devp->gyrobias[i] *= scale;
 80014ec:	7efb      	ldrb	r3, [r7, #27]
 80014ee:	7efa      	ldrb	r2, [r7, #27]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	0092      	lsls	r2, r2, #2
 80014f6:	440a      	add	r2, r1
 80014f8:	ed92 7a00 	vldr	s14, [r2]
 80014fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	3308      	adds	r3, #8
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 8001510:	7efb      	ldrb	r3, [r7, #27]
 8001512:	3301      	adds	r3, #1
 8001514:	76fb      	strb	r3, [r7, #27]
 8001516:	7efb      	ldrb	r3, [r7, #27]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d9d3      	bls.n	80014c4 <gyro_set_full_scale+0xa4>
    }
  }
  return msg;
 800151c:	697b      	ldr	r3, [r7, #20]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	437a0000 	.word	0x437a0000
 800152c:	43fa0000 	.word	0x43fa0000
 8001530:	44fa0000 	.word	0x44fa0000

08001534 <l3gd20ObjectInit>:
 *
 * @param[out] devp     pointer to the @p L3GD20Driver object
 *
 * @init
 */
void l3gd20ObjectInit(L3GD20Driver *devp) {
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  devp->vmt = &vmt_device;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <l3gd20ObjectInit+0x2c>)
 8001540:	601a      	str	r2, [r3, #0]
  devp->gyro_if.vmt = &vmt_gyroscope;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <l3gd20ObjectInit+0x30>)
 8001546:	605a      	str	r2, [r3, #4]
  
  devp->config = NULL;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]

  devp->state  = L3GD20_STOP;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	721a      	strb	r2, [r3, #8]
}
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	08008f80 	.word	0x08008f80
 8001564:	08008f88 	.word	0x08008f88

08001568 <l3gd20Start>:
 * @param[in] devp      pointer to the @p L3GD20Driver object
 * @param[in] config    pointer to the @p L3GD20Config object
 *
 * @api
 */
void l3gd20Start(L3GD20Driver *devp, const L3GD20Config *config) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t i;
  uint8_t cr[5] = {0, 0, 0, 0, 0};
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	711a      	strb	r2, [r3, #4]
  osalDbgCheck((devp != NULL) && (config != NULL));

  osalDbgAssert((devp->state == L3GD20_STOP) || (devp->state == L3GD20_READY),
              "l3gd20Start(), invalid state");

  devp->config = config;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	60da      	str	r2, [r3, #12]
             
  /* Control register 1 configuration block.*/
  {
    cr[0] = L3GD20_CTRL_REG1_XEN | L3GD20_CTRL_REG1_YEN | 
          L3GD20_CTRL_REG1_ZEN | L3GD20_CTRL_REG1_PD |
          devp->config->gyrooutputdatarate;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	7c5b      	ldrb	r3, [r3, #17]
    cr[0] = L3GD20_CTRL_REG1_XEN | L3GD20_CTRL_REG1_YEN | 
 8001588:	f043 030f 	orr.w	r3, r3, #15
 800158c:	b2db      	uxtb	r3, r3
 800158e:	733b      	strb	r3, [r7, #12]
#endif
  }
  
  /* Control register 4 configuration block.*/
  {
    cr[3] = devp->config->gyrofullscale;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	7c1b      	ldrb	r3, [r3, #16]
 8001596:	73fb      	strb	r3, [r7, #15]

#if L3GD20_USE_SPI
#if	L3GD20_SHARED_SPI
  spiAcquireBus(devp->config->spip);
#endif /* L3GD20_SHARED_SPI */
  spiStart(devp->config->spip,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	681a      	ldr	r2, [r3, #0]
           devp->config->spicfg);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
  spiStart(devp->config->spip,
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4610      	mov	r0, r2
 80015a8:	f006 fc04 	bl	8007db4 <spiStart>
           
  l3gd20SPIWriteRegister(devp->config->spip, L3GD20_AD_CTRL_REG1, 
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2205      	movs	r2, #5
 80015b8:	2120      	movs	r1, #32
 80015ba:	f7ff fd18 	bl	8000fee <l3gd20SPIWriteRegister>
  spiReleaseBus(devp->config->spip);
#endif /* L3GD20_SHARED_SPI */
#endif /* L3GD20_USE_SPI */
  
  /* Storing sensitivity information according to full scale.*/
  if(devp->config->gyrofullscale == L3GD20_FS_250DPS) {
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	7c1b      	ldrb	r3, [r3, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d128      	bne.n	800161a <l3gd20Start+0xb2>
    devp->gyrofullscale = L3GD20_250DPS;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a5c      	ldr	r2, [pc, #368]	; (800173c <l3gd20Start+0x1d4>)
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e01e      	b.n	8001612 <l3gd20Start+0xaa>
      if (devp->config->gyrosensitivity == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d108      	bne.n	80015f0 <l3gd20Start+0x88>
        devp->gyrosensitivity[i] = L3GD20_GYRO_SENS_250DPS;
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3304      	adds	r3, #4
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	3304      	adds	r3, #4
 80015ea:	4a55      	ldr	r2, [pc, #340]	; (8001740 <l3gd20Start+0x1d8>)
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	e00d      	b.n	800160c <l3gd20Start+0xa4>
      else
        devp->gyrosensitivity[i] = devp->config->gyrosensitivity[i];
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3304      	adds	r3, #4
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	3304      	adds	r3, #4
 800160a:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3301      	adds	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d9dd      	bls.n	80015d4 <l3gd20Start+0x6c>
 8001618:	e05a      	b.n	80016d0 <l3gd20Start+0x168>
    }
  }
  else if(devp->config->gyrofullscale == L3GD20_FS_500DPS) {
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	7c1b      	ldrb	r3, [r3, #16]
 8001620:	2b10      	cmp	r3, #16
 8001622:	d128      	bne.n	8001676 <l3gd20Start+0x10e>
    devp->gyrofullscale = L3GD20_500DPS;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a47      	ldr	r2, [pc, #284]	; (8001744 <l3gd20Start+0x1dc>)
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e01e      	b.n	800166e <l3gd20Start+0x106>
      if (devp->config->gyrosensitivity == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d108      	bne.n	800164c <l3gd20Start+0xe4>
        devp->gyrosensitivity[i] = L3GD20_GYRO_SENS_500DPS;
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3304      	adds	r3, #4
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	3304      	adds	r3, #4
 8001646:	4a40      	ldr	r2, [pc, #256]	; (8001748 <l3gd20Start+0x1e0>)
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	e00d      	b.n	8001668 <l3gd20Start+0x100>
      else
        devp->gyrosensitivity[i] = devp->config->gyrosensitivity[i];
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3304      	adds	r3, #4
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3304      	adds	r3, #4
 8001666:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	3301      	adds	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d9dd      	bls.n	8001630 <l3gd20Start+0xc8>
 8001674:	e02c      	b.n	80016d0 <l3gd20Start+0x168>
    }
  }
  else if(devp->config->gyrofullscale == L3GD20_FS_2000DPS) {
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	7c1b      	ldrb	r3, [r3, #16]
 800167c:	2b20      	cmp	r3, #32
 800167e:	d127      	bne.n	80016d0 <l3gd20Start+0x168>
    devp->gyrofullscale = L3GD20_2000DPS;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a32      	ldr	r2, [pc, #200]	; (800174c <l3gd20Start+0x1e4>)
 8001684:	62da      	str	r2, [r3, #44]	; 0x2c
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e01e      	b.n	80016ca <l3gd20Start+0x162>
      if (devp->config->gyrosensitivity == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d108      	bne.n	80016a8 <l3gd20Start+0x140>
        devp->gyrosensitivity[i] = L3GD20_GYRO_SENS_2000DPS;
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3304      	adds	r3, #4
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	3304      	adds	r3, #4
 80016a2:	4a2b      	ldr	r2, [pc, #172]	; (8001750 <l3gd20Start+0x1e8>)
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e00d      	b.n	80016c4 <l3gd20Start+0x15c>
      else
        devp->gyrosensitivity[i] = devp->config->gyrosensitivity[i];
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3304      	adds	r3, #4
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	3304      	adds	r3, #4
 80016c2:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d9dd      	bls.n	800168c <l3gd20Start+0x124>
  }
  else
    osalDbgAssert(FALSE, "l3gd20Start(), full scale issue");

  /* Storing bias information.*/
  if(devp->config->gyrobias != NULL) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d016      	beq.n	8001708 <l3gd20Start+0x1a0>
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e00f      	b.n	8001700 <l3gd20Start+0x198>
      devp->gyrobias[i] = devp->config->gyrobias[i];
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3308      	adds	r3, #8
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d9ec      	bls.n	80016e0 <l3gd20Start+0x178>
 8001706:	e010      	b.n	800172a <l3gd20Start+0x1c2>
    }
  }
  else {
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e00a      	b.n	8001724 <l3gd20Start+0x1bc>
      devp->gyrobias[i] = L3GD20_GYRO_BIAS;
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3308      	adds	r3, #8
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d9f1      	bls.n	800170e <l3gd20Start+0x1a6>
  }
  
  /* This is the Gyroscope transient recovery time.*/
  osalThreadSleepMilliseconds(10);
 800172a:	2064      	movs	r0, #100	; 0x64
 800172c:	f7ff fc2a 	bl	8000f84 <osalThreadSleep>

  devp->state = L3GD20_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2202      	movs	r2, #2
 8001734:	721a      	strb	r2, [r3, #8]
} 
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	437a0000 	.word	0x437a0000
 8001740:	3c0f5c29 	.word	0x3c0f5c29
 8001744:	43fa0000 	.word	0x43fa0000
 8001748:	3c8f5c29 	.word	0x3c8f5c29
 800174c:	44fa0000 	.word	0x44fa0000
 8001750:	3d8f5c29 	.word	0x3d8f5c29

08001754 <long_to_string_with_divisor>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  int i;
  char *q;
  long l, ll;

  l = num;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	617b      	str	r3, [r7, #20]
  if (divisor == 0) {
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <long_to_string_with_divisor+0x1e>
    ll = num;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	e001      	b.n	8001776 <long_to_string_with_divisor+0x22>
  } else {
    ll = divisor;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	613b      	str	r3, [r7, #16]
  }

  q = p + MAX_FILLER;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	330b      	adds	r3, #11
 800177a:	61bb      	str	r3, [r7, #24]
  do {
    i = (int)(l % radix);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	fbb3 f2f2 	udiv	r2, r3, r2
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	fb01 f202 	mul.w	r2, r1, r2
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	61fb      	str	r3, [r7, #28]
    i += '0';
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3330      	adds	r3, #48	; 0x30
 8001792:	61fb      	str	r3, [r7, #28]
    if (i > '9')
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	2b39      	cmp	r3, #57	; 0x39
 8001798:	dd02      	ble.n	80017a0 <long_to_string_with_divisor+0x4c>
      i += 'A' - '0' - 10;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3307      	adds	r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
    *--q = i;
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	701a      	strb	r2, [r3, #0]
    l /= radix;
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	617b      	str	r3, [r7, #20]
  } while ((ll /= radix) != 0);
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1d9      	bne.n	800177c <long_to_string_with_divisor+0x28>

  i = (int)(p + MAX_FILLER - q);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	330b      	adds	r3, #11
 80017cc:	461a      	mov	r2, r3
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	61fb      	str	r3, [r7, #28]
  do
    *p++ = *q++;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60fa      	str	r2, [r7, #12]
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	1c51      	adds	r1, r2, #1
 80017de:	61b9      	str	r1, [r7, #24]
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	701a      	strb	r2, [r3, #0]
  while (--i);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	61fb      	str	r3, [r7, #28]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f1      	bne.n	80017d4 <long_to_string_with_divisor+0x80>

  return p;
 80017f0:	68fb      	ldr	r3, [r7, #12]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <ch_ltoa>:

static char *ch_ltoa(char *p, long num, unsigned radix) {
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]

  return long_to_string_with_divisor(p, num, radix, 0);
 800180a:	2300      	movs	r3, #0
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f7ff ff9f 	bl	8001754 <long_to_string_with_divisor>
 8001816:	4603      	mov	r3, r0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <ftoa>:
#if CHPRINTF_USE_FLOAT
static const long pow10[FLOAT_PRECISION] = {
    10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000
};

static char *ftoa(char *p, double num, unsigned long precision) {
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	ed87 0b00 	vstr	d0, [r7]
 800182c:	60b9      	str	r1, [r7, #8]
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <ftoa+0x1a>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b09      	cmp	r3, #9
 8001838:	d901      	bls.n	800183e <ftoa+0x1e>
    precision = FLOAT_PRECISION;
 800183a:	2309      	movs	r3, #9
 800183c:	60bb      	str	r3, [r7, #8]
  precision = pow10[precision - 1];
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	4a22      	ldr	r2, [pc, #136]	; (80018cc <ftoa+0xac>)
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	60bb      	str	r3, [r7, #8]

  l = (long)num;
 800184a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800184e:	f7ff f93d 	bl	8000acc <__aeabi_d2iz>
 8001852:	4603      	mov	r3, r0
 8001854:	617b      	str	r3, [r7, #20]
  p = long_to_string_with_divisor(p, l, 10, 0);
 8001856:	2300      	movs	r3, #0
 8001858:	220a      	movs	r2, #10
 800185a:	6979      	ldr	r1, [r7, #20]
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff ff79 	bl	8001754 <long_to_string_with_divisor>
 8001862:	60f8      	str	r0, [r7, #12]
  *p++ = '.';
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	60fa      	str	r2, [r7, #12]
 800186a:	222e      	movs	r2, #46	; 0x2e
 800186c:	701a      	strb	r2, [r3, #0]
  l = (long)((num - l) * precision);
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7fe feb4 	bl	80005dc <__aeabi_i2d>
 8001874:	4603      	mov	r3, r0
 8001876:	460c      	mov	r4, r1
 8001878:	461a      	mov	r2, r3
 800187a:	4623      	mov	r3, r4
 800187c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001880:	f7fe fd5e 	bl	8000340 <__aeabi_dsub>
 8001884:	4603      	mov	r3, r0
 8001886:	460c      	mov	r4, r1
 8001888:	4625      	mov	r5, r4
 800188a:	461c      	mov	r4, r3
 800188c:	68b8      	ldr	r0, [r7, #8]
 800188e:	f7fe fe95 	bl	80005bc <__aeabi_ui2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4620      	mov	r0, r4
 8001898:	4629      	mov	r1, r5
 800189a:	f7fe ff05 	bl	80006a8 <__aeabi_dmul>
 800189e:	4603      	mov	r3, r0
 80018a0:	460c      	mov	r4, r1
 80018a2:	4618      	mov	r0, r3
 80018a4:	4621      	mov	r1, r4
 80018a6:	f7ff f911 	bl	8000acc <__aeabi_d2iz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	617b      	str	r3, [r7, #20]
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <ftoa+0xb0>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	08db      	lsrs	r3, r3, #3
 80018b8:	220a      	movs	r2, #10
 80018ba:	6979      	ldr	r1, [r7, #20]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff ff49 	bl	8001754 <long_to_string_with_divisor>
 80018c2:	4603      	mov	r3, r0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bdb0      	pop	{r4, r5, r7, pc}
 80018cc:	08008fac 	.word	0x08008fac
 80018d0:	cccccccd 	.word	0xcccccccd

080018d4 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b094      	sub	sp, #80	; 0x50
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60ba      	str	r2, [r7, #8]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (c == 0)
 80018f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <chvprintf+0x28>
      return n;
 80018f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fa:	e23c      	b.n	8001d76 <chvprintf+0x4a2>
    if (c != '%') {
 80018fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001900:	2b25      	cmp	r3, #37	; 0x25
 8001902:	d00b      	beq.n	800191c <chvprintf+0x48>
      streamPut(chp, (uint8_t)c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800190e:	4611      	mov	r1, r2
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	4798      	blx	r3
      n++;
 8001914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001916:	3301      	adds	r3, #1
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
 800191a:	e7e3      	b.n	80018e4 <chvprintf+0x10>
      continue;
    }
    p = tmpbuf;
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	64fb      	str	r3, [r7, #76]	; 0x4c
    s = tmpbuf;
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48
    left_align = FALSE;
 8001928:	2300      	movs	r3, #0
 800192a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if (*fmt == '-') {
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b2d      	cmp	r3, #45	; 0x2d
 8001934:	d105      	bne.n	8001942 <chvprintf+0x6e>
      fmt++;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3301      	adds	r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
      left_align = TRUE;
 800193c:	2301      	movs	r3, #1
 800193e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    }
    filler = ' ';
 8001942:	2320      	movs	r3, #32
 8001944:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    if (*fmt == '0') {
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b30      	cmp	r3, #48	; 0x30
 800194e:	d105      	bne.n	800195c <chvprintf+0x88>
      fmt++;
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	3301      	adds	r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
      filler = '0';
 8001956:	2330      	movs	r3, #48	; 0x30
 8001958:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    width = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
    while (TRUE) {
      c = *fmt++;
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	60ba      	str	r2, [r7, #8]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      if (c >= '0' && c <= '9')
 800196c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001970:	2b2f      	cmp	r3, #47	; 0x2f
 8001972:	d909      	bls.n	8001988 <chvprintf+0xb4>
 8001974:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001978:	2b39      	cmp	r3, #57	; 0x39
 800197a:	d805      	bhi.n	8001988 <chvprintf+0xb4>
        c -= '0';
 800197c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001980:	3b30      	subs	r3, #48	; 0x30
 8001982:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001986:	e009      	b.n	800199c <chvprintf+0xc8>
      else if (c == '*')
 8001988:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800198c:	2b2a      	cmp	r3, #42	; 0x2a
 800198e:	d110      	bne.n	80019b2 <chvprintf+0xde>
        c = va_arg(ap, int);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	1d1a      	adds	r2, r3, #4
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      else
        break;
      width = width * 10 + c;
 800199c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	461a      	mov	r2, r3
 80019a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019ac:	4413      	add	r3, r2
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80019b0:	e7d6      	b.n	8001960 <chvprintf+0x8c>
    }
    precision = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (c == '.') {
 80019b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019ba:	2b2e      	cmp	r3, #46	; 0x2e
 80019bc:	d129      	bne.n	8001a12 <chvprintf+0x13e>
      while (TRUE) {
        c = *fmt++;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	60ba      	str	r2, [r7, #8]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (c >= '0' && c <= '9')
 80019ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019ce:	2b2f      	cmp	r3, #47	; 0x2f
 80019d0:	d909      	bls.n	80019e6 <chvprintf+0x112>
 80019d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019d6:	2b39      	cmp	r3, #57	; 0x39
 80019d8:	d805      	bhi.n	80019e6 <chvprintf+0x112>
          c -= '0';
 80019da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019de:	3b30      	subs	r3, #48	; 0x30
 80019e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80019e4:	e009      	b.n	80019fa <chvprintf+0x126>
        else if (c == '*')
 80019e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019ea:	2b2a      	cmp	r3, #42	; 0x2a
 80019ec:	d111      	bne.n	8001a12 <chvprintf+0x13e>
          c = va_arg(ap, int);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	1d1a      	adds	r2, r3, #4
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        else
          break;
        precision *= 10;
 80019fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        precision += c;
 8001a06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a0c:	4413      	add	r3, r2
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a10:	e7d5      	b.n	80019be <chvprintf+0xea>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8001a12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a16:	2b6c      	cmp	r3, #108	; 0x6c
 8001a18:	d003      	beq.n	8001a22 <chvprintf+0x14e>
 8001a1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a1e:	2b4c      	cmp	r3, #76	; 0x4c
 8001a20:	d10d      	bne.n	8001a3e <chvprintf+0x16a>
      is_long = TRUE;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      if (*fmt)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01a      	beq.n	8001a66 <chvprintf+0x192>
        c = *fmt++;
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	60ba      	str	r2, [r7, #8]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001a3c:	e014      	b.n	8001a68 <chvprintf+0x194>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
 8001a3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a42:	2b40      	cmp	r3, #64	; 0x40
 8001a44:	d905      	bls.n	8001a52 <chvprintf+0x17e>
 8001a46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a4a:	2b5a      	cmp	r3, #90	; 0x5a
 8001a4c:	d801      	bhi.n	8001a52 <chvprintf+0x17e>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <chvprintf+0x180>
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001a58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001a64:	e000      	b.n	8001a68 <chvprintf+0x194>
        c = *fmt++;
 8001a66:	bf00      	nop

    /* Command decoding.*/
    switch (c) {
 8001a68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a6c:	3b44      	subs	r3, #68	; 0x44
 8001a6e:	2b34      	cmp	r3, #52	; 0x34
 8001a70:	f200 8111 	bhi.w	8001c96 <chvprintf+0x3c2>
 8001a74:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <chvprintf+0x1a8>)
 8001a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7a:	bf00      	nop
 8001a7c:	08001bb3 	.word	0x08001bb3
 8001a80:	08001c97 	.word	0x08001c97
 8001a84:	08001c97 	.word	0x08001c97
 8001a88:	08001c97 	.word	0x08001c97
 8001a8c:	08001c97 	.word	0x08001c97
 8001a90:	08001bb3 	.word	0x08001bb3
 8001a94:	08001c97 	.word	0x08001c97
 8001a98:	08001c97 	.word	0x08001c97
 8001a9c:	08001c97 	.word	0x08001c97
 8001aa0:	08001c97 	.word	0x08001c97
 8001aa4:	08001c97 	.word	0x08001c97
 8001aa8:	08001c61 	.word	0x08001c61
 8001aac:	08001c97 	.word	0x08001c97
 8001ab0:	08001c97 	.word	0x08001c97
 8001ab4:	08001c97 	.word	0x08001c97
 8001ab8:	08001c97 	.word	0x08001c97
 8001abc:	08001c97 	.word	0x08001c97
 8001ac0:	08001c59 	.word	0x08001c59
 8001ac4:	08001c97 	.word	0x08001c97
 8001ac8:	08001c97 	.word	0x08001c97
 8001acc:	08001c51 	.word	0x08001c51
 8001ad0:	08001c97 	.word	0x08001c97
 8001ad4:	08001c97 	.word	0x08001c97
 8001ad8:	08001c97 	.word	0x08001c97
 8001adc:	08001c97 	.word	0x08001c97
 8001ae0:	08001c97 	.word	0x08001c97
 8001ae4:	08001c97 	.word	0x08001c97
 8001ae8:	08001c97 	.word	0x08001c97
 8001aec:	08001c97 	.word	0x08001c97
 8001af0:	08001c97 	.word	0x08001c97
 8001af4:	08001c97 	.word	0x08001c97
 8001af8:	08001b51 	.word	0x08001b51
 8001afc:	08001bb3 	.word	0x08001bb3
 8001b00:	08001c97 	.word	0x08001c97
 8001b04:	08001bf5 	.word	0x08001bf5
 8001b08:	08001c97 	.word	0x08001c97
 8001b0c:	08001c97 	.word	0x08001c97
 8001b10:	08001bb3 	.word	0x08001bb3
 8001b14:	08001c97 	.word	0x08001c97
 8001b18:	08001c97 	.word	0x08001c97
 8001b1c:	08001c97 	.word	0x08001c97
 8001b20:	08001c97 	.word	0x08001c97
 8001b24:	08001c97 	.word	0x08001c97
 8001b28:	08001c61 	.word	0x08001c61
 8001b2c:	08001c97 	.word	0x08001c97
 8001b30:	08001c97 	.word	0x08001c97
 8001b34:	08001c97 	.word	0x08001c97
 8001b38:	08001b6b 	.word	0x08001b6b
 8001b3c:	08001c97 	.word	0x08001c97
 8001b40:	08001c59 	.word	0x08001c59
 8001b44:	08001c97 	.word	0x08001c97
 8001b48:	08001c97 	.word	0x08001c97
 8001b4c:	08001c51 	.word	0x08001c51
    case 'c':
      filler = ' ';
 8001b50:	2320      	movs	r3, #32
 8001b52:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      *p++ = va_arg(ap, int);
 8001b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	1d11      	adds	r1, r2, #4
 8001b60:	6079      	str	r1, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	e09b      	b.n	8001ca2 <chvprintf+0x3ce>
      break;
    case 's':
      filler = ' ';
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      if ((s = va_arg(ap, char *)) == 0)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	1d1a      	adds	r2, r3, #4
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <chvprintf+0x2b0>
        s = "(null)";
 8001b80:	4b7f      	ldr	r3, [pc, #508]	; (8001d80 <chvprintf+0x4ac>)
 8001b82:	64bb      	str	r3, [r7, #72]	; 0x48
      if (precision == 0)
 8001b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d102      	bne.n	8001b90 <chvprintf+0x2bc>
        precision = 32767;
 8001b8a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      for (p = s; *p && (--precision >= 0); p++)
 8001b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b94:	e002      	b.n	8001b9c <chvprintf+0x2c8>
 8001b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b98:	3301      	adds	r3, #1
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d07e      	beq.n	8001ca2 <chvprintf+0x3ce>
 8001ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	daf2      	bge.n	8001b96 <chvprintf+0x2c2>
 8001bb0:	e077      	b.n	8001ca2 <chvprintf+0x3ce>
      break;
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
 8001bb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <chvprintf+0x2f2>
        l = va_arg(ap, long);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	1d1a      	adds	r2, r3, #4
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc4:	e004      	b.n	8001bd0 <chvprintf+0x2fc>
      else
        l = va_arg(ap, int);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	1d1a      	adds	r2, r3, #4
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (l < 0) {
 8001bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	da07      	bge.n	8001be6 <chvprintf+0x312>
        *p++ = '-';
 8001bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001bdc:	222d      	movs	r2, #45	; 0x2d
 8001bde:	701a      	strb	r2, [r3, #0]
        l = -l;
 8001be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be2:	425b      	negs	r3, r3
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      p = ch_ltoa(p, l, 10);
 8001be6:	220a      	movs	r2, #10
 8001be8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001bec:	f7ff fe07 	bl	80017fe <ch_ltoa>
 8001bf0:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001bf2:	e056      	b.n	8001ca2 <chvprintf+0x3ce>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3307      	adds	r3, #7
 8001bf8:	f023 0307 	bic.w	r3, r3, #7
 8001bfc:	f103 0208 	add.w	r2, r3, #8
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	cb18      	ldmia	r3, {r3, r4}
 8001c04:	4618      	mov	r0, r3
 8001c06:	4621      	mov	r1, r4
 8001c08:	f7fe ff88 	bl	8000b1c <__aeabi_d2f>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
      if (f < 0) {
 8001c10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1c:	d50a      	bpl.n	8001c34 <chvprintf+0x360>
        *p++ = '-';
 8001c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001c24:	222d      	movs	r2, #45	; 0x2d
 8001c26:	701a      	strb	r2, [r3, #0]
        f = -f;
 8001c28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c2c:	eef1 7a67 	vneg.f32	s15, s15
 8001c30:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      }
      p = ftoa(p, f, precision);
 8001c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c36:	f7fe fce3 	bl	8000600 <__aeabi_f2d>
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	460d      	mov	r5, r1
 8001c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c40:	4619      	mov	r1, r3
 8001c42:	ec45 4b10 	vmov	d0, r4, r5
 8001c46:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c48:	f7ff fdea 	bl	8001820 <ftoa>
 8001c4c:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001c4e:	e028      	b.n	8001ca2 <chvprintf+0x3ce>
      break;
#endif
    case 'X':
    case 'x':
      c = 16;
 8001c50:	2310      	movs	r3, #16
 8001c52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001c56:	e006      	b.n	8001c66 <chvprintf+0x392>
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
 8001c58:	230a      	movs	r3, #10
 8001c5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001c5e:	e002      	b.n	8001c66 <chvprintf+0x392>
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
 8001c60:	2308      	movs	r3, #8
 8001c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
unsigned_common:
      if (is_long)
 8001c66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <chvprintf+0x3a6>
        l = va_arg(ap, unsigned long);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	1d1a      	adds	r2, r3, #4
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c78:	e004      	b.n	8001c84 <chvprintf+0x3b0>
      else
        l = va_arg(ap, unsigned int);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	1d1a      	adds	r2, r3, #4
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
      p = ch_ltoa(p, l, c);
 8001c84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c88:	461a      	mov	r2, r3
 8001c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c8c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c8e:	f7ff fdb6 	bl	80017fe <ch_ltoa>
 8001c92:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001c94:	e005      	b.n	8001ca2 <chvprintf+0x3ce>
      break;
    default:
      *p++ = c;
 8001c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001c9c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001ca0:	701a      	strb	r2, [r3, #0]
      break;
    }
    i = (int)(p - s);
 8001ca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	643b      	str	r3, [r7, #64]	; 0x40
    if ((width -= i) < 0)
 8001caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	da01      	bge.n	8001cbc <chvprintf+0x3e8>
      width = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
    if (left_align == FALSE)
 8001cbc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001cc0:	f083 0301 	eor.w	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <chvprintf+0x3fc>
      width = -width;
 8001cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ccc:	425b      	negs	r3, r3
 8001cce:	63bb      	str	r3, [r7, #56]	; 0x38
    if (width < 0) {
 8001cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	da36      	bge.n	8001d44 <chvprintf+0x470>
      if (*s == '-' && filler == '0') {
 8001cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b2d      	cmp	r3, #45	; 0x2d
 8001cdc:	d113      	bne.n	8001d06 <chvprintf+0x432>
 8001cde:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001ce2:	2b30      	cmp	r3, #48	; 0x30
 8001ce4:	d10f      	bne.n	8001d06 <chvprintf+0x432>
        streamPut(chp, (uint8_t)*s++);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cee:	1c59      	adds	r1, r3, #1
 8001cf0:	64b9      	str	r1, [r7, #72]	; 0x48
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	4790      	blx	r2
        n++;
 8001cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
        i--;
 8001d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d02:	3b01      	subs	r3, #1
 8001d04:	643b      	str	r3, [r7, #64]	; 0x40
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001d10:	4611      	mov	r1, r2
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	4798      	blx	r3
        n++;
 8001d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d18:	3301      	adds	r3, #1
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
      } while (++width != 0);
 8001d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1e:	3301      	adds	r3, #1
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1ee      	bne.n	8001d06 <chvprintf+0x432>
 8001d28:	e00c      	b.n	8001d44 <chvprintf+0x470>
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d32:	1c59      	adds	r1, r3, #1
 8001d34:	64b9      	str	r1, [r7, #72]	; 0x48
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	4790      	blx	r2
      n++;
 8001d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d40:	3301      	adds	r3, #1
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
    while (--i >= 0) {
 8001d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d46:	3b01      	subs	r3, #1
 8001d48:	643b      	str	r3, [r7, #64]	; 0x40
 8001d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	daec      	bge.n	8001d2a <chvprintf+0x456>
 8001d50:	e00d      	b.n	8001d6e <chvprintf+0x49a>
    }

    while (width) {
      streamPut(chp, (uint8_t)filler);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	4798      	blx	r3
      n++;
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d64:	3301      	adds	r3, #1
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
      width--;
 8001d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	63bb      	str	r3, [r7, #56]	; 0x38
    while (width) {
 8001d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ee      	bne.n	8001d52 <chvprintf+0x47e>
 8001d74:	e5b6      	b.n	80018e4 <chvprintf+0x10>
    }
  }
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3750      	adds	r7, #80	; 0x50
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	08008fd0 	.word	0x08008fd0

08001d84 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001d84:	b40e      	push	{r1, r2, r3}
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001d8e:	f107 0320 	add.w	r3, r7, #32
 8001d92:	60bb      	str	r3, [r7, #8]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	69f9      	ldr	r1, [r7, #28]
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff fd9b 	bl	80018d4 <chvprintf>
 8001d9e:	60f8      	str	r0, [r7, #12]
  va_end(ap);

  return formatted_bytes;
 8001da0:	68fb      	ldr	r3, [r7, #12]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dac:	b003      	add	sp, #12
 8001dae:	4770      	bx	lr

08001db0 <port_lock.lto_priv.2>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	2320      	movs	r3, #32
 8001db8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <port_unlock.lto_priv.0>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <port_lock_from_isr.lto_priv.7>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0

  port_lock();
 8001de8:	f7ff ffe2 	bl	8001db0 <port_lock.lto_priv.2>
}
 8001dec:	bd80      	pop	{r7, pc}

08001dee <port_unlock_from_isr.lto_priv.5>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8001dee:	b580      	push	{r7, lr}
 8001df0:	af00      	add	r7, sp, #0

  port_unlock();
 8001df2:	f7ff ffea 	bl	8001dca <port_unlock.lto_priv.0>
}
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0

  port_lock_from_isr();
 8001dfc:	f7ff fff2 	bl	8001de4 <port_lock_from_isr.lto_priv.7>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 8001e06:	f7ff fff2 	bl	8001dee <port_unlock_from_isr.lto_priv.5>
}
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <osalSysLockFromISR>:
static inline void osalSysLockFromISR(void) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  chSysLockFromISR();
 8001e10:	f7ff fff2 	bl	8001df8 <chSysLockFromISR>
}
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <osalSysUnlockFromISR>:
static inline void osalSysUnlockFromISR(void) {
 8001e16:	b580      	push	{r7, lr}
 8001e18:	af00      	add	r7, sp, #0
  chSysUnlockFromISR();
 8001e1a:	f7ff fff2 	bl	8001e02 <chSysUnlockFromISR>
}
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <get_descriptor>:
 * handled here.
 */
static const USBDescriptor *get_descriptor(USBDriver *usbp,
                                           uint8_t dtype,
                                           uint8_t dindex,
                                           uint16_t lang) {
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	4608      	mov	r0, r1
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4603      	mov	r3, r0
 8001e30:	70fb      	strb	r3, [r7, #3]
 8001e32:	460b      	mov	r3, r1
 8001e34:	70bb      	strb	r3, [r7, #2]
 8001e36:	4613      	mov	r3, r2
 8001e38:	803b      	strh	r3, [r7, #0]

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d005      	beq.n	8001e4c <get_descriptor+0x2c>
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d005      	beq.n	8001e50 <get_descriptor+0x30>
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10b      	bne.n	8001e60 <get_descriptor+0x40>
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <get_descriptor+0x50>)
 8001e4a:	e00a      	b.n	8001e62 <get_descriptor+0x42>
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <get_descriptor+0x54>)
 8001e4e:	e008      	b.n	8001e62 <get_descriptor+0x42>
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8001e50:	78bb      	ldrb	r3, [r7, #2]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d804      	bhi.n	8001e60 <get_descriptor+0x40>
      return &vcom_strings[dindex];
 8001e56:	78bb      	ldrb	r3, [r7, #2]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <get_descriptor+0x58>)
 8001e5c:	4413      	add	r3, r2
 8001e5e:	e000      	b.n	8001e62 <get_descriptor+0x42>
  }
  return NULL;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	08008fec 	.word	0x08008fec
 8001e74:	08009038 	.word	0x08009038
 8001e78:	080090ac 	.word	0x080090ac

08001e7c <usb_event>:
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
  extern SerialUSBDriver SDU1;

  switch (event) {
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d831      	bhi.n	8001ef2 <usb_event+0x76>
 8001e8e:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <usb_event+0x18>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001ed5 	.word	0x08001ed5
 8001e98:	08001ef3 	.word	0x08001ef3
 8001e9c:	08001eb1 	.word	0x08001eb1
 8001ea0:	08001ed5 	.word	0x08001ed5
 8001ea4:	08001ed5 	.word	0x08001ed5
 8001ea8:	08001ee5 	.word	0x08001ee5
 8001eac:	08001ef3 	.word	0x08001ef3
  case USB_EVENT_ADDRESS:
    return;
  case USB_EVENT_CONFIGURED:
    chSysLockFromISR();
 8001eb0:	f7ff ffa2 	bl	8001df8 <chSysLockFromISR>

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8001eb4:	4a10      	ldr	r2, [pc, #64]	; (8001ef8 <usb_event+0x7c>)
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f004 fbc2 	bl	8006642 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <usb_event+0x80>)
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f004 fbbd 	bl	8006642 <usbInitEndpointI>

    /* Resetting the state of the CDC subsystem.*/
    sduConfigureHookI(&SDU1);
 8001ec8:	480d      	ldr	r0, [pc, #52]	; (8001f00 <usb_event+0x84>)
 8001eca:	f005 fdc5 	bl	8007a58 <sduConfigureHookI>

    chSysUnlockFromISR();
 8001ece:	f7ff ff98 	bl	8001e02 <chSysUnlockFromISR>
 8001ed2:	e00e      	b.n	8001ef2 <usb_event+0x76>
  case USB_EVENT_RESET:
    /* Falls into.*/
  case USB_EVENT_UNCONFIGURED:
    /* Falls into.*/
  case USB_EVENT_SUSPEND:
    chSysLockFromISR();
 8001ed4:	f7ff ff90 	bl	8001df8 <chSysLockFromISR>

    /* Disconnection event on suspend.*/
    sduSuspendHookI(&SDU1);
 8001ed8:	4809      	ldr	r0, [pc, #36]	; (8001f00 <usb_event+0x84>)
 8001eda:	f005 fd87 	bl	80079ec <sduSuspendHookI>

    chSysUnlockFromISR();
 8001ede:	f7ff ff90 	bl	8001e02 <chSysUnlockFromISR>
 8001ee2:	e006      	b.n	8001ef2 <usb_event+0x76>
    return;
  case USB_EVENT_WAKEUP:
    chSysLockFromISR();
 8001ee4:	f7ff ff88 	bl	8001df8 <chSysLockFromISR>

    /* Disconnection event on suspend.*/
    sduWakeupHookI(&SDU1);
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <usb_event+0x84>)
 8001eea:	f005 fda1 	bl	8007a30 <sduWakeupHookI>

    chSysUnlockFromISR();
 8001eee:	f7ff ff88 	bl	8001e02 <chSysUnlockFromISR>
    return;
  case USB_EVENT_STALLED:
    return;
  }
  return;
}
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	080090cc 	.word	0x080090cc
 8001efc:	080090f0 	.word	0x080090f0
 8001f00:	20000cd0 	.word	0x20000cd0

08001f04 <sof_handler>:

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  (void)usbp;

  osalSysLockFromISR();
 8001f0c:	f7ff ff7e 	bl	8001e0c <osalSysLockFromISR>
  sduSOFHookI(&SDU1);
 8001f10:	4803      	ldr	r0, [pc, #12]	; (8001f20 <sof_handler+0x1c>)
 8001f12:	f005 fe05 	bl	8007b20 <sduSOFHookI>
  osalSysUnlockFromISR();
 8001f16:	f7ff ff7e 	bl	8001e16 <osalSysUnlockFromISR>
}
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000cd0 	.word	0x20000cd0

08001f24 <port_lock.lto_priv.3>:
static inline void port_lock(void) {
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	2320      	movs	r3, #32
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f383 8811 	msr	BASEPRI, r3
}
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <port_unlock.lto_priv.1>:
static inline void port_unlock(void) {
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f383 8811 	msr	BASEPRI, r3
}
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <st_lld_get_counter>:
 *
 * @return              The counter value.
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  return (systime_t)STM32_ST_TIM->CNT;
 8001f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <port_timer_get_time>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0

  return stGetCounter();
 8001f70:	f7ff fff2 	bl	8001f58 <st_lld_get_counter>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <chSysLock>:
static inline void chSysLock(void) {
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	af00      	add	r7, sp, #0
  port_lock();
 8001f7e:	f7ff ffd1 	bl	8001f24 <port_lock.lto_priv.3>
}
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <chSysUnlock>:
static inline void chSysUnlock(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  port_unlock();
 8001f88:	f7ff ffd9 	bl	8001f3e <port_unlock.lto_priv.1>
}
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <chVTGetSystemTimeX>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	af00      	add	r7, sp, #0

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 8001f92:	f7ff ffeb 	bl	8001f6c <port_timer_get_time>
 8001f96:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <chVTGetSystemTime>:
 *
 * @return              The system time in ticks.
 *
 * @api
 */
static inline systime_t chVTGetSystemTime(void) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  systime_t systime;

  chSysLock();
 8001fa2:	f7ff ffea 	bl	8001f7a <chSysLock>
  systime = chVTGetSystemTimeX();
 8001fa6:	f7ff fff2 	bl	8001f8e <chVTGetSystemTimeX>
 8001faa:	6078      	str	r0, [r7, #4]
  chSysUnlock();
 8001fac:	f7ff ffea 	bl	8001f84 <chSysUnlock>

  return systime;
 8001fb0:	687b      	ldr	r3, [r7, #4]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <chRegSetThreadName>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <chRegSetThreadName+0x1c>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
#else
  (void)name;
#endif
}
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000bf0 	.word	0x20000bf0

08001fdc <Thread1>:

/*
 * LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8001fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe0:	b091      	sub	sp, #68	; 0x44
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6378      	str	r0, [r7, #52]	; 0x34

  (void)arg;
modbus_driver_thread();
 8001fe6:	f000 fa89 	bl	80024fc <modbus_driver_thread>
  chRegSetThreadName("blinker");
 8001fea:	4856      	ldr	r0, [pc, #344]	; (8002144 <Thread1+0x168>)
 8001fec:	f7ff ffe6 	bl	8001fbc <chRegSetThreadName>
  while (true) {
    systime_t time;

    time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 8001ff0:	4b55      	ldr	r3, [pc, #340]	; (8002148 <Thread1+0x16c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d101      	bne.n	8001ffe <Thread1+0x22>
 8001ffa:	23fa      	movs	r3, #250	; 0xfa
 8001ffc:	e001      	b.n	8002002 <Thread1+0x26>
 8001ffe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
    palClearLine(LINE_LED5);
 8002004:	4a51      	ldr	r2, [pc, #324]	; (800214c <Thread1+0x170>)
 8002006:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800200a:	8353      	strh	r3, [r2, #26]
    chThdSleepMilliseconds(time);
 800200c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800200e:	4619      	mov	r1, r3
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	460b      	mov	r3, r1
 8002016:	4614      	mov	r4, r2
 8002018:	00a0      	lsls	r0, r4, #2
 800201a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800201c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800201e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
 8002022:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
 8002028:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800202c:	185b      	adds	r3, r3, r1
 800202e:	eb44 0402 	adc.w	r4, r4, r2
 8002032:	00e0      	lsls	r0, r4, #3
 8002034:	6278      	str	r0, [r7, #36]	; 0x24
 8002036:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002038:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800203c:	6278      	str	r0, [r7, #36]	; 0x24
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	623b      	str	r3, [r7, #32]
 8002042:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002046:	1a5b      	subs	r3, r3, r1
 8002048:	eb64 0402 	sbc.w	r4, r4, r2
 800204c:	0120      	lsls	r0, r4, #4
 800204e:	61f8      	str	r0, [r7, #28]
 8002050:	69f8      	ldr	r0, [r7, #28]
 8002052:	ea40 7013 	orr.w	r0, r0, r3, lsr #28
 8002056:	61f8      	str	r0, [r7, #28]
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002060:	185b      	adds	r3, r3, r1
 8002062:	eb44 0402 	adc.w	r4, r4, r2
 8002066:	0122      	lsls	r2, r4, #4
 8002068:	617a      	str	r2, [r7, #20]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8002070:	617a      	str	r2, [r7, #20]
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800207a:	4619      	mov	r1, r3
 800207c:	4622      	mov	r2, r4
 800207e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002082:	f04f 0400 	mov.w	r4, #0
 8002086:	18cd      	adds	r5, r1, r3
 8002088:	eb42 0604 	adc.w	r6, r2, r4
 800208c:	4628      	mov	r0, r5
 800208e:	4631      	mov	r1, r6
 8002090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	f7fe fd90 	bl	8000bbc <__aeabi_uldivmod>
 800209c:	4603      	mov	r3, r0
 800209e:	460c      	mov	r4, r1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fd4b 	bl	8002b3c <chThdSleep>
    palSetLine(LINE_LED5);
 80020a6:	4a29      	ldr	r2, [pc, #164]	; (800214c <Thread1+0x170>)
 80020a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ac:	8313      	strh	r3, [r2, #24]
    chThdSleepMilliseconds(time);
 80020ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4614      	mov	r4, r2
 80020ba:	00a0      	lsls	r0, r4, #2
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80020ce:	185b      	adds	r3, r3, r1
 80020d0:	eb44 0402 	adc.w	r4, r4, r2
 80020d4:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 80020d8:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 80020dc:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 80020e0:	4653      	mov	r3, sl
 80020e2:	465c      	mov	r4, fp
 80020e4:	1a5b      	subs	r3, r3, r1
 80020e6:	eb64 0402 	sbc.w	r4, r4, r2
 80020ea:	ea4f 1904 	mov.w	r9, r4, lsl #4
 80020ee:	ea49 7913 	orr.w	r9, r9, r3, lsr #28
 80020f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020f6:	4643      	mov	r3, r8
 80020f8:	464c      	mov	r4, r9
 80020fa:	185b      	adds	r3, r3, r1
 80020fc:	eb44 0402 	adc.w	r4, r4, r2
 8002100:	0122      	lsls	r2, r4, #4
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002114:	4619      	mov	r1, r3
 8002116:	4622      	mov	r2, r4
 8002118:	f240 33e7 	movw	r3, #999	; 0x3e7
 800211c:	f04f 0400 	mov.w	r4, #0
 8002120:	18cd      	adds	r5, r1, r3
 8002122:	eb42 0604 	adc.w	r6, r2, r4
 8002126:	4628      	mov	r0, r5
 8002128:	4631      	mov	r1, r6
 800212a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	f7fe fd43 	bl	8000bbc <__aeabi_uldivmod>
 8002136:	4603      	mov	r3, r0
 8002138:	460c      	mov	r4, r1
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fcfe 	bl	8002b3c <chThdSleep>
 8002140:	e756      	b.n	8001ff0 <Thread1+0x14>
 8002142:	bf00      	nop
 8002144:	08009140 	.word	0x08009140
 8002148:	08009124 	.word	0x08009124
 800214c:	40020c00 	.word	0x40020c00

08002150 <main>:
}

/*
 * Application entry point.
 */
int main(void) {
 8002150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002152:	b083      	sub	sp, #12
 8002154:	af02      	add	r7, sp, #8
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
#if 1
  halInit();
 8002156:	f005 ff1d 	bl	8007f94 <halInit>
  chSysInit();
 800215a:	f001 f933 	bl	80033c4 <chSysInit>

  /* Initializes a serial-over-USB CDC driver.*/
  sduObjectInit(&SDU1);
 800215e:	484d      	ldr	r0, [pc, #308]	; (8002294 <main+0x144>)
 8002160:	f005 fbd6 	bl	8007910 <sduObjectInit>
  sduStart(&SDU1, &serusbcfg);
 8002164:	494c      	ldr	r1, [pc, #304]	; (8002298 <main+0x148>)
 8002166:	484b      	ldr	r0, [pc, #300]	; (8002294 <main+0x144>)
 8002168:	f005 fc0c 	bl	8007984 <sduStart>
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 800216c:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <main+0x148>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	4a49      	ldr	r2, [pc, #292]	; (8002298 <main+0x148>)
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002178:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800217a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
  chThdSleepMilliseconds(1500);
 8002180:	f643 2098 	movw	r0, #15000	; 0x3a98
 8002184:	f000 fcda 	bl	8002b3c <chThdSleep>
  usbStart(serusbcfg.usbp, &usbcfg);
 8002188:	4b43      	ldr	r3, [pc, #268]	; (8002298 <main+0x148>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4943      	ldr	r1, [pc, #268]	; (800229c <main+0x14c>)
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fa32 	bl	80065f8 <usbStart>
  usbConnectBus(serusbcfg.usbp);
 8002194:	4b40      	ldr	r3, [pc, #256]	; (8002298 <main+0x148>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219a:	4a3f      	ldr	r2, [pc, #252]	; (8002298 <main+0x148>)
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80021a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021a2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80021a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Creates the blinker thread.*/
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80021a8:	2300      	movs	r3, #0
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <main+0x150>)
 80021ae:	2280      	movs	r2, #128	; 0x80
 80021b0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80021b4:	483b      	ldr	r0, [pc, #236]	; (80022a4 <main+0x154>)
 80021b6:	f000 fc43 	bl	8002a40 <chThdCreateStatic>

  /* L3GD20 Object Initialization.*/
  l3gd20ObjectInit(&L3GD20D1);
 80021ba:	483b      	ldr	r0, [pc, #236]	; (80022a8 <main+0x158>)
 80021bc:	f7ff f9ba 	bl	8001534 <l3gd20ObjectInit>

  /* Activates the L3GD20 driver.*/
  l3gd20Start(&L3GD20D1, &l3gd20cfg);
 80021c0:	493a      	ldr	r1, [pc, #232]	; (80022ac <main+0x15c>)
 80021c2:	4839      	ldr	r0, [pc, #228]	; (80022a8 <main+0x158>)
 80021c4:	f7ff f9d0 	bl	8001568 <l3gd20Start>

  /* Normal main() thread activity, printing MEMS data on the SDU1.*/
  while (true) {
    l3gd20GyroscopeReadRaw(&L3GD20D1, gyroraw);
 80021c8:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <main+0x158>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	4938      	ldr	r1, [pc, #224]	; (80022b0 <main+0x160>)
 80021d0:	4838      	ldr	r0, [pc, #224]	; (80022b4 <main+0x164>)
 80021d2:	4798      	blx	r3
    chprintf(chp, "L3GD20 Gyroscope raw data...\r\n");
 80021d4:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <main+0x168>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4938      	ldr	r1, [pc, #224]	; (80022bc <main+0x16c>)
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fdd2 	bl	8001d84 <chprintf>
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 80021e0:	4b37      	ldr	r3, [pc, #220]	; (80022c0 <main+0x170>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e014      	b.n	8002212 <main+0xc2>
      chprintf(chp, "%c-axis: %d\r\n", axisID[i], gyroraw[i]);
 80021e8:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <main+0x168>)
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <main+0x170>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a34      	ldr	r2, [pc, #208]	; (80022c4 <main+0x174>)
 80021f2:	5cd3      	ldrb	r3, [r2, r3]
 80021f4:	4619      	mov	r1, r3
 80021f6:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <main+0x170>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a2d      	ldr	r2, [pc, #180]	; (80022b0 <main+0x160>)
 80021fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002200:	460a      	mov	r2, r1
 8002202:	4931      	ldr	r1, [pc, #196]	; (80022c8 <main+0x178>)
 8002204:	f7ff fdbe 	bl	8001d84 <chprintf>
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 8002208:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <main+0x170>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	4a2c      	ldr	r2, [pc, #176]	; (80022c0 <main+0x170>)
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <main+0x170>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d9e6      	bls.n	80021e8 <main+0x98>
    }

    l3gd20GyroscopeReadCooked(&L3GD20D1, gyrocooked);
 800221a:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <main+0x158>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	492a      	ldr	r1, [pc, #168]	; (80022cc <main+0x17c>)
 8002222:	4824      	ldr	r0, [pc, #144]	; (80022b4 <main+0x164>)
 8002224:	4798      	blx	r3
    chprintf(chp, "L3GD20 Gyroscope cooked data...\r\n");
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <main+0x168>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4929      	ldr	r1, [pc, #164]	; (80022d0 <main+0x180>)
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fda9 	bl	8001d84 <chprintf>
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 8002232:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <main+0x170>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	e01d      	b.n	8002276 <main+0x126>
      chprintf(chp, "%c-axis: %.3f\r\n", axisID[i], gyrocooked[i]);
 800223a:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <main+0x168>)
 800223c:	681d      	ldr	r5, [r3, #0]
 800223e:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <main+0x170>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a20      	ldr	r2, [pc, #128]	; (80022c4 <main+0x174>)
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	461e      	mov	r6, r3
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <main+0x170>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <main+0x17c>)
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe f9d3 	bl	8000600 <__aeabi_f2d>
 800225a:	4603      	mov	r3, r0
 800225c:	460c      	mov	r4, r1
 800225e:	e88d 0018 	stmia.w	sp, {r3, r4}
 8002262:	4632      	mov	r2, r6
 8002264:	491b      	ldr	r1, [pc, #108]	; (80022d4 <main+0x184>)
 8002266:	4628      	mov	r0, r5
 8002268:	f7ff fd8c 	bl	8001d84 <chprintf>
    for(i = 0; i < L3GD20_GYRO_NUMBER_OF_AXES; i++) {
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <main+0x170>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <main+0x170>)
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <main+0x170>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d9dd      	bls.n	800223a <main+0xea>
    }

    chThdSleepMilliseconds(100);
 800227e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002282:	f000 fc5b 	bl	8002b3c <chThdSleep>
    cls(chp);
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <main+0x168>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4913      	ldr	r1, [pc, #76]	; (80022d8 <main+0x188>)
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fd79 	bl	8001d84 <chprintf>
 8002292:	e799      	b.n	80021c8 <main+0x78>
 8002294:	20000cd0 	.word	0x20000cd0
 8002298:	08009124 	.word	0x08009124
 800229c:	08009114 	.word	0x08009114
 80022a0:	08001fdd 	.word	0x08001fdd
 80022a4:	200011e0 	.word	0x200011e0
 80022a8:	20001190 	.word	0x20001190
 80022ac:	2000082c 	.word	0x2000082c
 80022b0:	200011c0 	.word	0x200011c0
 80022b4:	20001194 	.word	0x20001194
 80022b8:	20000840 	.word	0x20000840
 80022bc:	08009148 	.word	0x08009148
 80022c0:	200011d8 	.word	0x200011d8
 80022c4:	20000828 	.word	0x20000828
 80022c8:	08009168 	.word	0x08009168
 80022cc:	200011cc 	.word	0x200011cc
 80022d0:	08009178 	.word	0x08009178
 80022d4:	0800919c 	.word	0x0800919c
 80022d8:	080091ac 	.word	0x080091ac

080022dc <timer_expired>:
systime_t start_time;
systime_t timeout;
#endif

bool timer_expired()
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
	return false;//((get_time()-start_time) >= timeout);
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <stop_timer>:

void stop_timer()
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
	start_time = 0;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <stop_timer+0x14>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
}
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200013c8 	.word	0x200013c8

08002304 <restart_timer>:

void restart_timer()
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
#if __linux__
	start_time = get_time();
#else
	start_time = chVTGetSystemTime();
 8002308:	f7ff fe48 	bl	8001f9c <chVTGetSystemTime>
 800230c:	4602      	mov	r2, r0
 800230e:	4b01      	ldr	r3, [pc, #4]	; (8002314 <restart_timer+0x10>)
 8002310:	601a      	str	r2, [r3, #0]
#endif
}
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200013c8 	.word	0x200013c8

08002318 <construct_response>:
uint16_t construct_response(uint8_t* modbus_tx_frame, uint8_t* modbus_rx_frame,
                        uint16_t tx_data_len)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
    //reconstruct packet
    //
    modbus_tx_frame[MB_TX_FRAME_ADDR] = modbus_rx_frame[MB_FRAME_SLAVE_ADDR];
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	781a      	ldrb	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	701a      	strb	r2, [r3, #0]
    modbus_tx_frame[MB_TX_FRAME_FUNCTION] = modbus_rx_frame[MB_FRAME_FUNCTION];
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3301      	adds	r3, #1
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	7852      	ldrb	r2, [r2, #1]
 8002336:	701a      	strb	r2, [r3, #0]
    modbus_tx_frame[MB_TX_FRAME_COUNT] = tx_data_len;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3302      	adds	r3, #2
 800233c:	88fa      	ldrh	r2, [r7, #6]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

    uint16_t crc_index = tx_data_len + 2;
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	3302      	adds	r3, #2
 8002346:	82fb      	strh	r3, [r7, #22]

    uint16_t calculated_crc = usMBCRC16(modbus_tx_frame, crc_index);
 8002348:	8afb      	ldrh	r3, [r7, #22]
 800234a:	4619      	mov	r1, r3
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f929 	bl	80025a4 <usMBCRC16>
 8002352:	4603      	mov	r3, r0
 8002354:	82bb      	strh	r3, [r7, #20]

    modbus_tx_frame[crc_index] = (uint8_t)calculated_crc;
 8002356:	8afb      	ldrh	r3, [r7, #22]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	8aba      	ldrh	r2, [r7, #20]
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]
    modbus_tx_frame[crc_index+1] = (uint8_t)(calculated_crc >> 8);
 8002362:	8afb      	ldrh	r3, [r7, #22]
 8002364:	3301      	adds	r3, #1
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4413      	add	r3, r2
 800236a:	8aba      	ldrh	r2, [r7, #20]
 800236c:	0a12      	lsrs	r2, r2, #8
 800236e:	b292      	uxth	r2, r2
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]

    return crc_index + 2;
 8002374:	8afb      	ldrh	r3, [r7, #22]
 8002376:	3302      	adds	r3, #2
 8002378:	b29b      	uxth	r3, r3
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <send_response>:
#if __linux__
int fd = 0;
#endif

void send_response(uint8_t* modbus_frame, uint16_t len)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
    //send packets to uart here
#if __linux__
	int bytes_written = write(fd, modbus_frame, len);
#else
	uartStartSend(&UARTD6, len, modbus_frame);
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	4619      	mov	r1, r3
 8002396:	4803      	ldr	r0, [pc, #12]	; (80023a4 <send_response+0x20>)
 8002398:	f003 fe67 	bl	800606a <uartStartSend>
#endif
}
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000a70 	.word	0x20000a70

080023a8 <is_frame_valid>:

bool is_frame_valid(uint8_t* mb_frame, uint16_t len)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
	bool ret_val = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
	uint16_t calculated_crc = usMBCRC16(mb_frame, len);
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	4619      	mov	r1, r3
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f8f1 	bl	80025a4 <usMBCRC16>
 80023c2:	4603      	mov	r3, r0
 80023c4:	81bb      	strh	r3, [r7, #12]
	uint16_t aquired_crc = (mb_frame[MB_FRAME_CRC_HI] & 0x00FF)<<8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3306      	adds	r3, #6
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	021b      	lsls	r3, r3, #8
				| mb_frame[MB_FRAME_CRC_LOW];
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3307      	adds	r3, #7
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	4313      	orrs	r3, r2
 80023da:	b21b      	sxth	r3, r3
	uint16_t aquired_crc = (mb_frame[MB_FRAME_CRC_HI] & 0x00FF)<<8
 80023dc:	817b      	strh	r3, [r7, #10]

	if (calculated_crc == aquired_crc) {
 80023de:	89ba      	ldrh	r2, [r7, #12]
 80023e0:	897b      	ldrh	r3, [r7, #10]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d101      	bne.n	80023ea <is_frame_valid+0x42>
		ret_val = true;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
	}
	return ret_val;
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <process_request>:

bool process_request(uint8_t* frame, uint16_t len, uint16_t num_reg_requested,
			uint16_t start_addr)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	4608      	mov	r0, r1
 80023fe:	4611      	mov	r1, r2
 8002400:	461a      	mov	r2, r3
 8002402:	4603      	mov	r3, r0
 8002404:	817b      	strh	r3, [r7, #10]
 8002406:	460b      	mov	r3, r1
 8002408:	813b      	strh	r3, [r7, #8]
 800240a:	4613      	mov	r3, r2
 800240c:	80fb      	strh	r3, [r7, #6]
	if ((num_reg_requested + start_addr) > MAX_NUM_MODBUS_REGISTERS) {
 800240e:	893a      	ldrh	r2, [r7, #8]
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	4413      	add	r3, r2
 8002414:	2b0c      	cmp	r3, #12
 8002416:	dd01      	ble.n	800241c <process_request+0x28>
		//construct and return error
        return false;
 8002418:	2300      	movs	r3, #0
 800241a:	e00a      	b.n	8002432 <process_request+0x3e>
	}

    memcpy(&frame[MB_TX_FRAME_DATA], &modbus_registers[start_addr], num_reg_requested);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1cd8      	adds	r0, r3, #3
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4a05      	ldr	r2, [pc, #20]	; (800243c <process_request+0x48>)
 8002426:	4413      	add	r3, r2
 8002428:	893a      	ldrh	r2, [r7, #8]
 800242a:	4619      	mov	r1, r3
 800242c:	f006 fc3c 	bl	8008ca8 <memcpy>

    return true;
 8002430:	2301      	movs	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200013b0 	.word	0x200013b0

08002440 <poll_uart_for_character>:

int8_t poll_uart_for_character()
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
    int8_t ch = -1;
 8002446:	23ff      	movs	r3, #255	; 0xff
 8002448:	71fb      	strb	r3, [r7, #7]
        return -1;//perror("Error is");
    } else {
        return -1;
    }
#else
	uartStartReceive(&UARTD6, 1, (void*)&ch);
 800244a:	1dfb      	adds	r3, r7, #7
 800244c:	461a      	mov	r2, r3
 800244e:	2101      	movs	r1, #1
 8002450:	4804      	ldr	r0, [pc, #16]	; (8002464 <poll_uart_for_character+0x24>)
 8002452:	f003 fe1f 	bl	8006094 <uartStartReceive>
	return ch;
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
#endif
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000a70 	.word	0x20000a70

08002468 <handle_rx_packet>:
    }
}


void handle_rx_packet(uint8_t* mb_frame, uint16_t mb_frame_size)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
	int16_t ch = -1;
 8002474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002478:	81fb      	strh	r3, [r7, #14]
	uint8_t frame_ptr = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	737b      	strb	r3, [r7, #13]
    bool packet_received = false;
 800247e:	2300      	movs	r3, #0
 8002480:	733b      	strb	r3, [r7, #12]
 8002482:	e031      	b.n	80024e8 <handle_rx_packet+0x80>
    //wait_for_start_signal();
	while (!packet_received) {
		while (ch < 0) {
			ch = poll_uart_for_character();
 8002484:	f7ff ffdc 	bl	8002440 <poll_uart_for_character>
 8002488:	4603      	mov	r3, r0
 800248a:	81fb      	strh	r3, [r7, #14]
			if (frame_ptr == mb_frame_size) {
 800248c:	7b7b      	ldrb	r3, [r7, #13]
 800248e:	b29b      	uxth	r3, r3
 8002490:	887a      	ldrh	r2, [r7, #2]
 8002492:	429a      	cmp	r2, r3
 8002494:	d104      	bne.n	80024a0 <handle_rx_packet+0x38>
				if (timer_expired()) {
 8002496:	f7ff ff21 	bl	80022dc <timer_expired>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d103      	bne.n	80024a8 <handle_rx_packet+0x40>
		while (ch < 0) {
 80024a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	dbed      	blt.n	8002484 <handle_rx_packet+0x1c>
					break;
				}
			}
		}
		if (timer_expired()) {
 80024a8:	f7ff ff18 	bl	80022dc <timer_expired>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00c      	beq.n	80024cc <handle_rx_packet+0x64>
			if (frame_ptr == mb_frame_size) {
 80024b2:	7b7b      	ldrb	r3, [r7, #13]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d102      	bne.n	80024c2 <handle_rx_packet+0x5a>
                packet_received = true;
 80024bc:	2301      	movs	r3, #1
 80024be:	733b      	strb	r3, [r7, #12]
			} else {

                frame_ptr = 0;
				stop_timer();
 80024c0:	e00d      	b.n	80024de <handle_rx_packet+0x76>
                frame_ptr = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	737b      	strb	r3, [r7, #13]
				stop_timer();
 80024c6:	f7ff ff11 	bl	80022ec <stop_timer>
 80024ca:	e008      	b.n	80024de <handle_rx_packet+0x76>
			}
		} else {

                //printf("timer not expFrame ptr is: %d\n", frame_ptr);
			mb_frame[frame_ptr] = ch;
 80024cc:	7b7b      	ldrb	r3, [r7, #13]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	89fa      	ldrh	r2, [r7, #14]
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]
			frame_ptr++;
 80024d8:	7b7b      	ldrb	r3, [r7, #13]
 80024da:	3301      	adds	r3, #1
 80024dc:	737b      	strb	r3, [r7, #13]
		}
        ch = -1;
 80024de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024e2:	81fb      	strh	r3, [r7, #14]
        restart_timer();
 80024e4:	f7ff ff0e 	bl	8002304 <restart_timer>
	while (!packet_received) {
 80024e8:	7b3b      	ldrb	r3, [r7, #12]
 80024ea:	f083 0301 	eor.w	r3, r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1d5      	bne.n	80024a0 <handle_rx_packet+0x38>
	}
}
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <modbus_driver_thread>:
#endif

#define MY_MB_ADDRESS 1

void modbus_driver_thread()
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af00      	add	r7, sp, #0
	uint8_t modbus_tx_frame[MODBUS_TX_FRAME_SIZE];
	uint8_t modbus_rx_frame[MODBUS_RX_FRAME_SIZE];

	timeout = TIME_US2I(2000);
 8002502:	4b25      	ldr	r3, [pc, #148]	; (8002598 <modbus_driver_thread+0x9c>)
 8002504:	2214      	movs	r2, #20
 8002506:	601a      	str	r2, [r3, #0]
	set_blocking (fd, 1);
#else
	/*
   * Activates the serial driver 1, PA9 and PA10 are routed to USART2.
   */
  uartStart(&UARTD6, &uart_cfg_1);
 8002508:	4924      	ldr	r1, [pc, #144]	; (800259c <modbus_driver_thread+0xa0>)
 800250a:	4825      	ldr	r0, [pc, #148]	; (80025a0 <modbus_driver_thread+0xa4>)
 800250c:	f003 fd98 	bl	8006040 <uartStart>

#endif

	while (1) {
		handle_rx_packet(modbus_rx_frame, MODBUS_RX_FRAME_SIZE);
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	2108      	movs	r1, #8
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ffa7 	bl	8002468 <handle_rx_packet>

        if((modbus_rx_frame[MB_FRAME_SLAVE_ADDR] == MY_MB_ADDRESS)
 800251a:	793b      	ldrb	r3, [r7, #4]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d1f7      	bne.n	8002510 <modbus_driver_thread+0x14>
            && ((modbus_rx_frame[MB_FRAME_FUNCTION] == 0x03)
 8002520:	797b      	ldrb	r3, [r7, #5]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d002      	beq.n	800252c <modbus_driver_thread+0x30>
           || (modbus_rx_frame[MB_FRAME_FUNCTION] == 0x00))) {
 8002526:	797b      	ldrb	r3, [r7, #5]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f1      	bne.n	8002510 <modbus_driver_thread+0x14>

            if (is_frame_valid(modbus_rx_frame, MODBUS_RX_FRAME_SIZE)) {
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2108      	movs	r1, #8
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff39 	bl	80023a8 <is_frame_valid>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0e9      	beq.n	8002510 <modbus_driver_thread+0x14>
                uint16_t num_reg_requested = (modbus_rx_frame[MB_FRAME_NO_REG_HI] & 0x00FF)<<8
 800253c:	7a3b      	ldrb	r3, [r7, #8]
 800253e:	021b      	lsls	r3, r3, #8
                            | modbus_rx_frame[MB_FRAME_NO_REG_LOW];
 8002540:	b21a      	sxth	r2, r3
 8002542:	7a7b      	ldrb	r3, [r7, #9]
 8002544:	b21b      	sxth	r3, r3
 8002546:	4313      	orrs	r3, r2
 8002548:	b21b      	sxth	r3, r3
                uint16_t num_reg_requested = (modbus_rx_frame[MB_FRAME_NO_REG_HI] & 0x00FF)<<8
 800254a:	84fb      	strh	r3, [r7, #38]	; 0x26


                uint16_t start_addr = (modbus_rx_frame[MB_FRAME_STARTING_ADDR_HI] & 0x00FF)<<8
 800254c:	79bb      	ldrb	r3, [r7, #6]
 800254e:	021b      	lsls	r3, r3, #8
                            | modbus_rx_frame[MB_FRAME_STARTING_ADDR_LOW];
 8002550:	b21a      	sxth	r2, r3
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	b21b      	sxth	r3, r3
 8002556:	4313      	orrs	r3, r2
 8002558:	b21b      	sxth	r3, r3
                uint16_t start_addr = (modbus_rx_frame[MB_FRAME_STARTING_ADDR_HI] & 0x00FF)<<8
 800255a:	84bb      	strh	r3, [r7, #36]	; 0x24

                if (process_request(modbus_tx_frame, MODBUS_TX_FRAME_SIZE,
 800255c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800255e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002560:	f107 000c 	add.w	r0, r7, #12
 8002564:	2114      	movs	r1, #20
 8002566:	f7ff ff45 	bl	80023f4 <process_request>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0cf      	beq.n	8002510 <modbus_driver_thread+0x14>
                                    num_reg_requested, start_addr)) {
                    uint16_t tx_packet_len = construct_response(modbus_tx_frame, modbus_rx_frame, num_reg_requested * 2);
 8002570:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	1d39      	adds	r1, r7, #4
 8002578:	f107 030c 	add.w	r3, r7, #12
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fecb 	bl	8002318 <construct_response>
 8002582:	4603      	mov	r3, r0
 8002584:	847b      	strh	r3, [r7, #34]	; 0x22
                    send_response(modbus_tx_frame, tx_packet_len);
 8002586:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002588:	f107 030c 	add.w	r3, r7, #12
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fef8 	bl	8002384 <send_response>
 8002594:	e7bc      	b.n	8002510 <modbus_driver_thread+0x14>
 8002596:	bf00      	nop
 8002598:	200013cc 	.word	0x200013cc
 800259c:	20000808 	.word	0x20000808
 80025a0:	20000a70 	.word	0x20000a70

080025a4 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

int
usMBCRC16( unsigned char * pucFrame, int usLen )
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
    unsigned char           ucCRCHi = 0xFF;
 80025ae:	23ff      	movs	r3, #255	; 0xff
 80025b0:	73fb      	strb	r3, [r7, #15]
    unsigned char           ucCRCLo = 0xFF;
 80025b2:	23ff      	movs	r3, #255	; 0xff
 80025b4:	73bb      	strb	r3, [r7, #14]
 80025b6:	e013      	b.n	80025e0 <usMBCRC16+0x3c>
    int             iIndex;

    while( usLen-- )
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	7bbb      	ldrb	r3, [r7, #14]
 80025c2:	4053      	eors	r3, r2
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( unsigned char )( ucCRCHi ^ aucCRCHi[iIndex] );
 80025c8:	4a0d      	ldr	r2, [pc, #52]	; (8002600 <usMBCRC16+0x5c>)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	4413      	add	r3, r2
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	4053      	eors	r3, r2
 80025d4:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <usMBCRC16+0x60>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4413      	add	r3, r2
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	1e5a      	subs	r2, r3, #1
 80025e4:	603a      	str	r2, [r7, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1e6      	bne.n	80025b8 <usMBCRC16+0x14>
    }
    return ( int )( ucCRCHi << 8 | ucCRCLo );
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	021a      	lsls	r2, r3, #8
 80025ee:	7bbb      	ldrb	r3, [r7, #14]
 80025f0:	4313      	orrs	r3, r2
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	080091b8 	.word	0x080091b8
 8002604:	080092b8 	.word	0x080092b8

08002608 <port_lock.lto_priv.36>:
static inline void port_lock(void) {
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	2320      	movs	r3, #32
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f383 8811 	msr	BASEPRI, r3
}
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <port_unlock.lto_priv.33>:
static inline void port_unlock(void) {
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	2300      	movs	r3, #0
 800262a:	607b      	str	r3, [r7, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f383 8811 	msr	BASEPRI, r3
}
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <chSysLock.lto_priv.41>:
static inline void chSysLock(void) {
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  port_lock();
 8002640:	f7ff ffe2 	bl	8002608 <port_lock.lto_priv.36>
}
 8002644:	bd80      	pop	{r7, pc}

08002646 <chSysUnlock.lto_priv.39>:
static inline void chSysUnlock(void) {
 8002646:	b580      	push	{r7, lr}
 8002648:	af00      	add	r7, sp, #0
  port_unlock();
 800264a:	f7ff ffea 	bl	8002622 <port_unlock.lto_priv.33>
}
 800264e:	bd80      	pop	{r7, pc}

08002650 <_core_init>:
/**
 * @brief   Low level memory manager initialization.
 *
 * @notapi
 */
void _core_init(void) {
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <_core_init+0x18>)
 8002656:	4a05      	ldr	r2, [pc, #20]	; (800266c <_core_init+0x1c>)
 8002658:	601a      	str	r2, [r3, #0]
  ch_memcore.endmem  = __heap_end__;
 800265a:	4b03      	ldr	r3, [pc, #12]	; (8002668 <_core_init+0x18>)
 800265c:	4a04      	ldr	r2, [pc, #16]	; (8002670 <_core_init+0x20>)
 800265e:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.nextmem = &static_heap[0];
  ch_memcore.endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	20000c68 	.word	0x20000c68
 800266c:	200013d0 	.word	0x200013d0
 8002670:	20010000 	.word	0x20010000

08002674 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4413      	add	r3, r2
 8002686:	1e5a      	subs	r2, r3, #1
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	425b      	negs	r3, r3
 800268c:	4013      	ands	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <chCoreAllocAlignedWithOffsetI+0x68>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	4413      	add	r3, r2
 800269e:	1e5a      	subs	r2, r3, #1
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	425b      	negs	r3, r3
 80026a4:	4013      	ands	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
  next = p + size;
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4413      	add	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <chCoreAllocAlignedWithOffsetI+0x68>)
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d304      	bcc.n	80026c4 <chCoreAllocAlignedWithOffsetI+0x50>
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <chCoreAllocAlignedWithOffsetI+0x68>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d901      	bls.n	80026c8 <chCoreAllocAlignedWithOffsetI+0x54>
    return NULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e003      	b.n	80026d0 <chCoreAllocAlignedWithOffsetI+0x5c>
  }

  ch_memcore.nextmem = next;
 80026c8:	4a04      	ldr	r2, [pc, #16]	; (80026dc <chCoreAllocAlignedWithOffsetI+0x68>)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	6013      	str	r3, [r2, #0]

  return p;
 80026ce:	697b      	ldr	r3, [r7, #20]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	371c      	adds	r7, #28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	20000c68 	.word	0x20000c68

080026e0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  void *p;

  chSysLock();
 80026ec:	f7ff ffa6 	bl	800263c <chSysLock.lto_priv.41>
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f7ff ffbd 	bl	8002674 <chCoreAllocAlignedWithOffsetI>
 80026fa:	6178      	str	r0, [r7, #20]
  chSysUnlock();
 80026fc:	f7ff ffa3 	bl	8002646 <chSysUnlock.lto_priv.39>

  return p;
 8002700:	697b      	ldr	r3, [r7, #20]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <_heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <_heap_init+0x20>)
 8002712:	4a07      	ldr	r2, [pc, #28]	; (8002730 <_heap_init+0x24>)
 8002714:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <_heap_init+0x20>)
 8002718:	2200      	movs	r2, #0
 800271a:	605a      	str	r2, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <_heap_init+0x20>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 8002722:	4804      	ldr	r0, [pc, #16]	; (8002734 <_heap_init+0x28>)
 8002724:	f000 f8a0 	bl	8002868 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000c70 	.word	0x20000c70
 8002730:	080026e1 	.word	0x080026e1
 8002734:	20000c7c 	.word	0x20000c7c

08002738 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	605a      	str	r2, [r3, #4]
  mp->align = align;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	609a      	str	r2, [r3, #8]
  mp->provider = provider;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	60da      	str	r2, [r3, #12]
}
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8002772:	2200      	movs	r2, #0
 8002774:	6839      	ldr	r1, [r7, #0]
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff7c 	bl	8002674 <chCoreAllocAlignedWithOffsetI>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <chPoolObjectInit>:
 *
 * @init
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2204      	movs	r2, #4
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff ffcd 	bl	8002738 <chPoolObjectInitAligned>
}
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <dyn_list_init>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  dlp->next = (dyn_element_t *)dlp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	601a      	str	r2, [r3, #0]
}
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <_factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void _factory_init(void) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 80027c0:	480e      	ldr	r0, [pc, #56]	; (80027fc <_factory_init+0x40>)
 80027c2:	f000 f851 	bl	8002868 <chMtxObjectInit>
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
#endif

#if CH_CFG_FACTORY_OBJECTS_REGISTRY == TRUE
  dyn_list_init(&ch_factory.obj_list);
 80027c6:	480e      	ldr	r0, [pc, #56]	; (8002800 <_factory_init+0x44>)
 80027c8:	f7ff ffec 	bl	80027a4 <dyn_list_init>
  chPoolObjectInit(&ch_factory.obj_pool,
 80027cc:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <_factory_init+0x48>)
 80027ce:	2114      	movs	r1, #20
 80027d0:	480d      	ldr	r0, [pc, #52]	; (8002808 <_factory_init+0x4c>)
 80027d2:	f7ff ffd8 	bl	8002786 <chPoolObjectInit>
                   sizeof (registered_object_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_GENERIC_BUFFERS == TRUE
  dyn_list_init(&ch_factory.buf_list);
 80027d6:	480d      	ldr	r0, [pc, #52]	; (800280c <_factory_init+0x50>)
 80027d8:	f7ff ffe4 	bl	80027a4 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_SEMAPHORES == TRUE
  dyn_list_init(&ch_factory.sem_list);
 80027dc:	480c      	ldr	r0, [pc, #48]	; (8002810 <_factory_init+0x54>)
 80027de:	f7ff ffe1 	bl	80027a4 <dyn_list_init>
  chPoolObjectInit(&ch_factory.sem_pool,
 80027e2:	4a08      	ldr	r2, [pc, #32]	; (8002804 <_factory_init+0x48>)
 80027e4:	211c      	movs	r1, #28
 80027e6:	480b      	ldr	r0, [pc, #44]	; (8002814 <_factory_init+0x58>)
 80027e8:	f7ff ffcd 	bl	8002786 <chPoolObjectInit>
                   sizeof (dyn_semaphore_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_MAILBOXES == TRUE
  dyn_list_init(&ch_factory.mbx_list);
 80027ec:	480a      	ldr	r0, [pc, #40]	; (8002818 <_factory_init+0x5c>)
 80027ee:	f7ff ffd9 	bl	80027a4 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
 80027f2:	480a      	ldr	r0, [pc, #40]	; (800281c <_factory_init+0x60>)
 80027f4:	f7ff ffd6 	bl	80027a4 <dyn_list_init>
#endif
}
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000c8c 	.word	0x20000c8c
 8002800:	20000c9c 	.word	0x20000c9c
 8002804:	08002769 	.word	0x08002769
 8002808:	20000ca0 	.word	0x20000ca0
 800280c:	20000cb0 	.word	0x20000cb0
 8002810:	20000cb4 	.word	0x20000cb4
 8002814:	20000cb8 	.word	0x20000cb8
 8002818:	20000cc8 	.word	0x20000cc8
 800281c:	20000ccc 	.word	0x20000ccc

08002820 <port_lock.lto_priv.38>:
static inline void port_lock(void) {
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	2320      	movs	r3, #32
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f383 8811 	msr	BASEPRI, r3
}
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <port_unlock.lto_priv.35>:
static inline void port_unlock(void) {
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	2300      	movs	r3, #0
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f383 8811 	msr	BASEPRI, r3
}
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <port_lock_from_isr.lto_priv.6>:
static inline void port_lock_from_isr(void) {
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  port_lock();
 8002858:	f7ff ffe2 	bl	8002820 <port_lock.lto_priv.38>
}
 800285c:	bd80      	pop	{r7, pc}

0800285e <port_unlock_from_isr.lto_priv.4>:
static inline void port_unlock_from_isr(void) {
 800285e:	b580      	push	{r7, lr}
 8002860:	af00      	add	r7, sp, #0
  port_unlock();
 8002862:	f7ff ffea 	bl	800283a <port_unlock.lto_priv.35>
}
 8002866:	bd80      	pop	{r7, pc}

08002868 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fa80 	bl	8002d78 <queue_init.lto_priv.57>
  mp->owner = NULL;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e01a      	b.n	80028cc <chEvtBroadcastFlagsI+0x48>
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	431a      	orrs	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <chEvtBroadcastFlagsI+0x32>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <chEvtBroadcastFlagsI+0x42>
      chEvtSignalI(elp->listener, elp->events);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4619      	mov	r1, r3
 80028c0:	4610      	mov	r0, r2
 80028c2:	f000 f80a 	bl	80028da <chEvtSignalI>
    }
    elp = elp->next;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]
  while (elp != (event_listener_t *)esp) {
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d1e0      	bne.n	8002896 <chEvtBroadcastFlagsI+0x12>
  }
}
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	635a      	str	r2, [r3, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f6:	2b0a      	cmp	r3, #10
 80028f8:	d106      	bne.n	8002908 <chEvtSignalI+0x2e>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	4013      	ands	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10d      	bne.n	8002924 <chEvtSignalI+0x4a>
      ((tp->state == CH_STATE_WTANDEVT) &&
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3020 	ldrb.w	r3, [r3, #32]
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800290e:	2b0b      	cmp	r3, #11
 8002910:	d10e      	bne.n	8002930 <chEvtSignalI+0x56>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	401a      	ands	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8002920:	429a      	cmp	r2, r3
 8002922:	d105      	bne.n	8002930 <chEvtSignalI+0x56>
    tp->u.rdymsg = MSG_OK;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 ffca 	bl	80038c4 <chSchReadyI>
  }
}
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]

  tp->prio      = prio;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	609a      	str	r2, [r3, #8]
  tp->state     = CH_STATE_WTSTART;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2202      	movs	r2, #2
 800294e:	f883 2020 	strb.w	r2, [r3, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	63da      	str	r2, [r3, #60]	; 0x3c
  tp->mtxlist   = NULL;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	639a      	str	r2, [r3, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	635a      	str	r2, [r3, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  tp->name      = name;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	619a      	str	r2, [r3, #24]
  REG_INSERT(tp);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a0d      	ldr	r2, [pc, #52]	; (80029b4 <_thread_init+0x7c>)
 800297e:	611a      	str	r2, [r3, #16]
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <_thread_init+0x7c>)
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	615a      	str	r2, [r3, #20]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	611a      	str	r2, [r3, #16]
 8002990:	4a08      	ldr	r2, [pc, #32]	; (80029b4 <_thread_init+0x7c>)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6153      	str	r3, [r2, #20]
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3328      	adds	r3, #40	; 0x28
 800299a:	4618      	mov	r0, r3
 800299c:	f001 f8f6 	bl	8003b8c <list_init.lto_priv.107>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	332c      	adds	r3, #44	; 0x2c
 80029a4:	4618      	mov	r0, r3
 80029a6:	f001 f90f 	bl	8003bc8 <queue_init.lto_priv.93>
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
 80029aa:	68fb      	ldr	r3, [r7, #12]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	20000bf0 	.word	0x20000bf0

080029b8 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	3b48      	subs	r3, #72	; 0x48
 80029c6:	60fb      	str	r3, [r7, #12]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6912      	ldr	r2, [r2, #16]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6952      	ldr	r2, [r2, #20]
 80029ec:	645a      	str	r2, [r3, #68]	; 0x44
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <chThdCreateSuspendedI+0x58>)
 80029f4:	661a      	str	r2, [r3, #96]	; 0x60

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff ff99 	bl	8002938 <_thread_init>
 8002a06:	4603      	mov	r3, r0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	08000321 	.word	0x08000321

08002a14 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  _thread_memfill((uint8_t *)tdp->wbase,
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 8002a1c:	f001 f935 	bl	8003c8a <chSysLock.lto_priv.88>
  tp = chThdCreateSuspendedI(tdp);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ffc9 	bl	80029b8 <chThdCreateSuspendedI>
 8002a26:	60f8      	str	r0, [r7, #12]
  chSchWakeupS(tp, MSG_OK);
 8002a28:	2100      	movs	r1, #0
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f001 f830 	bl	8003a90 <chSchWakeupS>
  chSysUnlock();
 8002a30:	f001 f930 	bl	8003c94 <chSysUnlock.lto_priv.85>

  return tp;
 8002a34:	68fb      	ldr	r3, [r7, #12]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
  _thread_memfill((uint8_t *)wsp,
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 8002a4e:	f001 f91c 	bl	8003c8a <chSysLock.lto_priv.88>

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	3b48      	subs	r3, #72	; 0x48
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4413      	add	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	60da      	str	r2, [r3, #12]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	6a3a      	ldr	r2, [r7, #32]
 8002a7a:	645a      	str	r2, [r3, #68]	; 0x44
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <chThdCreateStatic+0x68>)
 8002a82:	661a      	str	r2, [r3, #96]	; 0x60

  tp = _thread_init(tp, "noname", prio);
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	4909      	ldr	r1, [pc, #36]	; (8002aac <chThdCreateStatic+0x6c>)
 8002a88:	6978      	ldr	r0, [r7, #20]
 8002a8a:	f7ff ff55 	bl	8002938 <_thread_init>
 8002a8e:	6178      	str	r0, [r7, #20]

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8002a90:	2100      	movs	r1, #0
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f000 fffc 	bl	8003a90 <chSchWakeupS>
  chSysUnlock();
 8002a98:	f001 f8fc 	bl	8003c94 <chSysUnlock.lto_priv.85>

  return tp;
 8002a9c:	697b      	ldr	r3, [r7, #20]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	08000321 	.word	0x08000321
 8002aac:	080093b8 	.word	0x080093b8

08002ab0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  chSysLock();
 8002ab8:	f001 f8e7 	bl	8003c8a <chSysLock.lto_priv.88>
  chThdExitS(msg);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f803 	bl	8002ac8 <chThdExitS>
  /* The thread never returns here.*/
}
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  thread_t *tp = currp;
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <chThdExitS+0x70>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24
 8002adc:	e008      	b.n	8002af0 <chThdExitS+0x28>
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
    (void) chSchReadyI(list_remove(&tp->waiting));
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3328      	adds	r3, #40	; 0x28
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f001 f891 	bl	8003c0a <list_remove.lto_priv.106>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 feea 	bl	80038c4 <chSchReadyI>
  while (list_notempty(&tp->waiting)) {
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	3328      	adds	r3, #40	; 0x28
 8002af4:	4618      	mov	r0, r3
 8002af6:	f001 f855 	bl	8003ba4 <list_notempty.lto_priv.105>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ee      	bne.n	8002ade <chThdExitS+0x16>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d110      	bne.n	8002b2c <chThdExitS+0x64>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b10:	f003 0303 	and.w	r3, r3, #3
  if ((tp->refs == (trefs_t)0) &&
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <chThdExitS+0x64>
    REG_REMOVE(tp);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	6912      	ldr	r2, [r2, #16]
 8002b20:	611a      	str	r2, [r3, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	6952      	ldr	r2, [r2, #20]
 8002b2a:	615a      	str	r2, [r3, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8002b2c:	200f      	movs	r0, #15
 8002b2e:	f000 ff1d 	bl	800396c <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000bf0 	.word	0x20000bf0

08002b3c <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

  chSysLock();
 8002b44:	f001 f8a1 	bl	8003c8a <chSysLock.lto_priv.88>
  chThdSleepS(time);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f001 f8b5 	bl	8003cb8 <chThdSleepS.lto_priv.100>
  chSysUnlock();
 8002b4e:	f001 f8a1 	bl	8003c94 <chSysUnlock.lto_priv.85>
}
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <chThdSuspendTimeoutS>:
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  thread_t *tp = chThdGetSelfX();
 8002b62:	f001 f89d 	bl	8003ca0 <chThdGetSelfX.lto_priv.98>
 8002b66:	60f8      	str	r0, [r7, #12]

  chDbgAssert(*trp == NULL, "not NULL");

  if (TIME_IMMEDIATE == timeout) {
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <chThdSuspendTimeoutS+0x1c>
    return MSG_TIMEOUT;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b72:	e00a      	b.n	8002b8a <chThdSuspendTimeoutS+0x32>
  }

  *trp = tp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	601a      	str	r2, [r3, #0]
  tp->u.wttrp = trp;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8002b80:	6839      	ldr	r1, [r7, #0]
 8002b82:	2003      	movs	r0, #3
 8002b84:	f000 ff50 	bl	8003a28 <chSchGoSleepTimeoutS>
 8002b88:	4603      	mov	r3, r0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]

  if (*trp != NULL) {
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00b      	beq.n	8002bbc <chThdResumeI+0x2a>
    thread_t *tp = *trp;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fe84 	bl	80038c4 <chSchReadyI>
  }
}
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]

  if (TIME_IMMEDIATE == timeout) {
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <chThdEnqueueTimeoutS+0x16>
    return MSG_TIMEOUT;
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd8:	e00a      	b.n	8002bf0 <chThdEnqueueTimeoutS+0x2c>
  }

  queue_insert(currp, tqp);
 8002bda:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <chThdEnqueueTimeoutS+0x34>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 f824 	bl	8003c2e <queue_insert.lto_priv.91>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002be6:	6839      	ldr	r1, [r7, #0]
 8002be8:	2004      	movs	r0, #4
 8002bea:	f000 ff1d 	bl	8003a28 <chSchGoSleepTimeoutS>
 8002bee:	4603      	mov	r3, r0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000bf0 	.word	0x20000bf0

08002bfc <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]

  if (queue_notempty(tqp)) {
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 ffed 	bl	8003be6 <queue_notempty.lto_priv.77>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <chThdDequeueNextI+0x1e>
    chThdDoDequeueNextI(tqp, msg);
 8002c12:	6839      	ldr	r1, [r7, #0]
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f001 f85a 	bl	8003cce <chThdDoDequeueNextI.lto_priv.97>
  }
}
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	e003      	b.n	8002c34 <chThdDequeueAllI+0x14>

  while (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
 8002c2c:	6839      	ldr	r1, [r7, #0]
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f001 f84d 	bl	8003cce <chThdDoDequeueNextI.lto_priv.97>
  while (queue_notempty(tqp)) {
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 ffd6 	bl	8003be6 <queue_notempty.lto_priv.77>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f5      	bne.n	8002c2c <chThdDequeueAllI+0xc>
  }
}
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <port_rt_get_counter_value>:
/**
 * @brief   Returns the current value of the realtime counter.
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0

  return DWT->CYCCNT;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <port_rt_get_counter_value+0x14>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e0001000 	.word	0xe0001000

08002c60 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
 8002c60:	b490      	push	{r4, r7}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]

  tmp->n++;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	1ad2      	subs	r2, r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	1ad2      	subs	r2, r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f04f 0400 	mov.w	r4, #0
 8002c94:	185b      	adds	r3, r3, r1
 8002c96:	eb44 0402 	adc.w	r4, r4, r2
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	e9c2 3404 	strd	r3, r4, [r2, #16]
  if (tmp->last > tmp->worst) {
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d903      	bls.n	8002cb4 <tm_stop+0x54>
    tmp->worst = tmp->last;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d203      	bcs.n	8002cc8 <tm_stop+0x68>
    tmp->best = tmp->last;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	601a      	str	r2, [r3, #0]
  }
}
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc90      	pop	{r4, r7}
 8002cce:	4770      	bx	lr

08002cd0 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <_tm_init+0x30>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	675a      	str	r2, [r3, #116]	; 0x74
  chTMObjectInit(&tm);
 8002cdc:	463b      	mov	r3, r7
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f810 	bl	8002d04 <chTMObjectInit>
  chTMStartMeasurementX(&tm);
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f828 	bl	8002d3c <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8002cec:	463b      	mov	r3, r7
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f830 	bl	8002d54 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4a02      	ldr	r2, [pc, #8]	; (8002d00 <_tm_init+0x30>)
 8002cf8:	6753      	str	r3, [r2, #116]	; 0x74
}
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000bf0 	.word	0x20000bf0

08002d04 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
 8002d04:	b490      	push	{r4, r7}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  tmp->best       = (rtcnt_t)-1;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d12:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	f04f 0400 	mov.w	r4, #0
 8002d30:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc90      	pop	{r4, r7}
 8002d3a:	4770      	bx	lr

08002d3c <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  tmp->last = chSysGetRealtimeCounterX();
 8002d44:	f7ff ff80 	bl	8002c48 <port_rt_get_counter_value>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
}
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8002d5c:	f7ff ff74 	bl	8002c48 <port_rt_get_counter_value>
 8002d60:	4601      	mov	r1, r0
 8002d62:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <chTMStopMeasurementX+0x20>)
 8002d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d66:	461a      	mov	r2, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff79 	bl	8002c60 <tm_stop>
}
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000bf0 	.word	0x20000bf0

08002d78 <queue_init.lto_priv.57>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  tqp->next = (thread_t *)tqp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	605a      	str	r2, [r3, #4]
}
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <Vector15C>:
/**
 * @brief   USART6 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD6);
 8002d9c:	4802      	ldr	r0, [pc, #8]	; (8002da8 <Vector15C+0x10>)
 8002d9e:	f001 febd 	bl	8004b1c <serve_usart_irq.lto_priv.147>

  OSAL_IRQ_EPILOGUE();
 8002da2:	f7fe f8b1 	bl	8000f08 <_port_irq_epilogue>
}
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000a70 	.word	0x20000a70

08002dac <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 8002db0:	4806      	ldr	r0, [pc, #24]	; (8002dcc <uart_lld_init+0x20>)
 8002db2:	f003 f930 	bl	8006016 <uartObjectInit>
  UARTD6.usart   = USART6;
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <uart_lld_init+0x20>)
 8002db8:	4a05      	ldr	r2, [pc, #20]	; (8002dd0 <uart_lld_init+0x24>)
 8002dba:	609a      	str	r2, [r3, #8]
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <uart_lld_init+0x20>)
 8002dbe:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <uart_lld_init+0x28>)
 8002dc0:	611a      	str	r2, [r3, #16]
  UARTD6.dmatx   = STM32_DMA_STREAM(STM32_UART_USART6_TX_DMA_STREAM);
 8002dc2:	4b02      	ldr	r3, [pc, #8]	; (8002dcc <uart_lld_init+0x20>)
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <uart_lld_init+0x2c>)
 8002dc6:	615a      	str	r2, [r3, #20]
#endif
}
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000a70 	.word	0x20000a70
 8002dd0:	40011400 	.word	0x40011400
 8002dd4:	08008e24 	.word	0x08008e24
 8002dd8:	08008e60 	.word	0x08008e60

08002ddc <uart_lld_start>:
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

  if (uartp->state == UART_STOP) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d14a      	bne.n	8002e82 <uart_lld_start+0xa6>
                        STM32_DMA_CR_PL(STM32_UART_UART5_DMA_PRIORITY);
    }
#endif

#if STM32_UART_USE_USART6
    if (&UARTD6 == uartp) {
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a2b      	ldr	r2, [pc, #172]	; (8002e9c <uart_lld_start+0xc0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d127      	bne.n	8002e44 <uart_lld_start+0x68>
      bool b;
      b = dmaStreamAllocate(uartp->dmarx,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6918      	ldr	r0, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a29      	ldr	r2, [pc, #164]	; (8002ea0 <uart_lld_start+0xc4>)
 8002dfc:	210c      	movs	r1, #12
 8002dfe:	f002 f821 	bl	8004e44 <dmaStreamAllocate>
 8002e02:	4603      	mov	r3, r0
 8002e04:	73fb      	strb	r3, [r7, #15]
                            STM32_UART_USART6_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(uartp->dmatx,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6958      	ldr	r0, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a25      	ldr	r2, [pc, #148]	; (8002ea4 <uart_lld_start+0xc8>)
 8002e0e:	210c      	movs	r1, #12
 8002e10:	f002 f818 	bl	8004e44 <dmaStreamAllocate>
 8002e14:	4603      	mov	r3, r0
 8002e16:	73fb      	strb	r3, [r7, #15]
                            STM32_UART_USART6_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableUSART6(true);
 8002e18:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <uart_lld_start+0xcc>)
 8002e1a:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <uart_lld_start+0xcc>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f043 0320 	orr.w	r3, r3, #32
 8002e22:	6453      	str	r3, [r2, #68]	; 0x44
 8002e24:	4a20      	ldr	r2, [pc, #128]	; (8002ea8 <uart_lld_start+0xcc>)
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <uart_lld_start+0xcc>)
 8002e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e2a:	f043 0320 	orr.w	r3, r3, #32
 8002e2e:	6653      	str	r3, [r2, #100]	; 0x64
      nvicEnableVector(STM32_USART6_NUMBER, STM32_UART_USART6_IRQ_PRIORITY);
 8002e30:	210c      	movs	r1, #12
 8002e32:	2047      	movs	r0, #71	; 0x47
 8002e34:	f003 fede 	bl	8006bf4 <nvicEnableVector>
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART6_RX_DMA_CHANNEL) |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f043 6220 	orr.w	r2, r3, #167772160	; 0xa000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	60da      	str	r2, [r3, #12]
    }
#endif

    /* Static DMA setup, the transfer size depends on the USART settings,
       it is 16 bits if M=1 and PCE=0 else it is 8 bits.*/
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	8b1b      	ldrh	r3, [r3, #24]
 8002e4a:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 8002e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e52:	d105      	bne.n	8002e60 <uart_lld_start+0x84>
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f443 5220 	orr.w	r2, r3, #10240	; 0x2800
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6892      	ldr	r2, [r2, #8]
 8002e6a:	3204      	adds	r2, #4
 8002e6c:	609a      	str	r2, [r3, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6892      	ldr	r2, [r2, #8]
 8002e78:	3204      	adds	r2, #4
 8002e7a:	609a      	str	r2, [r3, #8]
    uartp->rxbuf = 0;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	831a      	strh	r2, [r3, #24]
  }

  uartp->rxstate = UART_RX_IDLE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	709a      	strb	r2, [r3, #2]
  uartp->txstate = UART_TX_IDLE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	705a      	strb	r2, [r3, #1]
  usart_start(uartp);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f001 fd52 	bl	8004938 <usart_start.lto_priv.146>
}
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000a70 	.word	0x20000a70
 8002ea0:	080049e9 	.word	0x080049e9
 8002ea4:	08004a99 	.word	0x08004a99
 8002ea8:	40023800 	.word	0x40023800

08002eac <uart_lld_start_send>:
 * @param[in] n         number of data frames to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmatx, n);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	68d2      	ldr	r2, [r2, #12]
 8002ed6:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
 8002eda:	601a      	str	r2, [r3, #0]
     if called from uartSendFullTimeout(). Also we need to clear TC flag
     which could be set before.*/
#if UART_USE_WAIT == TRUE
  if ((uartp->config->txend2_cb != NULL) || (uartp->early == false)) {
#else
  if (uartp->config->txend2_cb != NULL) {
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00c      	beq.n	8002f00 <uart_lld_start_send+0x54>
#endif
    uartp->usart->SR = ~USART_SR_TC;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eee:	601a      	str	r2, [r3, #0]
    uartp->usart->CR1 |= USART_CR1_TCIE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	6892      	ldr	r2, [r2, #8]
 8002ef8:	68d2      	ldr	r2, [r2, #12]
 8002efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002efe:	60da      	str	r2, [r3, #12]
  }

  /* Starting transfer.*/
  dmaStreamEnable(uartp->dmatx);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	6952      	ldr	r2, [r2, #20]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
}
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <uart_lld_start_receive>:
 * @param[in] n         number of data frames to send
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void uart_lld_start_receive(UARTDriver *uartp, size_t n, void *rxbuf) {
 8002f1e:	b480      	push	{r7}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]

  /* Stopping previous activity (idle state).*/
  dmaStreamDisable(uartp->dmarx);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	6912      	ldr	r2, [r2, #16]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	f022 021f 	bic.w	r2, r2, #31
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f7      	bne.n	8002f3e <uart_lld_start_receive+0x20>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	6912      	ldr	r2, [r2, #16]
 8002f58:	7a12      	ldrb	r2, [r2, #8]
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	223d      	movs	r2, #61	; 0x3d
 8002f5e:	408a      	lsls	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]

  /* RX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmarx, rxbuf);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, n);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode    | STM32_DMA_CR_DIR_P2M |
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	68d2      	ldr	r2, [r2, #12]
 8002f80:	f442 6282 	orr.w	r2, r2, #1040	; 0x410
 8002f84:	601a      	str	r2, [r3, #0]
                                 STM32_DMA_CR_MINC | STM32_DMA_CR_TCIE);

  /* Starting transfer.*/
  dmaStreamEnable(uartp->dmarx);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	6912      	ldr	r2, [r2, #16]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
}
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <gpio_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]

  gpiop->OTYPER  = config->otyper;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	601a      	str	r2, [r3, #0]
}
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <stm32_gpio_init>:

static void stm32_gpio_init(void) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002ff4:	4a16      	ldr	r2, [pc, #88]	; (8003050 <stm32_gpio_init+0x60>)
 8002ff6:	4b16      	ldr	r3, [pc, #88]	; (8003050 <stm32_gpio_init+0x60>)
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f043 031f 	orr.w	r3, r3, #31
 8002ffe:	6113      	str	r3, [r2, #16]
 8003000:	4b13      	ldr	r3, [pc, #76]	; (8003050 <stm32_gpio_init+0x60>)
 8003002:	2200      	movs	r2, #0
 8003004:	611a      	str	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8003006:	4a12      	ldr	r2, [pc, #72]	; (8003050 <stm32_gpio_init+0x60>)
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <stm32_gpio_init+0x60>)
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	f043 031f 	orr.w	r3, r3, #31
 8003010:	6313      	str	r3, [r2, #48]	; 0x30
 8003012:	4a0f      	ldr	r2, [pc, #60]	; (8003050 <stm32_gpio_init+0x60>)
 8003014:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <stm32_gpio_init+0x60>)
 8003016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003018:	f043 031f 	orr.w	r3, r3, #31
 800301c:	6513      	str	r3, [r2, #80]	; 0x50

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
 800301e:	490d      	ldr	r1, [pc, #52]	; (8003054 <stm32_gpio_init+0x64>)
 8003020:	480d      	ldr	r0, [pc, #52]	; (8003058 <stm32_gpio_init+0x68>)
 8003022:	f7ff ffbf 	bl	8002fa4 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
 8003026:	490d      	ldr	r1, [pc, #52]	; (800305c <stm32_gpio_init+0x6c>)
 8003028:	480d      	ldr	r0, [pc, #52]	; (8003060 <stm32_gpio_init+0x70>)
 800302a:	f7ff ffbb 	bl	8002fa4 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
 800302e:	490d      	ldr	r1, [pc, #52]	; (8003064 <stm32_gpio_init+0x74>)
 8003030:	480d      	ldr	r0, [pc, #52]	; (8003068 <stm32_gpio_init+0x78>)
 8003032:	f7ff ffb7 	bl	8002fa4 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
 8003036:	490d      	ldr	r1, [pc, #52]	; (800306c <stm32_gpio_init+0x7c>)
 8003038:	480d      	ldr	r0, [pc, #52]	; (8003070 <stm32_gpio_init+0x80>)
 800303a:	f7ff ffb3 	bl	8002fa4 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
 800303e:	490d      	ldr	r1, [pc, #52]	; (8003074 <stm32_gpio_init+0x84>)
 8003040:	480d      	ldr	r0, [pc, #52]	; (8003078 <stm32_gpio_init+0x88>)
 8003042:	f7ff ffaf 	bl	8002fa4 <gpio_init>
#endif
#if STM32_HAS_GPIOG
  gpio_init(GPIOG, &gpio_default_config.PGData);
#endif
#if STM32_HAS_GPIOH
  gpio_init(GPIOH, &gpio_default_config.PHData);
 8003046:	490d      	ldr	r1, [pc, #52]	; (800307c <stm32_gpio_init+0x8c>)
 8003048:	480d      	ldr	r0, [pc, #52]	; (8003080 <stm32_gpio_init+0x90>)
 800304a:	f7ff ffab 	bl	8002fa4 <gpio_init>
  gpio_init(GPIOJ, &gpio_default_config.PJData);
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
#endif
}
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40023800 	.word	0x40023800
 8003054:	08008ea0 	.word	0x08008ea0
 8003058:	40020000 	.word	0x40020000
 800305c:	08008ebc 	.word	0x08008ebc
 8003060:	40020400 	.word	0x40020400
 8003064:	08008ed8 	.word	0x08008ed8
 8003068:	40020800 	.word	0x40020800
 800306c:	08008ef4 	.word	0x08008ef4
 8003070:	40020c00 	.word	0x40020c00
 8003074:	08008f10 	.word	0x08008f10
 8003078:	40021000 	.word	0x40021000
 800307c:	08008f2c 	.word	0x08008f2c
 8003080:	40021c00 	.word	0x40021c00

08003084 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0

  stm32_gpio_init();
 8003088:	f7ff ffb2 	bl	8002ff0 <stm32_gpio_init>
  stm32_clock_init();
 800308c:	f003 fe60 	bl	8006d50 <stm32_clock_init>
}
 8003090:	bd80      	pop	{r7, pc}

08003092 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0

}
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <chTimeAddX.lto_priv.138>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
#endif

  return systime + (systime_t)interval;
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	4413      	add	r3, r2
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <chTimeDiffX.lto_priv.136>:
 * @param[in] end       second system time
 * @return              The interval representing the time difference.
 *
 * @xclass
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	1ad3      	subs	r3, r2, r3
  /*lint -restore*/
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <__NVIC_SetPriorityGrouping+0x44>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f4:	4013      	ands	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800310a:	4a04      	ldr	r2, [pc, #16]	; (800311c <__NVIC_SetPriorityGrouping+0x44>)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	60d3      	str	r3, [r2, #12]
}
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	6039      	str	r1, [r7, #0]
 800312a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003130:	2b00      	cmp	r3, #0
 8003132:	db0a      	blt.n	800314a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003134:	490d      	ldr	r1, [pc, #52]	; (800316c <__NVIC_SetPriority+0x4c>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	0112      	lsls	r2, r2, #4
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	440b      	add	r3, r1
 8003144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003148:	e00a      	b.n	8003160 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314a:	4909      	ldr	r1, [pc, #36]	; (8003170 <__NVIC_SetPriority+0x50>)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3b04      	subs	r3, #4
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	0112      	lsls	r2, r2, #4
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	440b      	add	r3, r1
 800315e:	761a      	strb	r2, [r3, #24]
  }
}
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000e100 	.word	0xe000e100
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <port_init>:
static inline void port_init(void) {
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
 8003178:	2003      	movs	r0, #3
 800317a:	f7ff ffad 	bl	80030d8 <__NVIC_SetPriorityGrouping>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800317e:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <port_init+0x38>)
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <port_init+0x38>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003188:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800318a:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <port_init+0x3c>)
 800318c:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <port_init+0x3c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
 8003196:	2101      	movs	r1, #1
 8003198:	f06f 0004 	mvn.w	r0, #4
 800319c:	f7ff ffc0 	bl	8003120 <__NVIC_SetPriority>
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 80031a0:	2102      	movs	r1, #2
 80031a2:	f06f 0001 	mvn.w	r0, #1
 80031a6:	f7ff ffbb 	bl	8003120 <__NVIC_SetPriority>
}
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	e000edf0 	.word	0xe000edf0
 80031b0:	e0001000 	.word	0xe0001000

080031b4 <port_lock.lto_priv.119>:
static inline void port_lock(void) {
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	2320      	movs	r3, #32
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f383 8811 	msr	BASEPRI, r3
}
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <port_unlock.lto_priv.116>:
static inline void port_unlock(void) {
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	2300      	movs	r3, #0
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f383 8811 	msr	BASEPRI, r3
}
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <port_lock_from_isr.lto_priv.128>:
static inline void port_lock_from_isr(void) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  port_lock();
 80031ec:	f7ff ffe2 	bl	80031b4 <port_lock.lto_priv.119>
}
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <port_unlock_from_isr.lto_priv.126>:
static inline void port_unlock_from_isr(void) {
 80031f2:	b580      	push	{r7, lr}
 80031f4:	af00      	add	r7, sp, #0
  port_unlock();
 80031f6:	f7ff ffea 	bl	80031ce <port_unlock.lto_priv.116>
}
 80031fa:	bd80      	pop	{r7, pc}

080031fc <port_disable>:
static inline void port_disable(void) {
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003200:	b672      	cpsid	i
}
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <port_enable>:
static inline void port_enable(void) {
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	2300      	movs	r3, #0
 8003212:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 800321a:	b662      	cpsie	i
}
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <port_wait_for_interrupt>:
static inline void port_wait_for_interrupt(void) {
 8003226:	b480      	push	{r7}
 8003228:	af00      	add	r7, sp, #0
}
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <port_rt_get_counter_value>:
static inline rtcnt_t port_rt_get_counter_value(void) {
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return DWT->CYCCNT;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <port_rt_get_counter_value+0x14>)
 800323a:	685b      	ldr	r3, [r3, #4]
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e0001000 	.word	0xe0001000

0800324c <st_lld_get_counter.lto_priv.113>:
static inline systime_t st_lld_get_counter(void) {
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return (systime_t)STM32_ST_TIM->CNT;
 8003250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003256:	4618      	mov	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <port_timer_stop_alarm.lto_priv.134>:
static inline void port_timer_stop_alarm(void) {
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  stStopAlarm();
 8003264:	f004 fee8 	bl	8008038 <stStopAlarm>
}
 8003268:	bd80      	pop	{r7, pc}

0800326a <port_timer_set_alarm.lto_priv.132>:
static inline void port_timer_set_alarm(systime_t time) {
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  stSetAlarm(time);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f004 fee5 	bl	8008042 <stSetAlarm>
}
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <port_timer_get_time.lto_priv.110>:
static inline systime_t port_timer_get_time(void) {
 800327e:	b580      	push	{r7, lr}
 8003280:	af00      	add	r7, sp, #0
  return stGetCounter();
 8003282:	f7ff ffe3 	bl	800324c <st_lld_get_counter.lto_priv.113>
 8003286:	4603      	mov	r3, r0
}
 8003288:	4618      	mov	r0, r3
 800328a:	bd80      	pop	{r7, pc}

0800328c <chSysEnable>:
static inline void chSysEnable(void) {
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  port_enable();
 8003290:	f7ff ffbb 	bl	800320a <port_enable>
}
 8003294:	bd80      	pop	{r7, pc}

08003296 <chSysLockFromISR.lto_priv.124>:
static inline void chSysLockFromISR(void) {
 8003296:	b580      	push	{r7, lr}
 8003298:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 800329a:	f7ff ffa5 	bl	80031e8 <port_lock_from_isr.lto_priv.128>
}
 800329e:	bd80      	pop	{r7, pc}

080032a0 <chSysUnlockFromISR.lto_priv.122>:
static inline void chSysUnlockFromISR(void) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 80032a4:	f7ff ffa5 	bl	80031f2 <port_unlock_from_isr.lto_priv.126>
}
 80032a8:	bd80      	pop	{r7, pc}

080032aa <chVTGetSystemTimeX.lto_priv.130>:
static inline systime_t chVTGetSystemTimeX(void) {
 80032aa:	b580      	push	{r7, lr}
 80032ac:	af00      	add	r7, sp, #0
  return port_timer_get_time();
 80032ae:	f7ff ffe6 	bl	800327e <port_timer_get_time.lto_priv.110>
 80032b2:	4603      	mov	r3, r0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80032be:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <chVTDoTickI+0xf4>)
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	617b      	str	r3, [r7, #20]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
 80032c4:	f7ff fff1 	bl	80032aa <chVTGetSystemTimeX.lto_priv.130>
 80032c8:	60b8      	str	r0, [r7, #8]
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80032ca:	4b38      	ldr	r3, [pc, #224]	; (80033ac <chVTDoTickI+0xf4>)
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fef2 	bl	80030ba <chTimeDiffX.lto_priv.136>
 80032d6:	60f8      	str	r0, [r7, #12]

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d832      	bhi.n	8003348 <chVTDoTickI+0x90>
    /* Consuming all timers between "vtp->lasttime" and now.*/
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
 80032e2:	4b32      	ldr	r3, [pc, #200]	; (80033ac <chVTDoTickI+0xf4>)
 80032e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	4413      	add	r3, r2
 80032ec:	4a2f      	ldr	r2, [pc, #188]	; (80033ac <chVTDoTickI+0xf4>)
 80032ee:	6293      	str	r3, [r2, #40]	; 0x28
      nowdelta -= vtp->delta;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	60fb      	str	r3, [r7, #12]

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a2c      	ldr	r2, [pc, #176]	; (80033b0 <chVTDoTickI+0xf8>)
 8003300:	605a      	str	r2, [r3, #4]
      ch.vtlist.next = vtp->next;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a29      	ldr	r2, [pc, #164]	; (80033ac <chVTDoTickI+0xf4>)
 8003308:	61d3      	str	r3, [r2, #28]
      fn = vtp->func;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	607b      	str	r3, [r7, #4]
      vtp->func = NULL;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2200      	movs	r2, #0
 8003314:	60da      	str	r2, [r3, #12]

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8003316:	4b25      	ldr	r3, [pc, #148]	; (80033ac <chVTDoTickI+0xf4>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	4a25      	ldr	r2, [pc, #148]	; (80033b0 <chVTDoTickI+0xf8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d101      	bne.n	8003324 <chVTDoTickI+0x6c>
        port_timer_stop_alarm();
 8003320:	f7ff ff9e 	bl	8003260 <port_timer_stop_alarm.lto_priv.134>
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
 8003324:	f7ff ffbc 	bl	80032a0 <chSysUnlockFromISR.lto_priv.122>
      fn(vtp->par);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4610      	mov	r0, r2
 8003330:	4798      	blx	r3
      chSysLockFromISR();
 8003332:	f7ff ffb0 	bl	8003296 <chSysLockFromISR.lto_priv.124>

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8003336:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <chVTDoTickI+0xf4>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	617b      	str	r3, [r7, #20]
    }
    while (vtp->delta <= nowdelta);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	429a      	cmp	r2, r3
 8003344:	d9cd      	bls.n	80032e2 <chVTDoTickI+0x2a>
 8003346:	e7bd      	b.n	80032c4 <chVTDoTickI+0xc>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8003348:	4b18      	ldr	r3, [pc, #96]	; (80033ac <chVTDoTickI+0xf4>)
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <chVTDoTickI+0xf8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d028      	beq.n	80033a4 <chVTDoTickI+0xec>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
 8003352:	4b16      	ldr	r3, [pc, #88]	; (80033ac <chVTDoTickI+0xf4>)
 8003354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	4a14      	ldr	r2, [pc, #80]	; (80033ac <chVTDoTickI+0xf4>)
 800335c:	6293      	str	r3, [r2, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <chVTDoTickI+0xf4>)
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <chVTDoTickI+0xf4>)
 8003364:	69d2      	ldr	r2, [r2, #28]
 8003366:	6891      	ldr	r1, [r2, #8]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	1a8a      	subs	r2, r1, r2
 800336c:	609a      	str	r2, [r3, #8]

  /* Recalculating the next alarm time.*/
  delta = chTimeDiffX(now, chTimeAddX(ch.vtlist.lasttime, vtp->delta));
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <chVTDoTickI+0xf4>)
 8003370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	4619      	mov	r1, r3
 8003378:	4610      	mov	r0, r2
 800337a:	f7ff fe90 	bl	800309e <chTimeAddX.lto_priv.138>
 800337e:	4603      	mov	r3, r0
 8003380:	4619      	mov	r1, r3
 8003382:	68b8      	ldr	r0, [r7, #8]
 8003384:	f7ff fe99 	bl	80030ba <chTimeDiffX.lto_priv.136>
 8003388:	6138      	str	r0, [r7, #16]
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d801      	bhi.n	8003394 <chVTDoTickI+0xdc>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8003390:	2302      	movs	r3, #2
 8003392:	613b      	str	r3, [r7, #16]
  /* The delta could be too large for the physical timer to handle.*/
  else if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));
 8003394:	6939      	ldr	r1, [r7, #16]
 8003396:	68b8      	ldr	r0, [r7, #8]
 8003398:	f7ff fe81 	bl	800309e <chTimeAddX.lto_priv.138>
 800339c:	4603      	mov	r3, r0
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ff63 	bl	800326a <port_timer_set_alarm.lto_priv.132>

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
              chTimeDiffX(ch.vtlist.lasttime, chTimeAddX(now, delta)),
              "exceeding delta");
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000bf0 	.word	0x20000bf0
 80033b0:	20000c0c 	.word	0x20000c0c

080033b4 <_idle_thread.lto_priv.18>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 80033bc:	f7ff ff33 	bl	8003226 <port_wait_for_interrupt>
 80033c0:	e7fc      	b.n	80033bc <_idle_thread.lto_priv.18+0x8>
	...

080033c4 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0

  _scheduler_init();
 80033c8:	f000 fa6a 	bl	80038a0 <_scheduler_init>
  _vt_init();
 80033cc:	f000 f8b8 	bl	8003540 <_vt_init>
#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  ch.dbg.isr_cnt  = (cnt_t)0;
  ch.dbg.lock_cnt = (cnt_t)0;
#endif
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 80033d0:	f7ff fc7e 	bl	8002cd0 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 80033d4:	f7ff f93c 	bl	8002650 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 80033d8:	f7ff f998 	bl	800270c <_heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  _factory_init();
 80033dc:	f7ff f9ee 	bl	80027bc <_factory_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80033e0:	2280      	movs	r2, #128	; 0x80
 80033e2:	490c      	ldr	r1, [pc, #48]	; (8003414 <chSysInit+0x50>)
 80033e4:	480c      	ldr	r0, [pc, #48]	; (8003418 <chSysInit+0x54>)
 80033e6:	f7ff faa7 	bl	8002938 <_thread_init>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <chSysInit+0x58>)
 80033ee:	619a      	str	r2, [r3, #24]
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <chSysInit+0x58>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2200      	movs	r2, #0
 80033f6:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <chSysInit+0x58>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2020 	strb.w	r2, [r3, #32]

  /* Port layer initialization last because it depend on some of the
     initializations performed before.*/
  port_init();
 8003402:	f7ff feb7 	bl	8003174 <port_init>

  /* Initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* It is alive now.*/
  chSysEnable();
 8003406:	f7ff ff41 	bl	800328c <chSysEnable>
    };

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
 800340a:	4805      	ldr	r0, [pc, #20]	; (8003420 <chSysInit+0x5c>)
 800340c:	f7ff fb02 	bl	8002a14 <chThdCreate>
  }
#endif
}
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	08008f68 	.word	0x08008f68
 8003418:	20000c20 	.word	0x20000c20
 800341c:	20000bf0 	.word	0x20000bf0
 8003420:	08008f50 	.word	0x08008f50

08003424 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

  port_disable();
 800342c:	f7ff fee6 	bl	80031fc <port_disable>

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8003430:	4a01      	ldr	r2, [pc, #4]	; (8003438 <chSysHalt+0x14>)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003436:	e7fe      	b.n	8003436 <chSysHalt+0x12>
 8003438:	20000bf0 	.word	0x20000bf0

0800343c <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
 8003440:	f7ff ff3a 	bl	80032b8 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
 8003444:	bd80      	pop	{r7, pc}

08003446 <chSysIsCounterWithinX>:
 * @retval true         current time within the specified time window.
 * @retval false        current time not within the specified time window.
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {
 8003446:	b480      	push	{r7}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]

  return (bool)((cnt - start) < (end - start));
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	1ad2      	subs	r2, r2, r3
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1acb      	subs	r3, r1, r3
 800345e:	429a      	cmp	r2, r3
 8003460:	bf34      	ite	cc
 8003462:	2301      	movcc	r3, #1
 8003464:	2300      	movcs	r3, #0
 8003466:	b2db      	uxtb	r3, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <chSysPolledDelayX>:
 *
 * @param[in] cycles    number of cycles
 *
 * @xclass
 */
void chSysPolledDelayX(rtcnt_t cycles) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  rtcnt_t start = chSysGetRealtimeCounterX();
 800347c:	f7ff feda 	bl	8003234 <port_rt_get_counter_value>
 8003480:	60f8      	str	r0, [r7, #12]
  rtcnt_t end  = start + cycles;
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	60bb      	str	r3, [r7, #8]

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 800348a:	f7ff fed3 	bl	8003234 <port_rt_get_counter_value>
 800348e:	4603      	mov	r3, r0
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	68f9      	ldr	r1, [r7, #12]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ffd6 	bl	8003446 <chSysIsCounterWithinX>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f4      	bne.n	800348a <chSysPolledDelayX+0x16>
  }
}
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <chTimeAddX.lto_priv.139>:
                                   sysinterval_t interval) {
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
  return systime + (systime_t)interval;
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	4413      	add	r3, r2
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <chTimeDiffX.lto_priv.137>:
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
  return (sysinterval_t)((systime_t)(end - start));
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	1ad3      	subs	r3, r2, r3
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <st_lld_get_counter.lto_priv.114>:
static inline systime_t st_lld_get_counter(void) {
 80034de:	b480      	push	{r7}
 80034e0:	af00      	add	r7, sp, #0
  return (systime_t)STM32_ST_TIM->CNT;
 80034e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <port_timer_start_alarm>:
static inline void port_timer_start_alarm(systime_t time) {
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  stStartAlarm(time);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f004 fd92 	bl	8008024 <stStartAlarm>
}
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <port_timer_stop_alarm.lto_priv.135>:
static inline void port_timer_stop_alarm(void) {
 8003506:	b580      	push	{r7, lr}
 8003508:	af00      	add	r7, sp, #0
  stStopAlarm();
 800350a:	f004 fd95 	bl	8008038 <stStopAlarm>
}
 800350e:	bd80      	pop	{r7, pc}

08003510 <port_timer_set_alarm.lto_priv.133>:
static inline void port_timer_set_alarm(systime_t time) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  stSetAlarm(time);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f004 fd92 	bl	8008042 <stSetAlarm>
}
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <port_timer_get_time.lto_priv.111>:
static inline systime_t port_timer_get_time(void) {
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  return stGetCounter();
 8003528:	f7ff ffd9 	bl	80034de <st_lld_get_counter.lto_priv.114>
 800352c:	4603      	mov	r3, r0
}
 800352e:	4618      	mov	r0, r3
 8003530:	bd80      	pop	{r7, pc}

08003532 <chVTGetSystemTimeX.lto_priv.131>:
static inline systime_t chVTGetSystemTimeX(void) {
 8003532:	b580      	push	{r7, lr}
 8003534:	af00      	add	r7, sp, #0
  return port_timer_get_time();
 8003536:	f7ff fff5 	bl	8003524 <port_timer_get_time.lto_priv.111>
 800353a:	4603      	mov	r3, r0
}
 800353c:	4618      	mov	r0, r3
 800353e:	bd80      	pop	{r7, pc}

08003540 <_vt_init>:
 * @brief   Virtual Timers initialization.
 * @note    Internal use only.
 *
 * @notapi
 */
void _vt_init(void) {
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <_vt_init+0x28>)
 8003546:	4a09      	ldr	r2, [pc, #36]	; (800356c <_vt_init+0x2c>)
 8003548:	61da      	str	r2, [r3, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 800354a:	4b07      	ldr	r3, [pc, #28]	; (8003568 <_vt_init+0x28>)
 800354c:	4a07      	ldr	r2, [pc, #28]	; (800356c <_vt_init+0x2c>)
 800354e:	621a      	str	r2, [r3, #32]
  ch.vtlist.delta = (sysinterval_t)-1;
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <_vt_init+0x28>)
 8003552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003556:	625a      	str	r2, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <_vt_init+0x28>)
 800355a:	2200      	movs	r2, #0
 800355c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000bf0 	.word	0x20000bf0
 800356c:	20000c0c 	.word	0x20000c0c

08003570 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	611a      	str	r2, [r3, #16]
  vtp->func = vtfunc;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	60da      	str	r2, [r3, #12]

#if CH_CFG_ST_TIMEDELTA > 0
  {
    systime_t now = chVTGetSystemTimeX();
 800358a:	f7ff ffd2 	bl	8003532 <chVTGetSystemTimeX.lto_priv.131>
 800358e:	6178      	str	r0, [r7, #20]

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d801      	bhi.n	800359a <chVTDoSetI+0x2a>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8003596:	2302      	movs	r3, #2
 8003598:	60bb      	str	r3, [r7, #8]
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800359a:	4b40      	ldr	r3, [pc, #256]	; (800369c <chVTDoSetI+0x12c>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	4a40      	ldr	r2, [pc, #256]	; (80036a0 <chVTDoSetI+0x130>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d11c      	bne.n	80035de <chVTDoSetI+0x6e>

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 80035a4:	4a3d      	ldr	r2, [pc, #244]	; (800369c <chVTDoSetI+0x12c>)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	6293      	str	r3, [r2, #40]	; 0x28
      ch.vtlist.next = vtp;
 80035aa:	4a3c      	ldr	r2, [pc, #240]	; (800369c <chVTDoSetI+0x12c>)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	61d3      	str	r3, [r2, #28]
      ch.vtlist.prev = vtp;
 80035b0:	4a3a      	ldr	r2, [pc, #232]	; (800369c <chVTDoSetI+0x12c>)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6213      	str	r3, [r2, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a39      	ldr	r2, [pc, #228]	; (80036a0 <chVTDoSetI+0x130>)
 80035ba:	601a      	str	r2, [r3, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a38      	ldr	r2, [pc, #224]	; (80036a0 <chVTDoSetI+0x130>)
 80035c0:	605a      	str	r2, [r3, #4]
      vtp->delta = delay;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	609a      	str	r2, [r3, #8]
        delay = (sysinterval_t)TIME_MAX_SYSTIME;
      }
#endif

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(chTimeAddX(ch.vtlist.lasttime, delay));
 80035c8:	4b34      	ldr	r3, [pc, #208]	; (800369c <chVTDoSetI+0x12c>)
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff ff69 	bl	80034a6 <chTimeAddX.lto_priv.139>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ff8b 	bl	80034f2 <port_timer_start_alarm>
 80035dc:	e05a      	b.n	8003694 <chVTDoSetI+0x124>

      return;
    }

    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;
 80035de:	4b2f      	ldr	r3, [pc, #188]	; (800369c <chVTDoSetI+0x12c>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	61fb      	str	r3, [r7, #28]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 80035e4:	4b2d      	ldr	r3, [pc, #180]	; (800369c <chVTDoSetI+0x12c>)
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	6979      	ldr	r1, [r7, #20]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff ff69 	bl	80034c2 <chTimeDiffX.lto_priv.137>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4413      	add	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 80035f8:	4b28      	ldr	r3, [pc, #160]	; (800369c <chVTDoSetI+0x12c>)
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	6979      	ldr	r1, [r7, #20]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff5f 	bl	80034c2 <chTimeDiffX.lto_priv.137>
 8003604:	4602      	mov	r2, r0
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	429a      	cmp	r2, r3
 800360a:	d908      	bls.n	800361e <chVTDoSetI+0xae>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	61bb      	str	r3, [r7, #24]
      p = p->next;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	e019      	b.n	8003652 <chVTDoSetI+0xe2>
    }
    else if (delta < p->delta) {
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	429a      	cmp	r2, r3
 8003626:	d914      	bls.n	8003652 <chVTDoSetI+0xe2>
      sysinterval_t deadline_delta;

      /* A small delay that will become the first element in the delta list
         and next deadline.*/
      deadline_delta = delta;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	613b      	str	r3, [r7, #16]
      /* The delta could be too large for the physical timer to handle.*/
      if (deadline_delta > (sysinterval_t)TIME_MAX_SYSTIME) {
        deadline_delta = (sysinterval_t)TIME_MAX_SYSTIME;
      }
#endif
      port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, deadline_delta));
 800362c:	4b1b      	ldr	r3, [pc, #108]	; (800369c <chVTDoSetI+0x12c>)
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	6939      	ldr	r1, [r7, #16]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ff37 	bl	80034a6 <chTimeAddX.lto_priv.139>
 8003638:	4603      	mov	r3, r0
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff ff68 	bl	8003510 <port_timer_set_alarm.lto_priv.133>
 8003640:	e007      	b.n	8003652 <chVTDoSetI+0xe2>
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	61bb      	str	r3, [r7, #24]
    p = p->next;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	61fb      	str	r3, [r7, #28]
  while (p->delta < delta) {
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	429a      	cmp	r2, r3
 800365a:	d3f2      	bcc.n	8003642 <chVTDoSetI+0xd2>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	601a      	str	r2, [r3, #0]
  vtp->prev = vtp->next->prev;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	605a      	str	r2, [r3, #4]
  vtp->prev->next = vtp;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	601a      	str	r2, [r3, #0]
  p->prev = vtp;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]
  vtp->delta = delta;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	609a      	str	r2, [r3, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	1ad2      	subs	r2, r2, r3
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	609a      	str	r2, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 800368c:	4b03      	ldr	r3, [pc, #12]	; (800369c <chVTDoSetI+0x12c>)
 800368e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003692:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003694:	3720      	adds	r7, #32
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000bf0 	.word	0x20000bf0
 80036a0:	20000c0c 	.word	0x20000c0c

080036a4 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80036ac:	4b36      	ldr	r3, [pc, #216]	; (8003788 <chVTDoResetI+0xe4>)
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d01b      	beq.n	80036ee <chVTDoResetI+0x4a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6812      	ldr	r2, [r2, #0]
 80036be:	601a      	str	r2, [r3, #0]
    vtp->next->prev = vtp->prev;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6852      	ldr	r2, [r2, #4]
 80036c8:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	60da      	str	r2, [r3, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a2d      	ldr	r2, [pc, #180]	; (800378c <chVTDoResetI+0xe8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d051      	beq.n	800377e <chVTDoResetI+0xda>
      vtp->next->delta += vtp->delta;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	6891      	ldr	r1, [r2, #8]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6892      	ldr	r2, [r2, #8]
 80036e8:	440a      	add	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	e048      	b.n	8003780 <chVTDoResetI+0xdc>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a25      	ldr	r2, [pc, #148]	; (8003788 <chVTDoResetI+0xe4>)
 80036f4:	61d3      	str	r3, [r2, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80036f6:	4b24      	ldr	r3, [pc, #144]	; (8003788 <chVTDoResetI+0xe4>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	4a24      	ldr	r2, [pc, #144]	; (800378c <chVTDoResetI+0xe8>)
 80036fc:	605a      	str	r2, [r3, #4]
  vtp->func = NULL;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	60da      	str	r2, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8003704:	4b20      	ldr	r3, [pc, #128]	; (8003788 <chVTDoResetI+0xe4>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	4a20      	ldr	r2, [pc, #128]	; (800378c <chVTDoResetI+0xe8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d102      	bne.n	8003714 <chVTDoResetI+0x70>
    port_timer_stop_alarm();
 800370e:	f7ff fefa 	bl	8003506 <port_timer_stop_alarm.lto_priv.135>
 8003712:	e035      	b.n	8003780 <chVTDoResetI+0xdc>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8003714:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <chVTDoResetI+0xe4>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	4a1b      	ldr	r2, [pc, #108]	; (8003788 <chVTDoResetI+0xe4>)
 800371a:	69d2      	ldr	r2, [r2, #28]
 800371c:	6891      	ldr	r1, [r2, #8]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6892      	ldr	r2, [r2, #8]
 8003722:	440a      	add	r2, r1
 8003724:	609a      	str	r2, [r3, #8]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8003726:	4b18      	ldr	r3, [pc, #96]	; (8003788 <chVTDoResetI+0xe4>)
 8003728:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800372a:	f7ff ff02 	bl	8003532 <chVTGetSystemTimeX.lto_priv.131>
 800372e:	4603      	mov	r3, r0
 8003730:	4619      	mov	r1, r3
 8003732:	4620      	mov	r0, r4
 8003734:	f7ff fec5 	bl	80034c2 <chTimeDiffX.lto_priv.137>
 8003738:	60b8      	str	r0, [r7, #8]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 800373a:	4b13      	ldr	r3, [pc, #76]	; (8003788 <chVTDoResetI+0xe4>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	429a      	cmp	r2, r3
 8003744:	d91c      	bls.n	8003780 <chVTDoResetI+0xdc>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <chVTDoResetI+0xe4>)
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	60fb      	str	r3, [r7, #12]

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d803      	bhi.n	8003760 <chVTDoResetI+0xbc>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	3302      	adds	r3, #2
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	e003      	b.n	8003768 <chVTDoResetI+0xc4>
  }
  else {
    delta = nowdelta + delta;
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4413      	add	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
    if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
      delta = (sysinterval_t)TIME_MAX_SYSTIME;
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
 8003768:	4b07      	ldr	r3, [pc, #28]	; (8003788 <chVTDoResetI+0xe4>)
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	68f9      	ldr	r1, [r7, #12]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fe99 	bl	80034a6 <chTimeAddX.lto_priv.139>
 8003774:	4603      	mov	r3, r0
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff feca 	bl	8003510 <port_timer_set_alarm.lto_priv.133>
 800377c:	e000      	b.n	8003780 <chVTDoResetI+0xdc>
      vtp->next->delta += vtp->delta;
 800377e:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bd90      	pop	{r4, r7, pc}
 8003786:	bf00      	nop
 8003788:	20000bf0 	.word	0x20000bf0
 800378c:	20000c0c 	.word	0x20000c0c

08003790 <port_lock.lto_priv.120>:
static inline void port_lock(void) {
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	2320      	movs	r3, #32
 8003798:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f383 8811 	msr	BASEPRI, r3
}
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <port_unlock.lto_priv.117>:
static inline void port_unlock(void) {
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	2300      	movs	r3, #0
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f383 8811 	msr	BASEPRI, r3
}
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <port_lock_from_isr.lto_priv.129>:
static inline void port_lock_from_isr(void) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  port_lock();
 80037c8:	f7ff ffe2 	bl	8003790 <port_lock.lto_priv.120>
}
 80037cc:	bd80      	pop	{r7, pc}

080037ce <port_unlock_from_isr.lto_priv.127>:
static inline void port_unlock_from_isr(void) {
 80037ce:	b580      	push	{r7, lr}
 80037d0:	af00      	add	r7, sp, #0
  port_unlock();
 80037d2:	f7ff ffea 	bl	80037aa <port_unlock.lto_priv.117>
}
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <queue_init>:
static inline void queue_init(threads_queue_t *tqp) {
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  tqp->next = (thread_t *)tqp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	605a      	str	r2, [r3, #4]
}
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <queue_fifo_remove.lto_priv.108>:
  tp->queue.prev             = tqp->prev;
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  thread_t *tp = tqp->next;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]

  tqp->next             = tp->queue.next;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	605a      	str	r2, [r3, #4]

  return tp;
 8003814:	68fb      	ldr	r3, [r7, #12]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <queue_dequeue>:
  tqp->prev->queue.next = (thread_t *)tqp;

  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]

  tp->queue.prev->queue.next = tp->queue.next;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6852      	ldr	r2, [r2, #4]
 800383c:	605a      	str	r2, [r3, #4]

  return tp;
 800383e:	687b      	ldr	r3, [r7, #4]
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <chSysLockFromISR.lto_priv.125>:
static inline void chSysLockFromISR(void) {
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 8003850:	f7ff ffb8 	bl	80037c4 <port_lock_from_isr.lto_priv.129>
}
 8003854:	bd80      	pop	{r7, pc}

08003856 <chSysUnlockFromISR.lto_priv.123>:
static inline void chSysUnlockFromISR(void) {
 8003856:	b580      	push	{r7, lr}
 8003858:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 800385a:	f7ff ffb8 	bl	80037ce <port_unlock_from_isr.lto_priv.127>
}
 800385e:	bd80      	pop	{r7, pc}

08003860 <chVTIsArmedI>:
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  return (bool)(vtp->func != NULL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <chSemFastSignalI>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]

  chDbgCheckClassI();

  sp->cnt++;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]
}
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <_scheduler_init>:
/**
 * @brief   Scheduler initialization.
 *
 * @notapi
 */
void _scheduler_init(void) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0

  queue_init(&ch.rlist.queue);
 80038a4:	4806      	ldr	r0, [pc, #24]	; (80038c0 <_scheduler_init+0x20>)
 80038a6:	f7ff ff97 	bl	80037d8 <queue_init>
  ch.rlist.prio = NOPRIO;
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <_scheduler_init+0x20>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <_scheduler_init+0x20>)
 80038b2:	4a03      	ldr	r2, [pc, #12]	; (80038c0 <_scheduler_init+0x20>)
 80038b4:	611a      	str	r2, [r3, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 80038b6:	4b02      	ldr	r3, [pc, #8]	; (80038c0 <_scheduler_init+0x20>)
 80038b8:	4a01      	ldr	r2, [pc, #4]	; (80038c0 <_scheduler_init+0x20>)
 80038ba:	615a      	str	r2, [r3, #20]
#endif
}
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000bf0 	.word	0x20000bf0

080038c4 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <chSchReadyI+0x50>)
 80038d6:	60fb      	str	r3, [r7, #12]
  do {
    cp = cp->queue.next;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60fb      	str	r3, [r7, #12]
  } while (cp->prio >= tp->prio);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d2f6      	bcs.n	80038d8 <chSchReadyI+0x14>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	605a      	str	r2, [r3, #4]

  return tp;
 8003906:	687b      	ldr	r3, [r7, #4]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	20000bf0 	.word	0x20000bf0

08003918 <chSchReadyAheadI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyAheadI(thread_t *tp) {
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <chSchReadyAheadI+0x50>)
 800392a:	60fb      	str	r3, [r7, #12]
  do {
    cp = cp->queue.next;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]
  } while (cp->prio > tp->prio);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	429a      	cmp	r2, r3
 800393c:	d8f6      	bhi.n	800392c <chSchReadyAheadI+0x14>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	605a      	str	r2, [r3, #4]

  return tp;
 800395a:	687b      	ldr	r3, [r7, #4]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	20000bf0 	.word	0x20000bf0

0800396c <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  thread_t *otp = currp;
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <chSchGoSleepS+0x40>)
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	60fb      	str	r3, [r7, #12]

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	79fa      	ldrb	r2, [r7, #7]
 8003980:	f883 2020 	strb.w	r2, [r3, #32]
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003984:	4809      	ldr	r0, [pc, #36]	; (80039ac <chSchGoSleepS+0x40>)
 8003986:	f7ff ff36 	bl	80037f6 <queue_fifo_remove.lto_priv.108>
 800398a:	4602      	mov	r2, r0
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <chSchGoSleepS+0x40>)
 800398e:	619a      	str	r2, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <chSchGoSleepS+0x40>)
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2020 	strb.w	r2, [r3, #32]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800399a:	4b04      	ldr	r3, [pc, #16]	; (80039ac <chSchGoSleepS+0x40>)
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	68f9      	ldr	r1, [r7, #12]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fc fcb1 	bl	8000308 <_port_switch>
}
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20000bf0 	.word	0x20000bf0

080039b0 <wakeup>:

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  thread_t *tp = (thread_t *)p;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	60fb      	str	r3, [r7, #12]

  chSysLockFromISR();
 80039bc:	f7ff ff46 	bl	800384c <chSysLockFromISR.lto_priv.125>
  switch (tp->state) {
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039c6:	2b07      	cmp	r3, #7
 80039c8:	d822      	bhi.n	8003a10 <wakeup+0x60>
 80039ca:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <wakeup+0x20>)
 80039cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d0:	080039f1 	.word	0x080039f1
 80039d4:	08003a11 	.word	0x08003a11
 80039d8:	08003a11 	.word	0x08003a11
 80039dc:	080039f7 	.word	0x080039f7
 80039e0:	08003a0b 	.word	0x08003a0b
 80039e4:	08003a01 	.word	0x08003a01
 80039e8:	08003a11 	.word	0x08003a11
 80039ec:	08003a0b 	.word	0x08003a0b
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 80039f0:	f7ff ff31 	bl	8003856 <chSysUnlockFromISR.lto_priv.123>
 80039f4:	e015      	b.n	8003a22 <wakeup+0x72>
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	e007      	b.n	8003a10 <wakeup+0x60>
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff3c 	bl	8003882 <chSemFastSignalI>
    /* Falls through.*/
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) queue_dequeue(tp);
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7ff ff09 	bl	8003822 <queue_dequeue>
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f7ff ff53 	bl	80038c4 <chSchReadyI>
  chSysUnlockFromISR();
 8003a1e:	f7ff ff1a 	bl	8003856 <chSysUnlockFromISR.lto_priv.123>
}
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	6039      	str	r1, [r7, #0]
 8003a32:	71fb      	strb	r3, [r7, #7]

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a3a:	d019      	beq.n	8003a70 <chSchGoSleepTimeoutS+0x48>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 8003a3c:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <chSchGoSleepTimeoutS+0x60>)
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f107 000c 	add.w	r0, r7, #12
 8003a44:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <chSchGoSleepTimeoutS+0x64>)
 8003a46:	6839      	ldr	r1, [r7, #0]
 8003a48:	f7ff fd92 	bl	8003570 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff ff8c 	bl	800396c <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8003a54:	f107 030c 	add.w	r3, r7, #12
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff01 	bl	8003860 <chVTIsArmedI>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d009      	beq.n	8003a78 <chSchGoSleepTimeoutS+0x50>
      chVTDoResetI(&vt);
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fe1b 	bl	80036a4 <chVTDoResetI>
 8003a6e:	e003      	b.n	8003a78 <chSchGoSleepTimeoutS+0x50>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff ff7a 	bl	800396c <chSchGoSleepS>
  }

  return currp->u.rdymsg;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <chSchGoSleepTimeoutS+0x60>)
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000bf0 	.word	0x20000bf0
 8003a8c:	080039b1 	.word	0x080039b1

08003a90 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  thread_t *otp = currp;
 8003a9a:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <chSchWakeupS+0x50>)
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	60fb      	str	r3, [r7, #12]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d803      	bhi.n	8003aba <chSchWakeupS+0x2a>
    (void) chSchReadyI(ntp);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ff06 	bl	80038c4 <chSchReadyI>
 8003ab8:	e00e      	b.n	8003ad8 <chSchWakeupS+0x48>
  }
  else {
    otp = chSchReadyI(otp);
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f7ff ff02 	bl	80038c4 <chSchReadyI>
 8003ac0:	60f8      	str	r0, [r7, #12]
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 8003ac2:	4a07      	ldr	r2, [pc, #28]	; (8003ae0 <chSchWakeupS+0x50>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6193      	str	r3, [r2, #24]
    ntp->state = CH_STATE_CURRENT;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8003ad0:	68f9      	ldr	r1, [r7, #12]
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fc fc18 	bl	8000308 <_port_switch>
  }
}
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000bf0 	.word	0x20000bf0

08003ae4 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <chSchIsPreemptionRequired+0x30>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	607b      	str	r3, [r7, #4]
  tprio_t p2 = currp->prio;
 8003af2:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <chSchIsPreemptionRequired+0x30>)
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	603b      	str	r3, [r7, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	bf8c      	ite	hi
 8003b02:	2301      	movhi	r3, #1
 8003b04:	2300      	movls	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
#endif
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	20000bf0 	.word	0x20000bf0

08003b18 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
  thread_t *otp = currp;
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <chSchDoReschedule+0x3c>)
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	607b      	str	r3, [r7, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003b24:	480b      	ldr	r0, [pc, #44]	; (8003b54 <chSchDoReschedule+0x3c>)
 8003b26:	f7ff fe66 	bl	80037f6 <queue_fifo_remove.lto_priv.108>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <chSchDoReschedule+0x3c>)
 8003b2e:	619a      	str	r2, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <chSchDoReschedule+0x3c>)
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2020 	strb.w	r2, [r3, #32]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff feec 	bl	8003918 <chSchReadyAheadI>
 8003b40:	6078      	str	r0, [r7, #4]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8003b42:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <chSchDoReschedule+0x3c>)
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fc fbdd 	bl	8000308 <_port_switch>
}
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000bf0 	.word	0x20000bf0

08003b58 <port_lock.lto_priv.121>:
static inline void port_lock(void) {
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	2320      	movs	r3, #32
 8003b60:	607b      	str	r3, [r7, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f383 8811 	msr	BASEPRI, r3
}
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <port_unlock.lto_priv.118>:
static inline void port_unlock(void) {
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	2300      	movs	r3, #0
 8003b7a:	607b      	str	r3, [r7, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f383 8811 	msr	BASEPRI, r3
}
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <list_init.lto_priv.107>:
static inline void list_init(threads_list_t *tlp) {
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  tlp->next = (thread_t *)tlp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	601a      	str	r2, [r3, #0]
}
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <list_notempty.lto_priv.105>:
static inline bool list_notempty(threads_list_t *tlp) {
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  return (bool)(tlp->next != (thread_t *)tlp);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	bf14      	ite	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	2300      	moveq	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <queue_init.lto_priv.93>:
static inline void queue_init(threads_queue_t *tqp) {
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  tqp->next = (thread_t *)tqp;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	605a      	str	r2, [r3, #4]
}
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <queue_notempty.lto_priv.77>:
static inline bool queue_notempty(const threads_queue_t *tqp) {
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	bf14      	ite	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <list_remove.lto_priv.106>:
static inline thread_t *list_remove(threads_list_t *tlp) {
 8003c0a:	b480      	push	{r7}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  thread_t *tp = tlp->next;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]
  tlp->next = tp->queue.next;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	601a      	str	r2, [r3, #0]
  return tp;
 8003c20:	68fb      	ldr	r3, [r7, #12]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <queue_insert.lto_priv.91>:
static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]
  tp->queue.next             = (thread_t *)tqp;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = tqp->prev;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	601a      	str	r2, [r3, #0]
  tqp->prev                  = tp;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	605a      	str	r2, [r3, #4]
}
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <queue_fifo_remove.lto_priv.109>:
static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  thread_t *tp = tqp->next;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60fb      	str	r3, [r7, #12]
  tqp->next             = tp->queue.next;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	605a      	str	r2, [r3, #4]
  return tp;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <chSysLock.lto_priv.88>:
static inline void chSysLock(void) {
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	af00      	add	r7, sp, #0
  port_lock();
 8003c8e:	f7ff ff63 	bl	8003b58 <port_lock.lto_priv.121>
}
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <chSysUnlock.lto_priv.85>:
static inline void chSysUnlock(void) {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  port_unlock();
 8003c98:	f7ff ff6b 	bl	8003b72 <port_unlock.lto_priv.118>
}
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <chThdGetSelfX.lto_priv.98>:
  *
  * @return             A pointer to the current thread.
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0

  return ch.rlist.current;
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <chThdGetSelfX.lto_priv.98+0x14>)
 8003ca6:	699b      	ldr	r3, [r3, #24]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000bf0 	.word	0x20000bf0

08003cb8 <chThdSleepS.lto_priv.100>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @sclass
 */
static inline void chThdSleepS(sysinterval_t ticks) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	2008      	movs	r0, #8
 8003cc4:	f7ff feb0 	bl	8003a28 <chSchGoSleepTimeoutS>
}
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <chThdDoDequeueNextI.lto_priv.97>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
  thread_t *tp;

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ffc0 	bl	8003c5e <queue_fifo_remove.lto_priv.109>
 8003cde:	60f8      	str	r0, [r7, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7ff fdec 	bl	80038c4 <chSchReadyI>
}
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <usb_lld_start_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	70fb      	strb	r3, [r7, #3]
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	3302      	adds	r3, #2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	60da      	str	r2, [r3, #12]
  if (isp->txsize == 0) {
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10a      	bne.n	8003d34 <usb_lld_start_in+0x42>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	015b      	lsls	r3, r3, #5
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8003d2c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e02d      	b.n	8003d90 <usb_lld_start_in+0x9e>
  }
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <usb_lld_start_in+0x56>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b40      	cmp	r3, #64	; 0x40
 8003d40:	d902      	bls.n	8003d48 <usb_lld_start_in+0x56>
      isp->txsize = EP0_MAX_INSIZE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2240      	movs	r2, #64	; 0x40
 8003d46:	601a      	str	r2, [r3, #0]

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	3302      	adds	r3, #2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	8a1b      	ldrh	r3, [r3, #16]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	1e5a      	subs	r2, r3, #1
                    usbp->epc[ep]->in_maxsize;
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	3302      	adds	r3, #2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	8a1b      	ldrh	r3, [r3, #16]
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	60bb      	str	r3, [r7, #8]
    /* TODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	04d0      	lsls	r0, r2, #19
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	6812      	ldr	r2, [r2, #0]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8003d80:	4302      	orrs	r2, r0
 8003d82:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003d86:	015b      	lsls	r3, r3, #5
 8003d88:	440b      	add	r3, r1
 8003d8a:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8003d8e:	601a      	str	r2, [r3, #0]
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	3302      	adds	r3, #2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d128      	bne.n	8003df8 <usb_lld_start_in+0x106>
    /* Odd/even bit toggling.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d010      	beq.n	8003dd8 <usb_lld_start_in+0xe6>
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	3248      	adds	r2, #72	; 0x48
 8003dc4:	0152      	lsls	r2, r2, #5
 8003dc6:	4402      	add	r2, r0
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003dce:	3348      	adds	r3, #72	; 0x48
 8003dd0:	015b      	lsls	r3, r3, #5
 8003dd2:	440b      	add	r3, r1
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e00f      	b.n	8003df8 <usb_lld_start_in+0x106>
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	3248      	adds	r2, #72	; 0x48
 8003de6:	0152      	lsls	r2, r2, #5
 8003de8:	4402      	add	r2, r0
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003df0:	3348      	adds	r3, #72	; 0x48
 8003df2:	015b      	lsls	r3, r3, #5
 8003df4:	440b      	add	r3, r1
 8003df6:	601a      	str	r2, [r3, #0]
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	3248      	adds	r2, #72	; 0x48
 8003e06:	0152      	lsls	r2, r2, #5
 8003e08:	4402      	add	r2, r0
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003e10:	3348      	adds	r3, #72	; 0x48
 8003e12:	015b      	lsls	r3, r3, #5
 8003e14:	440b      	add	r3, r1
 8003e16:	601a      	str	r2, [r3, #0]
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e20:	f8d2 1834 	ldr.w	r1, [r2, #2100]	; 0x834
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	2001      	movs	r0, #1
 8003e28:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
}
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	3258      	adds	r2, #88	; 0x58
 8003e56:	0152      	lsls	r2, r2, #5
 8003e58:	4402      	add	r2, r0
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003e60:	3358      	adds	r3, #88	; 0x58
 8003e62:	015b      	lsls	r3, r3, #5
 8003e64:	440b      	add	r3, r1
 8003e66:	601a      	str	r2, [r3, #0]
}
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	70fb      	strb	r3, [r7, #3]

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	3248      	adds	r2, #72	; 0x48
 8003e8c:	0152      	lsls	r2, r2, #5
 8003e8e:	4402      	add	r2, r0
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003e96:	3348      	adds	r3, #72	; 0x48
 8003e98:	015b      	lsls	r3, r3, #5
 8003e9a:	440b      	add	r3, r1
 8003e9c:	601a      	str	r2, [r3, #0]
}
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	70fb      	strb	r3, [r7, #3]

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	3258      	adds	r2, #88	; 0x58
 8003ec2:	0152      	lsls	r2, r2, #5
 8003ec4:	4402      	add	r2, r0
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003ecc:	3358      	adds	r3, #88	; 0x58
 8003ece:	015b      	lsls	r3, r3, #5
 8003ed0:	440b      	add	r3, r1
 8003ed2:	601a      	str	r2, [r3, #0]
}
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	70fb      	strb	r3, [r7, #3]

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	3248      	adds	r2, #72	; 0x48
 8003ef8:	0152      	lsls	r2, r2, #5
 8003efa:	4402      	add	r2, r0
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003f02:	3348      	adds	r3, #72	; 0x48
 8003f04:	015b      	lsls	r3, r3, #5
 8003f06:	440b      	add	r3, r1
 8003f08:	601a      	str	r2, [r3, #0]
}
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <port_lock.lto_priv.172>:
static inline void port_lock(void) {
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	2320      	movs	r3, #32
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f383 8811 	msr	BASEPRI, r3
}
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <port_unlock.lto_priv.169>:
static inline void port_unlock(void) {
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	2300      	movs	r3, #0
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f383 8811 	msr	BASEPRI, r3
}
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <port_lock_from_isr.lto_priv.166>:
static inline void port_lock_from_isr(void) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  port_lock();
 8003f4c:	f7ff ffe2 	bl	8003f14 <port_lock.lto_priv.172>
}
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <port_unlock_from_isr.lto_priv.163>:
static inline void port_unlock_from_isr(void) {
 8003f52:	b580      	push	{r7, lr}
 8003f54:	af00      	add	r7, sp, #0
  port_unlock();
 8003f56:	f7ff ffea 	bl	8003f2e <port_unlock.lto_priv.169>
}
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <chSysLockFromISR.lto_priv.160>:
static inline void chSysLockFromISR(void) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 8003f60:	f7ff fff2 	bl	8003f48 <port_lock_from_isr.lto_priv.166>
}
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <chSysUnlockFromISR.lto_priv.157>:
static inline void chSysUnlockFromISR(void) {
 8003f66:	b580      	push	{r7, lr}
 8003f68:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 8003f6a:	f7ff fff2 	bl	8003f52 <port_unlock_from_isr.lto_priv.163>
}
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <osalSysHalt.lto_priv.148>:
static inline void osalSysHalt(const char *reason) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  chSysHalt(reason);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff fa53 	bl	8003424 <chSysHalt>
}
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <osalSysLockFromISR.lto_priv.154>:
static inline void osalSysLockFromISR(void) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  chSysLockFromISR();
 8003f88:	f7ff ffe8 	bl	8003f5c <chSysLockFromISR.lto_priv.160>
}
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <osalSysUnlockFromISR.lto_priv.151>:
static inline void osalSysUnlockFromISR(void) {
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	af00      	add	r7, sp, #0
  chSysUnlockFromISR();
 8003f92:	f7ff ffe8 	bl	8003f66 <chSysUnlockFromISR.lto_priv.157>
}
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <osalThreadResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]

  chThdResumeI(trp, msg);
 8003fa2:	6839      	ldr	r1, [r7, #0]
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fe fdf4 	bl	8002b92 <chThdResumeI>
}
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <spi_lld_serve_rx_interrupt>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <spi_lld_serve_rx_interrupt+0x1a>
    STM32_SPI_DMA_ERROR_HOOK(spip);
 8003fc4:	4844      	ldr	r0, [pc, #272]	; (80040d8 <spi_lld_serve_rx_interrupt+0x128>)
 8003fc6:	f7ff ffd3 	bl	8003f70 <osalSysHalt.lto_priv.148>
  }
#else
  (void)flags;
#endif

  if (spip->config->circular) {
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d024      	beq.n	800401e <spi_lld_serve_rx_interrupt+0x6e>
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <spi_lld_serve_rx_interrupt+0x44>
      /* Half buffer interrupt.*/
      _spi_isr_code_half1(spip);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d074      	beq.n	80040d2 <spi_lld_serve_rx_interrupt+0x122>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
    }
    else {
      /* End buffer interrupt.*/
      _spi_isr_code_half2(spip);
 8003ff2:	e06e      	b.n	80040d2 <spi_lld_serve_rx_interrupt+0x122>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d069      	beq.n	80040d2 <spi_lld_serve_rx_interrupt+0x122>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2204      	movs	r2, #4
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	4798      	blx	r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b04      	cmp	r3, #4
 8004014:	d15d      	bne.n	80040d2 <spi_lld_serve_rx_interrupt+0x122>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2203      	movs	r2, #3
 800401a:	701a      	strb	r2, [r3, #0]
 800401c:	e059      	b.n	80040d2 <spi_lld_serve_rx_interrupt+0x122>
    }
  }
  else {
    /* Stopping DMAs.*/
    dmaStreamDisable(spip->dmatx);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	f022 021f 	bic.w	r2, r2, #31
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f7      	bne.n	8004032 <spi_lld_serve_rx_interrupt+0x82>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800404c:	7a12      	ldrb	r2, [r2, #8]
 800404e:	4611      	mov	r1, r2
 8004050:	223d      	movs	r2, #61	; 0x3d
 8004052:	408a      	lsls	r2, r1
 8004054:	601a      	str	r2, [r3, #0]
    dmaStreamDisable(spip->dmarx);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6a12      	ldr	r2, [r2, #32]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	f022 021f 	bic.w	r2, r2, #31
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f7      	bne.n	800406a <spi_lld_serve_rx_interrupt+0xba>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6a12      	ldr	r2, [r2, #32]
 8004084:	7a12      	ldrb	r2, [r2, #8]
 8004086:	4611      	mov	r1, r2
 8004088:	223d      	movs	r2, #61	; 0x3d
 800408a:	408a      	lsls	r2, r1
 800408c:	601a      	str	r2, [r3, #0]

    /* Portable SPI ISR code defined in the high level driver, note, it is
       a macro.*/
    _spi_isr_code(spip);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00f      	beq.n	80040b8 <spi_lld_serve_rx_interrupt+0x108>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2204      	movs	r2, #4
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	4798      	blx	r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d106      	bne.n	80040be <spi_lld_serve_rx_interrupt+0x10e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	e002      	b.n	80040be <spi_lld_serve_rx_interrupt+0x10e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	f7ff ff61 	bl	8003f84 <osalSysLockFromISR.lto_priv.154>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3308      	adds	r3, #8
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ff65 	bl	8003f98 <osalThreadResumeI>
 80040ce:	f7ff ff5e 	bl	8003f8e <osalSysUnlockFromISR.lto_priv.151>
  }
}
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	080093c0 	.word	0x080093c0

080040dc <spi_lld_serve_tx_interrupt>:
 * @brief   Shared end-of-tx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <spi_lld_serve_tx_interrupt+0x1a>
    STM32_SPI_DMA_ERROR_HOOK(spip);
 80040f0:	4802      	ldr	r0, [pc, #8]	; (80040fc <spi_lld_serve_tx_interrupt+0x20>)
 80040f2:	f7ff ff3d 	bl	8003f70 <osalSysHalt.lto_priv.148>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	080093c0 	.word	0x080093c0

08004100 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8004104:	4809      	ldr	r0, [pc, #36]	; (800412c <spi_lld_init+0x2c>)
 8004106:	f003 fe40 	bl	8007d8a <spiObjectInit>
  SPID1.spi       = SPI1;
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <spi_lld_init+0x2c>)
 800410c:	4a08      	ldr	r2, [pc, #32]	; (8004130 <spi_lld_init+0x30>)
 800410e:	61da      	str	r2, [r3, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <spi_lld_init+0x2c>)
 8004112:	4a08      	ldr	r2, [pc, #32]	; (8004134 <spi_lld_init+0x34>)
 8004114:	621a      	str	r2, [r3, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8004116:	4b05      	ldr	r3, [pc, #20]	; (800412c <spi_lld_init+0x2c>)
 8004118:	4a07      	ldr	r2, [pc, #28]	; (8004138 <spi_lld_init+0x38>)
 800411a:	625a      	str	r2, [r3, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <spi_lld_init+0x2c>)
 800411e:	4a07      	ldr	r2, [pc, #28]	; (800413c <spi_lld_init+0x3c>)
 8004120:	629a      	str	r2, [r3, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8004122:	4b02      	ldr	r3, [pc, #8]	; (800412c <spi_lld_init+0x2c>)
 8004124:	4a06      	ldr	r2, [pc, #24]	; (8004140 <spi_lld_init+0x40>)
 8004126:	62da      	str	r2, [r3, #44]	; 0x2c
                    STM32_DMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_M2P |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif
}
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000944 	.word	0x20000944
 8004130:	40013000 	.word	0x40013000
 8004134:	08008e0c 	.word	0x08008e0c
 8004138:	08008e30 	.word	0x08008e30
 800413c:	06010016 	.word	0x06010016
 8004140:	06010046 	.word	0x06010046

08004144 <spi_lld_start>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d12f      	bne.n	80041b4 <spi_lld_start+0x70>
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a4b      	ldr	r2, [pc, #300]	; (8004284 <spi_lld_start+0x140>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d11d      	bne.n	8004198 <spi_lld_start+0x54>
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a18      	ldr	r0, [r3, #32]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a49      	ldr	r2, [pc, #292]	; (8004288 <spi_lld_start+0x144>)
 8004164:	210a      	movs	r1, #10
 8004166:	f000 fe6d 	bl	8004e44 <dmaStreamAllocate>
 800416a:	4603      	mov	r3, r0
 800416c:	73fb      	strb	r3, [r7, #15]
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a45      	ldr	r2, [pc, #276]	; (800428c <spi_lld_start+0x148>)
 8004176:	210a      	movs	r1, #10
 8004178:	f000 fe64 	bl	8004e44 <dmaStreamAllocate>
 800417c:	4603      	mov	r3, r0
 800417e:	73fb      	strb	r3, [r7, #15]
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(true);
 8004180:	4a43      	ldr	r2, [pc, #268]	; (8004290 <spi_lld_start+0x14c>)
 8004182:	4b43      	ldr	r3, [pc, #268]	; (8004290 <spi_lld_start+0x14c>)
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800418a:	6453      	str	r3, [r2, #68]	; 0x44
 800418c:	4a40      	ldr	r2, [pc, #256]	; (8004290 <spi_lld_start+0x14c>)
 800418e:	4b40      	ldr	r3, [pc, #256]	; (8004290 <spi_lld_start+0x14c>)
 8004190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004192:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004196:	6653      	str	r3, [r2, #100]	; 0x64
      rccEnableSPI6(true);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	69d2      	ldr	r2, [r2, #28]
 80041a2:	320c      	adds	r2, #12
 80041a4:	609a      	str	r2, [r3, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	69d2      	ldr	r2, [r2, #28]
 80041b0:	320c      	adds	r2, #12
 80041b2:	609a      	str	r2, [r3, #8]
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	8a1b      	ldrh	r3, [r3, #16]
 80041ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10c      	bne.n	80041dc <spi_lld_start+0x98>
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80041c6:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80041d2:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80041da:	e00f      	b.n	80041fc <spi_lld_start+0xb8>
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80041e4:	f443 5220 	orr.w	r2, r3, #10240	; 0x2800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80041f4:	f443 5220 	orr.w	r2, r3, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  if (spip->config->circular) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00c      	beq.n	8004220 <spi_lld_start+0xdc>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	f443 7284 	orr.w	r2, r3, #264	; 0x108
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	f443 7284 	orr.w	r2, r3, #264	; 0x108
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	62da      	str	r2, [r3, #44]	; 0x2c
 800421e:	e00b      	b.n	8004238 <spi_lld_start+0xf4>
  }
  else {
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	f423 7284 	bic.w	r2, r3, #264	; 0x108
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	f423 7284 	bic.w	r2, r3, #264	; 0x108
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	69d2      	ldr	r2, [r2, #28]
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004246:	601a      	str	r2, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6852      	ldr	r2, [r2, #4]
 8004250:	8a12      	ldrh	r2, [r2, #16]
 8004252:	f442 7241 	orr.w	r2, r2, #772	; 0x304
 8004256:	b292      	uxth	r2, r2
 8004258:	601a      	str	r2, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6852      	ldr	r2, [r2, #4]
 8004262:	8a52      	ldrh	r2, [r2, #18]
 8004264:	f042 0207 	orr.w	r2, r2, #7
 8004268:	b292      	uxth	r2, r2
 800426a:	605a      	str	r2, [r3, #4]
                    SPI_CR2_TXDMAEN;
  spip->spi->CR1 |= SPI_CR1_SPE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	69d2      	ldr	r2, [r2, #28]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800427a:	601a      	str	r2, [r3, #0]
}
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000944 	.word	0x20000944
 8004288:	08003fb1 	.word	0x08003fb1
 800428c:	080040dd 	.word	0x080040dd
 8004290:	40023800 	.word	0x40023800

08004294 <spi_lld_send>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1c      	ldr	r2, [pc, #112]	; (8004318 <spi_lld_send+0x84>)
 80042a8:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042be:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80042de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042e2:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	6a12      	ldr	r2, [r2, #32]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(spip->dmatx);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	6812      	ldr	r2, [r2, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]
}
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000974 	.word	0x20000974

0800431c <spi_lld_receive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004346:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800434a:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a13      	ldr	r2, [pc, #76]	; (80043a0 <spi_lld_receive+0x84>)
 8004354:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800436a:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	6a12      	ldr	r2, [r2, #32]
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(spip->dmatx);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]
}
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	08008e9c 	.word	0x08008e9c

080043a4 <port_lock.lto_priv.173>:
static inline void port_lock(void) {
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	2320      	movs	r3, #32
 80043ac:	607b      	str	r3, [r7, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f383 8811 	msr	BASEPRI, r3
}
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <port_unlock.lto_priv.170>:
static inline void port_unlock(void) {
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	2300      	movs	r3, #0
 80043c6:	607b      	str	r3, [r7, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f383 8811 	msr	BASEPRI, r3
}
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <port_lock_from_isr.lto_priv.167>:
static inline void port_lock_from_isr(void) {
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  port_lock();
 80043dc:	f7ff ffe2 	bl	80043a4 <port_lock.lto_priv.173>
}
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <port_unlock_from_isr.lto_priv.164>:
static inline void port_unlock_from_isr(void) {
 80043e2:	b580      	push	{r7, lr}
 80043e4:	af00      	add	r7, sp, #0
  port_unlock();
 80043e6:	f7ff ffea 	bl	80043be <port_unlock.lto_priv.170>
}
 80043ea:	bd80      	pop	{r7, pc}

080043ec <chSysLockFromISR.lto_priv.161>:
static inline void chSysLockFromISR(void) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 80043f0:	f7ff fff2 	bl	80043d8 <port_lock_from_isr.lto_priv.167>
}
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <chSysUnlockFromISR.lto_priv.158>:
static inline void chSysUnlockFromISR(void) {
 80043f6:	b580      	push	{r7, lr}
 80043f8:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 80043fa:	f7ff fff2 	bl	80043e2 <port_unlock_from_isr.lto_priv.164>
}
 80043fe:	bd80      	pop	{r7, pc}

08004400 <osalSysLockFromISR.lto_priv.155>:
static inline void osalSysLockFromISR(void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  chSysLockFromISR();
 8004404:	f7ff fff2 	bl	80043ec <chSysLockFromISR.lto_priv.161>
}
 8004408:	bd80      	pop	{r7, pc}

0800440a <osalSysUnlockFromISR.lto_priv.152>:
static inline void osalSysUnlockFromISR(void) {
 800440a:	b580      	push	{r7, lr}
 800440c:	af00      	add	r7, sp, #0
  chSysUnlockFromISR();
 800440e:	f7ff fff2 	bl	80043f6 <chSysUnlockFromISR.lto_priv.158>
}
 8004412:	bd80      	pop	{r7, pc}

08004414 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  chSysTimerHandlerI();
 8004418:	f7ff f810 	bl	800343c <chSysTimerHandlerI>
}
 800441c:	bd80      	pop	{r7, pc}

0800441e <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 800441e:	b580      	push	{r7, lr}
 8004420:	af00      	add	r7, sp, #0
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8004422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d009      	beq.n	8004444 <VectorB0+0x26>
    STM32_ST_TIM->SR = 0U;
 8004430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004434:	2200      	movs	r2, #0
 8004436:	611a      	str	r2, [r3, #16]

    osalSysLockFromISR();
 8004438:	f7ff ffe2 	bl	8004400 <osalSysLockFromISR.lto_priv.155>
    osalOsTimerHandlerI();
 800443c:	f7ff ffea 	bl	8004414 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
 8004440:	f7ff ffe3 	bl	800440a <osalSysUnlockFromISR.lto_priv.152>
  }

  OSAL_IRQ_EPILOGUE();
 8004444:	f7fc fd60 	bl	8000f08 <_port_irq_epilogue>
}
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8004450:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <st_lld_init+0x78>)
 8004452:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <st_lld_init+0x78>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6413      	str	r3, [r2, #64]	; 0x40
 800445c:	4a19      	ldr	r2, [pc, #100]	; (80044c4 <st_lld_init+0x78>)
 800445e:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <st_lld_init+0x78>)
 8004460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	6613      	str	r3, [r2, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8004468:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <st_lld_init+0x7c>)
 800446a:	4b17      	ldr	r3, [pc, #92]	; (80044c8 <st_lld_init+0x7c>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004478:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800447c:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800447e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8004488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800448c:	2200      	movs	r2, #0
 800448e:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8004490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004494:	2200      	movs	r2, #0
 8004496:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8004498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800449c:	2200      	movs	r2, #0
 800449e:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 80044a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044a4:	2200      	movs	r2, #0
 80044a6:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80044a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044ac:	2201      	movs	r2, #1
 80044ae:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80044b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 80044b8:	2108      	movs	r1, #8
 80044ba:	201c      	movs	r0, #28
 80044bc:	f002 fb9a 	bl	8006bf4 <nvicEnableVector>
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40023800 	.word	0x40023800
 80044c8:	e0042000 	.word	0xe0042000

080044cc <port_lock.lto_priv.174>:
static inline void port_lock(void) {
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	2320      	movs	r3, #32
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f383 8811 	msr	BASEPRI, r3
}
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <port_unlock.lto_priv.171>:
static inline void port_unlock(void) {
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	2300      	movs	r3, #0
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f383 8811 	msr	BASEPRI, r3
}
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <port_lock_from_isr.lto_priv.168>:
static inline void port_lock_from_isr(void) {
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  port_lock();
 8004504:	f7ff ffe2 	bl	80044cc <port_lock.lto_priv.174>
}
 8004508:	bd80      	pop	{r7, pc}

0800450a <port_unlock_from_isr.lto_priv.165>:
static inline void port_unlock_from_isr(void) {
 800450a:	b580      	push	{r7, lr}
 800450c:	af00      	add	r7, sp, #0
  port_unlock();
 800450e:	f7ff ffea 	bl	80044e6 <port_unlock.lto_priv.171>
}
 8004512:	bd80      	pop	{r7, pc}

08004514 <chSysLockFromISR.lto_priv.162>:
static inline void chSysLockFromISR(void) {
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 8004518:	f7ff fff2 	bl	8004500 <port_lock_from_isr.lto_priv.168>
}
 800451c:	bd80      	pop	{r7, pc}

0800451e <chSysUnlockFromISR.lto_priv.159>:
static inline void chSysUnlockFromISR(void) {
 800451e:	b580      	push	{r7, lr}
 8004520:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 8004522:	f7ff fff2 	bl	800450a <port_unlock_from_isr.lto_priv.165>
}
 8004526:	bd80      	pop	{r7, pc}

08004528 <osalSysLockFromISR.lto_priv.156>:
static inline void osalSysLockFromISR(void) {
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  chSysLockFromISR();
 800452c:	f7ff fff2 	bl	8004514 <chSysLockFromISR.lto_priv.162>
}
 8004530:	bd80      	pop	{r7, pc}

08004532 <osalSysUnlockFromISR.lto_priv.153>:
static inline void osalSysUnlockFromISR(void) {
 8004532:	b580      	push	{r7, lr}
 8004534:	af00      	add	r7, sp, #0
  chSysUnlockFromISR();
 8004536:	f7ff fff2 	bl	800451e <chSysUnlockFromISR.lto_priv.159>
}
 800453a:	bd80      	pop	{r7, pc}

0800453c <osalEventBroadcastFlagsI>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]

  chEvtBroadcastFlagsI(esp, flags);
 8004546:	6839      	ldr	r1, [r7, #0]
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7fe f99b 	bl	8002884 <chEvtBroadcastFlagsI>
}
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	807b      	strh	r3, [r7, #2]
  eventflags_t sts = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]

  if (sr & USART_SR_ORE)
 8004564:	887b      	ldrh	r3, [r7, #2]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <set_error+0x22>
    sts |= SD_OVERRUN_ERROR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004574:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_PE)
 8004576:	887b      	ldrh	r3, [r7, #2]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <set_error+0x34>
    sts |= SD_PARITY_ERROR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f043 0320 	orr.w	r3, r3, #32
 8004586:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_FE)
 8004588:	887b      	ldrh	r3, [r7, #2]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <set_error+0x46>
    sts |= SD_FRAMING_ERROR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004598:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_NE)
 800459a:	887b      	ldrh	r3, [r7, #2]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <set_error+0x58>
    sts |= SD_NOISE_ERROR;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045aa:	60fb      	str	r3, [r7, #12]
  chnAddFlagsI(sdp, sts);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	68f9      	ldr	r1, [r7, #12]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff ffc2 	bl	800453c <osalEventBroadcastFlagsI>
}
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 80045be:	b580      	push	{r7, lr}
 80045c0:	b086      	sub	sp, #24
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  USART_TypeDef *u = sdp->usart;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ca:	613b      	str	r3, [r7, #16]
  uint16_t cr1 = u->CR1;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	81fb      	strh	r3, [r7, #14]
  uint16_t sr = u->SR;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	82fb      	strh	r3, [r7, #22]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 80045d8:	8afb      	ldrh	r3, [r7, #22]
 80045da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00e      	beq.n	8004600 <serve_interrupt+0x42>
    osalSysLockFromISR();
 80045e2:	f7ff ffa1 	bl	8004528 <osalSysLockFromISR.lto_priv.156>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3304      	adds	r3, #4
 80045ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff ffa4 	bl	800453c <osalEventBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045fa:	601a      	str	r2, [r3, #0]
    osalSysUnlockFromISR();
 80045fc:	f7ff ff99 	bl	8004532 <osalSysUnlockFromISR.lto_priv.153>
  }

  /* Data available.*/
  osalSysLockFromISR();
 8004600:	f7ff ff92 	bl	8004528 <osalSysLockFromISR.lto_priv.156>
 8004604:	e01e      	b.n	8004644 <serve_interrupt+0x86>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8004606:	8afb      	ldrh	r3, [r7, #22]
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	2b00      	cmp	r3, #0
 800460e:	d004      	beq.n	800461a <serve_interrupt+0x5c>
      set_error(sdp, sr);
 8004610:	8afb      	ldrh	r3, [r7, #22]
 8004612:	4619      	mov	r1, r3
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ff9d 	bl	8004554 <set_error>
    b = (uint8_t)u->DR & sdp->rxmask;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	b2da      	uxtb	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8004626:	4013      	ands	r3, r2
 8004628:	737b      	strb	r3, [r7, #13]
    if (sr & USART_SR_RXNE)
 800462a:	8afb      	ldrh	r3, [r7, #22]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d004      	beq.n	800463e <serve_interrupt+0x80>
      sdIncomingDataI(sdp, b);
 8004634:	7b7b      	ldrb	r3, [r7, #13]
 8004636:	4619      	mov	r1, r3
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f002 ff8d 	bl	8007558 <sdIncomingDataI>
    sr = u->SR;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	82fb      	strh	r3, [r7, #22]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8004644:	8afb      	ldrh	r3, [r7, #22]
 8004646:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1db      	bne.n	8004606 <serve_interrupt+0x48>
  }
  osalSysUnlockFromISR();
 800464e:	f7ff ff70 	bl	8004532 <osalSysUnlockFromISR.lto_priv.153>

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8004652:	89fb      	ldrh	r3, [r7, #14]
 8004654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004658:	2b00      	cmp	r3, #0
 800465a:	d022      	beq.n	80046a2 <serve_interrupt+0xe4>
 800465c:	8afb      	ldrh	r3, [r7, #22]
 800465e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01d      	beq.n	80046a2 <serve_interrupt+0xe4>
    msg_t b;
    osalSysLockFromISR();
 8004666:	f7ff ff5f 	bl	8004528 <osalSysLockFromISR.lto_priv.156>
    b = oqGetI(&sdp->oqueue);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3330      	adds	r3, #48	; 0x30
 800466e:	4618      	mov	r0, r3
 8004670:	f002 fdf8 	bl	8007264 <oqGetI>
 8004674:	60b8      	str	r0, [r7, #8]
    if (b < MSG_OK) {
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	da0d      	bge.n	8004698 <serve_interrupt+0xda>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3304      	adds	r3, #4
 8004680:	2108      	movs	r1, #8
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ff5a 	bl	800453c <osalEventBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8004688:	89fb      	ldrh	r3, [r7, #14]
 800468a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800468e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	e002      	b.n	800469e <serve_interrupt+0xe0>
    }
    else
      u->DR = b;
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	605a      	str	r2, [r3, #4]
    osalSysUnlockFromISR();
 800469e:	f7ff ff48 	bl	8004532 <osalSysUnlockFromISR.lto_priv.153>
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80046a2:	89fb      	ldrh	r3, [r7, #14]
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d025      	beq.n	80046f8 <serve_interrupt+0x13a>
 80046ac:	8afb      	ldrh	r3, [r7, #22]
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d020      	beq.n	80046f8 <serve_interrupt+0x13a>
    osalSysLockFromISR();
 80046b6:	f7ff ff37 	bl	8004528 <osalSysLockFromISR.lto_priv.156>
    if (oqIsEmptyI(&sdp->oqueue)) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d105      	bne.n	80046d2 <serve_interrupt+0x114>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <serve_interrupt+0x114>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <serve_interrupt+0x116>
 80046d2:	2300      	movs	r3, #0
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <serve_interrupt+0x136>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2110      	movs	r1, #16
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ff29 	bl	800453c <osalEventBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 80046ea:	89fb      	ldrh	r3, [r7, #14]
 80046ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	60da      	str	r2, [r3, #12]
    }
    osalSysUnlockFromISR();
 80046f4:	f7ff ff1d 	bl	8004532 <osalSysUnlockFromISR.lto_priv.153>
  }
}
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8004708:	4a05      	ldr	r2, [pc, #20]	; (8004720 <notify1+0x20>)
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <notify1+0x20>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004712:	60d3      	str	r3, [r2, #12]
}
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40011000 	.word	0x40011000

08004724 <notify2>:
#endif

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 800472c:	4a05      	ldr	r2, [pc, #20]	; (8004744 <notify2+0x20>)
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <notify2+0x20>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004736:	60d3      	str	r3, [r2, #12]
}
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40004400 	.word	0x40004400

08004748 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);
 800474c:	4802      	ldr	r0, [pc, #8]	; (8004758 <VectorD4+0x10>)
 800474e:	f7ff ff36 	bl	80045be <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8004752:	f7fc fbd9 	bl	8000f08 <_port_irq_epilogue>
}
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000978 	.word	0x20000978

0800475c <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);
 8004760:	4802      	ldr	r0, [pc, #8]	; (800476c <VectorD8+0x10>)
 8004762:	f7ff ff2c 	bl	80045be <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8004766:	f7fc fbcf 	bl	8000f08 <_port_irq_epilogue>
}
 800476a:	bd80      	pop	{r7, pc}
 800476c:	200009f4 	.word	0x200009f4

08004770 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8004774:	4a08      	ldr	r2, [pc, #32]	; (8004798 <sd_lld_init+0x28>)
 8004776:	2100      	movs	r1, #0
 8004778:	4808      	ldr	r0, [pc, #32]	; (800479c <sd_lld_init+0x2c>)
 800477a:	f002 febf 	bl	80074fc <sdObjectInit>
  SD1.usart = USART1;
 800477e:	4b07      	ldr	r3, [pc, #28]	; (800479c <sd_lld_init+0x2c>)
 8004780:	4a07      	ldr	r2, [pc, #28]	; (80047a0 <sd_lld_init+0x30>)
 8004782:	675a      	str	r2, [r3, #116]	; 0x74
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8004784:	4a07      	ldr	r2, [pc, #28]	; (80047a4 <sd_lld_init+0x34>)
 8004786:	2100      	movs	r1, #0
 8004788:	4807      	ldr	r0, [pc, #28]	; (80047a8 <sd_lld_init+0x38>)
 800478a:	f002 feb7 	bl	80074fc <sdObjectInit>
  SD2.usart = USART2;
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <sd_lld_init+0x38>)
 8004790:	4a06      	ldr	r2, [pc, #24]	; (80047ac <sd_lld_init+0x3c>)
 8004792:	675a      	str	r2, [r3, #116]	; 0x74

#if STM32_SERIAL_USE_UART8
  sdObjectInit(&SD8, NULL, notify8);
  SD8.usart = UART8;
#endif
}
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	08004701 	.word	0x08004701
 800479c:	20000978 	.word	0x20000978
 80047a0:	40011000 	.word	0x40011000
 80047a4:	08004725 	.word	0x08004725
 80047a8:	200009f4 	.word	0x200009f4
 80047ac:	40004400 	.word	0x40004400

080047b0 <osalSysHalt.lto_priv.149>:
static inline void osalSysHalt(const char *reason) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  chSysHalt(reason);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fe fe33 	bl	8003424 <chSysHalt>
}
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <translate_errors>:
static uartflags_t translate_errors(uint16_t sr) {
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	80fb      	strh	r3, [r7, #6]
  uartflags_t sts = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_ORE)
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <translate_errors+0x20>
    sts |= UART_OVERRUN_ERROR;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f043 0310 	orr.w	r3, r3, #16
 80047e2:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_PE)
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <translate_errors+0x32>
    sts |= UART_PARITY_ERROR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f043 0304 	orr.w	r3, r3, #4
 80047f4:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_FE)
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <translate_errors+0x44>
    sts |= UART_FRAMING_ERROR;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f043 0308 	orr.w	r3, r3, #8
 8004806:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_NE)
 8004808:	88fb      	ldrh	r3, [r7, #6]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <translate_errors+0x56>
    sts |= UART_NOISE_ERROR;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f043 0320 	orr.w	r3, r3, #32
 8004818:	60fb      	str	r3, [r7, #12]
  if (sr & USART_SR_LBD)
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <translate_errors+0x68>
    sts |= UART_BREAK_DETECTED;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800482a:	60fb      	str	r3, [r7, #12]
  return sts;
 800482c:	68fb      	ldr	r3, [r7, #12]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <uart_enter_rx_idle_loop.lto_priv.144>:
static void uart_enter_rx_idle_loop(UARTDriver *uartp) {
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  if (uartp->config->rxchar_cb == NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d103      	bne.n	8004854 <uart_enter_rx_idle_loop.lto_priv.144+0x1a>
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 800484c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e002      	b.n	800485a <uart_enter_rx_idle_loop.lto_priv.144+0x20>
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 8004854:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004858:	60fb      	str	r3, [r7, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	3218      	adds	r2, #24
 8004864:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2201      	movs	r2, #1
 800486e:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	68d1      	ldr	r1, [r2, #12]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	430a      	orrs	r2, r1
 800487e:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(uartp->dmarx);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6912      	ldr	r2, [r2, #16]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]
}
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <usart_stop.lto_priv.145>:
static void usart_stop(UARTDriver *uartp) {
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  dmaStreamDisable(uartp->dmarx);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6912      	ldr	r2, [r2, #16]
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	f022 021f 	bic.w	r2, r2, #31
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f7      	bne.n	80048ba <usart_stop.lto_priv.145+0x1c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6912      	ldr	r2, [r2, #16]
 80048d4:	7a12      	ldrb	r2, [r2, #8]
 80048d6:	4611      	mov	r1, r2
 80048d8:	223d      	movs	r2, #61	; 0x3d
 80048da:	408a      	lsls	r2, r1
 80048dc:	601a      	str	r2, [r3, #0]
  dmaStreamDisable(uartp->dmatx);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6952      	ldr	r2, [r2, #20]
 80048e8:	6812      	ldr	r2, [r2, #0]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	f022 021f 	bic.w	r2, r2, #31
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f7      	bne.n	80048f2 <usart_stop.lto_priv.145+0x54>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6952      	ldr	r2, [r2, #20]
 800490c:	7a12      	ldrb	r2, [r2, #8]
 800490e:	4611      	mov	r1, r2
 8004910:	223d      	movs	r2, #61	; 0x3d
 8004912:	408a      	lsls	r2, r1
 8004914:	601a      	str	r2, [r3, #0]
  uartp->usart->CR1 = 0;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2200      	movs	r2, #0
 800491c:	60da      	str	r2, [r3, #12]
  uartp->usart->CR2 = 0;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2200      	movs	r2, #0
 8004924:	611a      	str	r2, [r3, #16]
  uartp->usart->CR3 = 0;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2200      	movs	r2, #0
 800492c:	615a      	str	r2, [r3, #20]
}
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <usart_start.lto_priv.146>:
static void usart_start(UARTDriver *uartp) {
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  USART_TypeDef *u = uartp->usart;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	60fb      	str	r3, [r7, #12]
  usart_stop(uartp);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff ffa9 	bl	800489e <usart_stop.lto_priv.145>
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4a21      	ldr	r2, [pc, #132]	; (80049d8 <usart_start.lto_priv.146+0xa0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <usart_start.lto_priv.146+0x28>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	4a20      	ldr	r2, [pc, #128]	; (80049dc <usart_start.lto_priv.146+0xa4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d108      	bne.n	8004972 <usart_start.lto_priv.146+0x3a>
    u->BRR = STM32_PCLK2 / uartp->config->speed;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	4a1e      	ldr	r2, [pc, #120]	; (80049e0 <usart_start.lto_priv.146+0xa8>)
 8004968:	fbb2 f2f3 	udiv	r2, r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	609a      	str	r2, [r3, #8]
 8004970:	e007      	b.n	8004982 <usart_start.lto_priv.146+0x4a>
    u->BRR = STM32_PCLK1 / uartp->config->speed;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <usart_start.lto_priv.146+0xac>)
 800497a:	fbb2 f2f3 	udiv	r2, r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	609a      	str	r2, [r3, #8]
  (void)u->SR;  /* SR reset step 1.*/
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
  u->SR = 0;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	8b5b      	ldrh	r3, [r3, #26]
 8004996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800499a:	b29b      	uxth	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	611a      	str	r2, [r3, #16]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	8b9b      	ldrh	r3, [r3, #28]
 80049a8:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	615a      	str	r2, [r3, #20]
  cr1 = USART_CR1_UE | USART_CR1_PEIE | USART_CR1_TE | USART_CR1_RE;
 80049b4:	f242 130c 	movw	r3, #8460	; 0x210c
 80049b8:	817b      	strh	r3, [r7, #10]
  u->CR1 = uartp->config->cr1 | cr1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	8b1a      	ldrh	r2, [r3, #24]
 80049c0:	897b      	ldrh	r3, [r7, #10]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	60da      	str	r2, [r3, #12]
  uart_enter_rx_idle_loop(uartp);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff ff34 	bl	800483a <uart_enter_rx_idle_loop.lto_priv.144>
}
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40011000 	.word	0x40011000
 80049dc:	40011400 	.word	0x40011400
 80049e0:	0501bd00 	.word	0x0501bd00
 80049e4:	0280de80 	.word	0x0280de80

080049e8 <uart_lld_serve_rx_end_irq.lto_priv.142>:
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <uart_lld_serve_rx_end_irq.lto_priv.142+0x1a>
    STM32_UART_DMA_ERROR_HOOK(uartp);
 80049fc:	4825      	ldr	r0, [pc, #148]	; (8004a94 <uart_lld_serve_rx_end_irq.lto_priv.142+0xac>)
 80049fe:	f7ff fed7 	bl	80047b0 <osalSysHalt.lto_priv.149>
  if (uartp->rxstate == UART_RX_IDLE) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	789b      	ldrb	r3, [r3, #2]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10e      	bne.n	8004a28 <uart_lld_serve_rx_end_irq.lto_priv.142+0x40>
    _uart_rx_idle_code(uartp);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d03c      	beq.n	8004a8e <uart_lld_serve_rx_end_irq.lto_priv.142+0xa6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	8b12      	ldrh	r2, [r2, #24]
 8004a1e:	b292      	uxth	r2, r2
 8004a20:	4611      	mov	r1, r2
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
 8004a26:	e032      	b.n	8004a8e <uart_lld_serve_rx_end_irq.lto_priv.142+0xa6>
    dmaStreamDisable(uartp->dmarx);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6912      	ldr	r2, [r2, #16]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	f022 021f 	bic.w	r2, r2, #31
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1f7      	bne.n	8004a3c <uart_lld_serve_rx_end_irq.lto_priv.142+0x54>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6912      	ldr	r2, [r2, #16]
 8004a56:	7a12      	ldrb	r2, [r2, #8]
 8004a58:	4611      	mov	r1, r2
 8004a5a:	223d      	movs	r2, #61	; 0x3d
 8004a5c:	408a      	lsls	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]
    _uart_rx_complete_isr_code(uartp);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	709a      	strb	r2, [r3, #2]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d004      	beq.n	8004a7a <uart_lld_serve_rx_end_irq.lto_priv.142+0x92>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	4798      	blx	r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	789b      	ldrb	r3, [r3, #2]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d105      	bne.n	8004a8e <uart_lld_serve_rx_end_irq.lto_priv.142+0xa6>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	709a      	strb	r2, [r3, #2]
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff fed6 	bl	800483a <uart_enter_rx_idle_loop.lto_priv.144>
}
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	080093c0 	.word	0x080093c0

08004a98 <uart_lld_serve_tx_end_irq.lto_priv.143>:
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <uart_lld_serve_tx_end_irq.lto_priv.143+0x1a>
    STM32_UART_DMA_ERROR_HOOK(uartp);
 8004aac:	481a      	ldr	r0, [pc, #104]	; (8004b18 <uart_lld_serve_tx_end_irq.lto_priv.143+0x80>)
 8004aae:	f7ff fe7f 	bl	80047b0 <osalSysHalt.lto_priv.149>
  dmaStreamDisable(uartp->dmatx);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6952      	ldr	r2, [r2, #20]
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	f022 021f 	bic.w	r2, r2, #31
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f7      	bne.n	8004ac6 <uart_lld_serve_tx_end_irq.lto_priv.143+0x2e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6952      	ldr	r2, [r2, #20]
 8004ae0:	7a12      	ldrb	r2, [r2, #8]
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	223d      	movs	r2, #61	; 0x3d
 8004ae6:	408a      	lsls	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]
  _uart_tx1_isr_code(uartp);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	705a      	strb	r2, [r3, #1]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d004      	beq.n	8004b04 <uart_lld_serve_tx_end_irq.lto_priv.143+0x6c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	4798      	blx	r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	785b      	ldrb	r3, [r3, #1]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d102      	bne.n	8004b12 <uart_lld_serve_tx_end_irq.lto_priv.143+0x7a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	705a      	strb	r2, [r3, #1]
}
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	080093c0 	.word	0x080093c0

08004b1c <serve_usart_irq.lto_priv.147>:
static void serve_usart_irq(UARTDriver *uartp) {
 8004b1c:	b590      	push	{r4, r7, lr}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  USART_TypeDef *u = uartp->usart;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	617b      	str	r3, [r7, #20]
  uint32_t cr1 = u->CR1;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	613b      	str	r3, [r7, #16]
  sr = u->SR;   /* SR reset step 1.*/
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	81fb      	strh	r3, [r7, #14]
  (void)u->DR;  /* SR reset step 2.*/
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	685b      	ldr	r3, [r3, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8004b3a:	89fa      	ldrh	r2, [r7, #14]
 8004b3c:	f240 130f 	movw	r3, #271	; 0x10f
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d013      	beq.n	8004b6e <serve_usart_irq.lto_priv.147+0x52>
    u->SR = ~USART_SR_LBD;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b4c:	601a      	str	r2, [r3, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <serve_usart_irq.lto_priv.147+0x52>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	691c      	ldr	r4, [r3, #16]
 8004b5e:	89fb      	ldrh	r3, [r7, #14]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff fe2f 	bl	80047c4 <translate_errors>
 8004b66:	4603      	mov	r3, r0
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	47a0      	blx	r4
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8004b6e:	89fb      	ldrh	r3, [r7, #14]
 8004b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d017      	beq.n	8004ba8 <serve_usart_irq.lto_priv.147+0x8c>
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d012      	beq.n	8004ba8 <serve_usart_irq.lto_priv.147+0x8c>
    u->SR = ~USART_SR_TC;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b88:	601a      	str	r2, [r3, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	60da      	str	r2, [r3, #12]
    _uart_tx2_isr_code(uartp);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <serve_usart_irq.lto_priv.147+0x8c>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	4798      	blx	r3
}
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd90      	pop	{r4, r7, pc}
	...

08004bb0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <Vector120+0x38>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004bbe:	607b      	str	r3, [r7, #4]
  DMA2->LIFCR = flags << 0U;
 8004bc0:	4a09      	ldr	r2, [pc, #36]	; (8004be8 <Vector120+0x38>)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[8].dma_func)
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <Vector120+0x3c>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d006      	beq.n	8004bdc <Vector120+0x2c>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <Vector120+0x3c>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	4a06      	ldr	r2, [pc, #24]	; (8004bec <Vector120+0x3c>)
 8004bd4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004bdc:	f7fc f994 	bl	8000f08 <_port_irq_epilogue>
}
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40026400 	.word	0x40026400
 8004bec:	2000084c 	.word	0x2000084c

08004bf0 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <Vector124+0x3c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	099b      	lsrs	r3, r3, #6
 8004bfc:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004c00:	607b      	str	r3, [r7, #4]
  DMA2->LIFCR = flags << 6U;
 8004c02:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <Vector124+0x3c>)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	019b      	lsls	r3, r3, #6
 8004c08:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[9].dma_func)
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <Vector124+0x40>)
 8004c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d006      	beq.n	8004c20 <Vector124+0x30>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8004c12:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <Vector124+0x40>)
 8004c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c16:	4a06      	ldr	r2, [pc, #24]	; (8004c30 <Vector124+0x40>)
 8004c18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004c20:	f7fc f972 	bl	8000f08 <_port_irq_epilogue>
}
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40026400 	.word	0x40026400
 8004c30:	2000084c 	.word	0x2000084c

08004c34 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <Vector128+0x3c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	0c1b      	lsrs	r3, r3, #16
 8004c40:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004c44:	607b      	str	r3, [r7, #4]
  DMA2->LIFCR = flags << 16U;
 8004c46:	4a0a      	ldr	r2, [pc, #40]	; (8004c70 <Vector128+0x3c>)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	041b      	lsls	r3, r3, #16
 8004c4c:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[10].dma_func)
 8004c4e:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <Vector128+0x40>)
 8004c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d006      	beq.n	8004c64 <Vector128+0x30>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <Vector128+0x40>)
 8004c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5a:	4a06      	ldr	r2, [pc, #24]	; (8004c74 <Vector128+0x40>)
 8004c5c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	4610      	mov	r0, r2
 8004c62:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004c64:	f7fc f950 	bl	8000f08 <_port_irq_epilogue>
}
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40026400 	.word	0x40026400
 8004c74:	2000084c 	.word	0x2000084c

08004c78 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <Vector12C+0x3c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	0d9b      	lsrs	r3, r3, #22
 8004c84:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004c88:	607b      	str	r3, [r7, #4]
  DMA2->LIFCR = flags << 22U;
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	; (8004cb4 <Vector12C+0x3c>)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	059b      	lsls	r3, r3, #22
 8004c90:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[11].dma_func)
 8004c92:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <Vector12C+0x40>)
 8004c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d006      	beq.n	8004ca8 <Vector12C+0x30>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8004c9a:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <Vector12C+0x40>)
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	4a06      	ldr	r2, [pc, #24]	; (8004cb8 <Vector12C+0x40>)
 8004ca0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004ca8:	f7fc f92e 	bl	8000f08 <_port_irq_epilogue>
}
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40026400 	.word	0x40026400
 8004cb8:	2000084c 	.word	0x2000084c

08004cbc <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <Vector130+0x38>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004cca:	607b      	str	r3, [r7, #4]
  DMA2->HIFCR = flags << 0U;
 8004ccc:	4a09      	ldr	r2, [pc, #36]	; (8004cf4 <Vector130+0x38>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[12].dma_func)
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <Vector130+0x3c>)
 8004cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d006      	beq.n	8004ce8 <Vector130+0x2c>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8004cda:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <Vector130+0x3c>)
 8004cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cde:	4a06      	ldr	r2, [pc, #24]	; (8004cf8 <Vector130+0x3c>)
 8004ce0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004ce8:	f7fc f90e 	bl	8000f08 <_port_irq_epilogue>
}
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40026400 	.word	0x40026400
 8004cf8:	2000084c 	.word	0x2000084c

08004cfc <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8004d02:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <Vector150+0x3c>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004d0c:	607b      	str	r3, [r7, #4]
  DMA2->HIFCR = flags << 6U;
 8004d0e:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <Vector150+0x3c>)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	019b      	lsls	r3, r3, #6
 8004d14:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[13].dma_func)
 8004d16:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <Vector150+0x40>)
 8004d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d006      	beq.n	8004d2c <Vector150+0x30>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8004d1e:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <Vector150+0x40>)
 8004d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d22:	4a06      	ldr	r2, [pc, #24]	; (8004d3c <Vector150+0x40>)
 8004d24:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004d2c:	f7fc f8ec 	bl	8000f08 <_port_irq_epilogue>
}
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40026400 	.word	0x40026400
 8004d3c:	2000084c 	.word	0x2000084c

08004d40 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8004d46:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <Vector154+0x3c>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	0c1b      	lsrs	r3, r3, #16
 8004d4c:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004d50:	607b      	str	r3, [r7, #4]
  DMA2->HIFCR = flags << 16U;
 8004d52:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <Vector154+0x3c>)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	041b      	lsls	r3, r3, #16
 8004d58:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[14].dma_func)
 8004d5a:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <Vector154+0x40>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d006      	beq.n	8004d70 <Vector154+0x30>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <Vector154+0x40>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	4a06      	ldr	r2, [pc, #24]	; (8004d80 <Vector154+0x40>)
 8004d68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004d70:	f7fc f8ca 	bl	8000f08 <_port_irq_epilogue>
}
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40026400 	.word	0x40026400
 8004d80:	2000084c 	.word	0x2000084c

08004d84 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <Vector158+0x3c>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	0d9b      	lsrs	r3, r3, #22
 8004d90:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8004d94:	607b      	str	r3, [r7, #4]
  DMA2->HIFCR = flags << 22U;
 8004d96:	4a0a      	ldr	r2, [pc, #40]	; (8004dc0 <Vector158+0x3c>)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	059b      	lsls	r3, r3, #22
 8004d9c:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[15].dma_func)
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <Vector158+0x40>)
 8004da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d006      	beq.n	8004db4 <Vector158+0x30>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8004da6:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <Vector158+0x40>)
 8004da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004daa:	4a06      	ldr	r2, [pc, #24]	; (8004dc4 <Vector158+0x40>)
 8004dac:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	4610      	mov	r0, r2
 8004db2:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004db4:	f7fc f8a8 	bl	8000f08 <_port_irq_epilogue>
}
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40026400 	.word	0x40026400
 8004dc4:	2000084c 	.word	0x2000084c

08004dc8 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
  unsigned i;

  dma_streams_mask = 0U;
 8004dce:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <dmaInit+0x68>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	607b      	str	r3, [r7, #4]
 8004dd8:	e011      	b.n	8004dfe <dmaInit+0x36>
    _stm32_dma_streams[i].stream->CR = 0U;
 8004dda:	4916      	ldr	r1, [pc, #88]	; (8004e34 <dmaInit+0x6c>)
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4413      	add	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
    dma_isr_redir[i].dma_func = NULL;
 8004dee:	4a12      	ldr	r2, [pc, #72]	; (8004e38 <dmaInit+0x70>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2100      	movs	r1, #0
 8004df4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b0f      	cmp	r3, #15
 8004e02:	d9ea      	bls.n	8004dda <dmaInit+0x12>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <dmaInit+0x74>)
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e0a:	609a      	str	r2, [r3, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <dmaInit+0x74>)
 8004e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e12:	60da      	str	r2, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8004e14:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <dmaInit+0x78>)
 8004e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e1a:	609a      	str	r2, [r3, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8004e1c:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <dmaInit+0x78>)
 8004e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e22:	60da      	str	r2, [r3, #12]
}
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000848 	.word	0x20000848
 8004e34:	08008dac 	.word	0x08008dac
 8004e38:	2000084c 	.word	0x2000084c
 8004e3c:	40026000 	.word	0x40026000
 8004e40:	40026400 	.word	0x40026400

08004e44 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	7a5b      	ldrb	r3, [r3, #9]
 8004e56:	461a      	mov	r2, r3
 8004e58:	2301      	movs	r3, #1
 8004e5a:	fa03 f202 	lsl.w	r2, r3, r2
 8004e5e:	4b38      	ldr	r3, [pc, #224]	; (8004f40 <dmaStreamAllocate+0xfc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <dmaStreamAllocate+0x28>
    return true;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e064      	b.n	8004f36 <dmaStreamAllocate+0xf2>

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	7a5b      	ldrb	r3, [r3, #9]
 8004e70:	4619      	mov	r1, r3
 8004e72:	4a34      	ldr	r2, [pc, #208]	; (8004f44 <dmaStreamAllocate+0x100>)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	7a5b      	ldrb	r3, [r3, #9]
 8004e7e:	4a31      	ldr	r2, [pc, #196]	; (8004f44 <dmaStreamAllocate+0x100>)
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	4413      	add	r3, r2
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	605a      	str	r2, [r3, #4]
  dma_streams_mask |= (1U << dmastp->selfindex);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	7a5b      	ldrb	r3, [r3, #9]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	2301      	movs	r3, #1
 8004e90:	fa03 f202 	lsl.w	r2, r3, r2
 8004e94:	4b2a      	ldr	r3, [pc, #168]	; (8004f40 <dmaStreamAllocate+0xfc>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	4a29      	ldr	r2, [pc, #164]	; (8004f40 <dmaStreamAllocate+0xfc>)
 8004e9c:	6013      	str	r3, [r2, #0]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8004e9e:	4b28      	ldr	r3, [pc, #160]	; (8004f40 <dmaStreamAllocate+0xfc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00b      	beq.n	8004ec0 <dmaStreamAllocate+0x7c>
    rccEnableDMA1(true);
 8004ea8:	4a27      	ldr	r2, [pc, #156]	; (8004f48 <dmaStreamAllocate+0x104>)
 8004eaa:	4b27      	ldr	r3, [pc, #156]	; (8004f48 <dmaStreamAllocate+0x104>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8004eb4:	4a24      	ldr	r2, [pc, #144]	; (8004f48 <dmaStreamAllocate+0x104>)
 8004eb6:	4b24      	ldr	r3, [pc, #144]	; (8004f48 <dmaStreamAllocate+0x104>)
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ebe:	6513      	str	r3, [r2, #80]	; 0x50
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8004ec0:	4b1f      	ldr	r3, [pc, #124]	; (8004f40 <dmaStreamAllocate+0xfc>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00b      	beq.n	8004ee4 <dmaStreamAllocate+0xa0>
    rccEnableDMA2(true);
 8004ecc:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <dmaStreamAllocate+0x104>)
 8004ece:	4b1e      	ldr	r3, [pc, #120]	; (8004f48 <dmaStreamAllocate+0x104>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed8:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <dmaStreamAllocate+0x104>)
 8004eda:	4b1b      	ldr	r3, [pc, #108]	; (8004f48 <dmaStreamAllocate+0x104>)
 8004edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ede:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ee2:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	f022 021f 	bic.w	r2, r2, #31
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1f8      	bne.n	8004ef4 <dmaStreamAllocate+0xb0>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	7a12      	ldrb	r2, [r2, #8]
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	223d      	movs	r2, #61	; 0x3d
 8004f0e:	408a      	lsls	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2221      	movs	r2, #33	; 0x21
 8004f20:	615a      	str	r2, [r3, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <dmaStreamAllocate+0xf0>
    nvicEnableVector(dmastp->vector, priority);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	7a9b      	ldrb	r3, [r3, #10]
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f001 fe60 	bl	8006bf4 <nvicEnableVector>
  }

  return false;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000848 	.word	0x20000848
 8004f44:	2000084c 	.word	0x2000084c
 8004f48:	40023800 	.word	0x40023800

08004f4c <_pal_lld_init>:
/**
 * @brief   PAL driver initialization.
 *
 * @notapi
 */
void _pal_lld_init(void) {
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
  }
#endif
}
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <port_lock>:
static inline void port_lock(void) {
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	2320      	movs	r3, #32
 8004f60:	607b      	str	r3, [r7, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f383 8811 	msr	BASEPRI, r3
}
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <port_unlock>:
static inline void port_unlock(void) {
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	2300      	movs	r3, #0
 8004f7a:	607b      	str	r3, [r7, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f383 8811 	msr	BASEPRI, r3
}
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <port_lock_from_isr>:
static inline void port_lock_from_isr(void) {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  port_lock();
 8004f90:	f7ff ffe2 	bl	8004f58 <port_lock>
}
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <port_unlock_from_isr>:
static inline void port_unlock_from_isr(void) {
 8004f96:	b580      	push	{r7, lr}
 8004f98:	af00      	add	r7, sp, #0
  port_unlock();
 8004f9a:	f7ff ffea 	bl	8004f72 <port_unlock>
}
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <chSysLockFromISR>:
static inline void chSysLockFromISR(void) {
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 8004fa4:	f7ff fff2 	bl	8004f8c <port_lock_from_isr>
}
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <chSysUnlockFromISR>:
static inline void chSysUnlockFromISR(void) {
 8004faa:	b580      	push	{r7, lr}
 8004fac:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 8004fae:	f7ff fff2 	bl	8004f96 <port_unlock_from_isr>
}
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <osalSysLockFromISR>:
static inline void osalSysLockFromISR(void) {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  chSysLockFromISR();
 8004fb8:	f7ff fff2 	bl	8004fa0 <chSysLockFromISR>
}
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <osalSysUnlockFromISR>:
static inline void osalSysUnlockFromISR(void) {
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	af00      	add	r7, sp, #0
  chSysUnlockFromISR();
 8004fc2:	f7ff fff2 	bl	8004faa <chSysUnlockFromISR>
}
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <osalSysPolledDelayX>:
static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  chSysPolledDelayX(cycles);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7fe fa4f 	bl	8003474 <chSysPolledDelayX>
}
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <otg_core_reset>:
static void otg_core_reset(USBDriver *usbp) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe8:	60fb      	str	r3, [r7, #12]
  osalSysPolledDelayX(32);
 8004fea:	2020      	movs	r0, #32
 8004fec:	f7ff ffec 	bl	8004fc8 <osalSysPolledDelayX>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f9      	bne.n	8004ff6 <otg_core_reset+0x1a>
  osalSysPolledDelayX(18);
 8005002:	2012      	movs	r0, #18
 8005004:	f7ff ffe0 	bl	8004fc8 <osalSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	dafb      	bge.n	8005008 <otg_core_reset+0x2c>
}
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <otg_disable_ep>:
static void otg_disable_ep(USBDriver *usbp) {
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005022:	60bb      	str	r3, [r7, #8]
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	e032      	b.n	8005090 <otg_disable_ep+0x7a>
    otgp->ie[i].DIEPCTL = 0;
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3348      	adds	r3, #72	; 0x48
 8005030:	015b      	lsls	r3, r3, #5
 8005032:	4413      	add	r3, r2
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
    otgp->ie[i].DIEPTSIZ = 0;
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	015b      	lsls	r3, r3, #5
 800503e:	4413      	add	r3, r2
 8005040:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	015b      	lsls	r3, r3, #5
 800504e:	4413      	add	r3, r2
 8005050:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005058:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPCTL = 0;
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3358      	adds	r3, #88	; 0x58
 8005060:	015b      	lsls	r3, r3, #5
 8005062:	4413      	add	r3, r2
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPTSIZ = 0;
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	015b      	lsls	r3, r3, #5
 800506e:	4413      	add	r3, r2
 8005070:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	015b      	lsls	r3, r3, #5
 800507e:	4413      	add	r3, r2
 8005080:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8005084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005088:	601a      	str	r2, [r3, #0]
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3301      	adds	r3, #1
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	429a      	cmp	r2, r3
 800509a:	d2c6      	bcs.n	800502a <otg_disable_ep+0x14>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80050a2:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
}
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <otg_rxfifo_flush>:
static void otg_rxfifo_flush(USBDriver *usbp) {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	60fb      	str	r3, [r7, #12]
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2210      	movs	r2, #16
 80050c2:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1f9      	bne.n	80050c4 <otg_rxfifo_flush+0x14>
  osalSysPolledDelayX(18);
 80050d0:	2012      	movs	r0, #18
 80050d2:	f7ff ff79 	bl	8004fc8 <osalSysPolledDelayX>
}
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <otg_txfifo_flush>:
static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  stm32_otg_t *otgp = usbp->otg;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	60fb      	str	r3, [r7, #12]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	019b      	lsls	r3, r3, #6
 80050f0:	f043 0220 	orr.w	r2, r3, #32
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1f9      	bne.n	80050f8 <otg_txfifo_flush+0x1c>
  osalSysPolledDelayX(18);
 8005104:	2012      	movs	r0, #18
 8005106:	f7ff ff5f 	bl	8004fc8 <osalSysPolledDelayX>
}
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <otg_ram_reset>:
static void otg_ram_reset(USBDriver *usbp) {
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <otg_ram_alloc>:
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  next = usbp->pmnext;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800513a:	60fb      	str	r3, [r7, #12]
  usbp->pmnext += size;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	441a      	add	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	65da      	str	r2, [r3, #92]	; 0x5c
  return next;
 8005148:	68fb      	ldr	r3, [r7, #12]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <otg_fifo_write_from_buffer>:
                                       size_t n) {
 8005156:	b480      	push	{r7}
 8005158:	b085      	sub	sp, #20
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
    *fifop = *((uint32_t *)buf);
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	601a      	str	r2, [r3, #0]
    if (n <= 4) {
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b04      	cmp	r3, #4
 800516e:	d906      	bls.n	800517e <otg_fifo_write_from_buffer+0x28>
    n -= 4;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3b04      	subs	r3, #4
 8005174:	607b      	str	r3, [r7, #4]
    buf += 4;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	3304      	adds	r3, #4
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	e7f1      	b.n	8005162 <otg_fifo_write_from_buffer+0xc>
}
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <otg_fifo_read_to_buffer>:
                                    size_t max) {
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  uint32_t w = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
  size_t i = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	e017      	b.n	80051d0 <otg_fifo_read_to_buffer+0x48>
    if ((i & 3) == 0){
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d102      	bne.n	80051b0 <otg_fifo_read_to_buffer+0x28>
      w = *fifop;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	617b      	str	r3, [r7, #20]
    if (i < max) {
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d208      	bcs.n	80051ca <otg_fifo_read_to_buffer+0x42>
      *buf++ = (uint8_t)w;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	60ba      	str	r2, [r7, #8]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	701a      	strb	r2, [r3, #0]
      w >>= 8;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	0a1b      	lsrs	r3, r3, #8
 80051c8:	617b      	str	r3, [r7, #20]
    i++;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	3301      	adds	r3, #1
 80051ce:	613b      	str	r3, [r7, #16]
  while (i < n) {
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d3e3      	bcc.n	80051a0 <otg_fifo_read_to_buffer+0x18>
}
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <otg_rxfifo_handler>:
static void otg_rxfifo_handler(USBDriver *usbp) {
 80051e2:	b590      	push	{r4, r7, lr}
 80051e4:	b087      	sub	sp, #28
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  sts = usbp->otg->GRXSTSP;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	617b      	str	r3, [r7, #20]
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051fa:	613b      	str	r3, [r7, #16]
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	60fb      	str	r3, [r7, #12]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f403 13f0 	and.w	r3, r3, #1966080	; 0x1e0000
 800520a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800520e:	d064      	beq.n	80052da <otg_rxfifo_handler+0xf8>
 8005210:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005214:	d806      	bhi.n	8005224 <otg_rxfifo_handler+0x42>
 8005216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800521a:	d05e      	beq.n	80052da <otg_rxfifo_handler+0xf8>
 800521c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005220:	d016      	beq.n	8005250 <otg_rxfifo_handler+0x6e>
 8005222:	e05a      	b.n	80052da <otg_rxfifo_handler+0xf8>
 8005224:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005228:	d057      	beq.n	80052da <otg_rxfifo_handler+0xf8>
 800522a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800522e:	d154      	bne.n	80052da <otg_rxfifo_handler+0xf8>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005234:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3302      	adds	r3, #2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	6a19      	ldr	r1, [r3, #32]
 8005246:	2308      	movs	r3, #8
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	f7ff ff9d 	bl	8005188 <otg_fifo_read_to_buffer>
 800524e:	e044      	b.n	80052da <otg_rxfifo_handler+0xf8>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
                            usbp->epc[ep]->out_state->rxbuf,
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3302      	adds	r3, #2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8005266:	689c      	ldr	r4, [r3, #8]
                            usbp->epc[ep]->out_state->rxsize -
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3302      	adds	r3, #2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	681a      	ldr	r2, [r3, #0]
                            usbp->epc[ep]->out_state->rxcnt);
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3302      	adds	r3, #2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	685b      	ldr	r3, [r3, #4]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4621      	mov	r1, r4
 800528e:	f7ff ff7b 	bl	8005188 <otg_fifo_read_to_buffer>
    usbp->epc[ep]->out_state->rxbuf += cnt;
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3302      	adds	r3, #2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	699a      	ldr	r2, [r3, #24]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3302      	adds	r3, #2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	6899      	ldr	r1, [r3, #8]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	440b      	add	r3, r1
 80052b4:	6093      	str	r3, [r2, #8]
    usbp->epc[ep]->out_state->rxcnt += cnt;
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3302      	adds	r3, #2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3302      	adds	r3, #2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	6859      	ldr	r1, [r3, #4]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	440b      	add	r3, r1
 80052d8:	6053      	str	r3, [r2, #4]
}
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd90      	pop	{r4, r7, pc}

080052e0 <otg_txfifo_handler>:
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	3302      	adds	r3, #2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	3302      	adds	r3, #2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d30f      	bcc.n	8005330 <otg_txfifo_handler+0x50>
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005318:	f8d2 1834 	ldr.w	r1, [r2, #2100]	; 0x834
 800531c:	78fa      	ldrb	r2, [r7, #3]
 800531e:	2001      	movs	r0, #1
 8005320:	fa00 f202 	lsl.w	r2, r0, r2
 8005324:	43d2      	mvns	r2, r2
 8005326:	400a      	ands	r2, r1
 8005328:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
      return true;
 800532c:	2301      	movs	r3, #1
 800532e:	e06a      	b.n	8005406 <otg_txfifo_handler+0x126>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	3302      	adds	r3, #2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	3302      	adds	r3, #2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	60fb      	str	r3, [r7, #12]
    if (n > usbp->epc[ep]->in_maxsize)
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	3302      	adds	r3, #2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	8a1b      	ldrh	r3, [r3, #16]
 8005362:	461a      	mov	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	429a      	cmp	r2, r3
 8005368:	d207      	bcs.n	800537a <otg_txfifo_handler+0x9a>
      n = usbp->epc[ep]->in_maxsize;
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	3302      	adds	r3, #2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	8a1b      	ldrh	r3, [r3, #16]
 8005378:	60fb      	str	r3, [r7, #12]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800537e:	78fb      	ldrb	r3, [r7, #3]
 8005380:	015b      	lsls	r3, r3, #5
 8005382:	4413      	add	r3, r2
 8005384:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	b29b      	uxth	r3, r3
 800538c:	009a      	lsls	r2, r3, #2
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	429a      	cmp	r2, r3
 8005392:	d201      	bcs.n	8005398 <otg_txfifo_handler+0xb8>
      return false;
 8005394:	2300      	movs	r3, #0
 8005396:	e036      	b.n	8005406 <otg_txfifo_handler+0x126>
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	3301      	adds	r3, #1
 80053a0:	031b      	lsls	r3, r3, #12
 80053a2:	18d0      	adds	r0, r2, r3
                               usbp->epc[ep]->in_state->txbuf,
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	3302      	adds	r3, #2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4619      	mov	r1, r3
 80053b8:	f7ff fecd 	bl	8005156 <otg_fifo_write_from_buffer>
    usbp->epc[ep]->in_state->txbuf += n;
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	3302      	adds	r3, #2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	3302      	adds	r3, #2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	6899      	ldr	r1, [r3, #8]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	440b      	add	r3, r1
 80053de:	6093      	str	r3, [r2, #8]
    usbp->epc[ep]->in_state->txcnt += n;
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	3302      	adds	r3, #2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	695a      	ldr	r2, [r3, #20]
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	3302      	adds	r3, #2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	440b      	add	r3, r1
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	6859      	ldr	r1, [r3, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	440b      	add	r3, r1
 8005402:	6053      	str	r3, [r2, #4]
 8005404:	e772      	b.n	80052ec <otg_txfifo_handler+0xc>
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <otg_epin_handler>:
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800540e:	b580      	push	{r7, lr}
 8005410:	b086      	sub	sp, #24
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	460b      	mov	r3, r1
 8005418:	70fb      	strb	r3, [r7, #3]
  stm32_otg_t *otgp = usbp->otg;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541e:	617b      	str	r3, [r7, #20]
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	015b      	lsls	r3, r3, #5
 8005426:	4413      	add	r3, r2
 8005428:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	613b      	str	r3, [r7, #16]
  otgp->ie[ep].DIEPINT = epint;
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	015b      	lsls	r3, r3, #5
 8005436:	4413      	add	r3, r2
 8005438:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	601a      	str	r2, [r3, #0]
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d04b      	beq.n	80054e2 <otg_epin_handler+0xd4>
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d044      	beq.n	80054e2 <otg_epin_handler+0xd4>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	3302      	adds	r3, #2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	60fb      	str	r3, [r7, #12]
    if (isp->txsize < isp->totsize) {
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	429a      	cmp	r2, r3
 8005472:	d213      	bcs.n	800549c <otg_epin_handler+0x8e>
      isp->txsize = isp->totsize - isp->txsize;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	1ad2      	subs	r2, r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	601a      	str	r2, [r3, #0]
      isp->txcnt  = 0;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	605a      	str	r2, [r3, #4]
      osalSysLockFromISR();
 8005488:	f7ff fd94 	bl	8004fb4 <osalSysLockFromISR>
      usb_lld_start_in(usbp, ep);
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fe fc2e 	bl	8003cf2 <usb_lld_start_in>
      osalSysUnlockFromISR();
 8005496:	f7ff fd92 	bl	8004fbe <osalSysUnlockFromISR>
 800549a:	e022      	b.n	80054e2 <otg_epin_handler+0xd4>
      _usb_isr_invoke_in_cb(usbp, ep);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	891b      	ldrh	r3, [r3, #8]
 80054a0:	b21a      	sxth	r2, r3
 80054a2:	78fb      	ldrb	r3, [r7, #3]
 80054a4:	2101      	movs	r1, #1
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	b21b      	sxth	r3, r3
 80054ac:	43db      	mvns	r3, r3
 80054ae:	b21b      	sxth	r3, r3
 80054b0:	4013      	ands	r3, r2
 80054b2:	b21b      	sxth	r3, r3
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	811a      	strh	r2, [r3, #8]
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	3302      	adds	r3, #2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <otg_epin_handler+0xd4>
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	3302      	adds	r3, #2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	78fa      	ldrb	r2, [r7, #3]
 80054dc:	4611      	mov	r1, r2
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	4798      	blx	r3
  if ((epint & DIEPINT_TXFE) &&
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00e      	beq.n	800550a <otg_epin_handler+0xfc>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	2101      	movs	r1, #1
 80054f6:	fa01 f303 	lsl.w	r3, r1, r3
 80054fa:	4013      	ands	r3, r2
  if ((epint & DIEPINT_TXFE) &&
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <otg_epin_handler+0xfc>
    otg_txfifo_handler(usbp, ep);
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff feeb 	bl	80052e0 <otg_txfifo_handler>
}
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <otg_epout_handler>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
  stm32_otg_t *otgp = usbp->otg;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005520:	617b      	str	r3, [r7, #20]
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	015b      	lsls	r3, r3, #5
 8005528:	4413      	add	r3, r2
 800552a:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	613b      	str	r3, [r7, #16]
  otgp->oe[ep].DOEPINT = epint;
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	015b      	lsls	r3, r3, #5
 8005538:	4413      	add	r3, r2
 800553a:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	601a      	str	r2, [r3, #0]
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d011      	beq.n	8005570 <otg_epout_handler+0x60>
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <otg_epout_handler+0x60>
    _usb_isr_invoke_setup_cb(usbp, ep);
 800555a:	78fb      	ldrb	r3, [r7, #3]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	3302      	adds	r3, #2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	78fa      	ldrb	r2, [r7, #3]
 800556a:	4611      	mov	r1, r2
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d05e      	beq.n	8005638 <otg_epout_handler+0x128>
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d057      	beq.n	8005638 <otg_epout_handler+0x128>
    osp = usbp->epc[ep]->out_state;
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	3302      	adds	r3, #2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	60fb      	str	r3, [r7, #12]
    if (ep == 0) {
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d129      	bne.n	80055f2 <otg_epout_handler+0xe2>
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	3302      	adds	r3, #2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	440b      	add	r3, r1
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	8a5b      	ldrh	r3, [r3, #18]
 80055b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80055b4:	fb03 f301 	mul.w	r3, r3, r1
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d119      	bne.n	80055f2 <otg_epout_handler+0xe2>
          (osp->rxsize < osp->totsize)) {
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	68db      	ldr	r3, [r3, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d213      	bcs.n	80055f2 <otg_epout_handler+0xe2>
        osp->rxsize = osp->totsize - osp->rxsize;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	1ad2      	subs	r2, r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	601a      	str	r2, [r3, #0]
        osp->rxcnt  = 0;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	605a      	str	r2, [r3, #4]
        osalSysLockFromISR();
 80055de:	f7ff fce9 	bl	8004fb4 <osalSysLockFromISR>
        usb_lld_start_out(usbp, ep);
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	4619      	mov	r1, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fc79 	bl	8005ede <usb_lld_start_out>
        osalSysUnlockFromISR();
 80055ec:	f7ff fce7 	bl	8004fbe <osalSysUnlockFromISR>
 80055f0:	e022      	b.n	8005638 <otg_epout_handler+0x128>
    _usb_isr_invoke_out_cb(usbp, ep);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	895b      	ldrh	r3, [r3, #10]
 80055f6:	b21a      	sxth	r2, r3
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	2101      	movs	r1, #1
 80055fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005600:	b21b      	sxth	r3, r3
 8005602:	43db      	mvns	r3, r3
 8005604:	b21b      	sxth	r3, r3
 8005606:	4013      	ands	r3, r2
 8005608:	b21b      	sxth	r3, r3
 800560a:	b29a      	uxth	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	815a      	strh	r2, [r3, #10]
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	3302      	adds	r3, #2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <otg_epout_handler+0x128>
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	3302      	adds	r3, #2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	4611      	mov	r1, r2
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	4798      	blx	r3
}
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <otg_isoc_in_failed_handler>:
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564a:	60bb      	str	r3, [r7, #8]
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800564c:	2300      	movs	r3, #0
 800564e:	73fb      	strb	r3, [r7, #15]
 8005650:	e058      	b.n	8005704 <otg_isoc_in_failed_handler+0xc6>
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	3348      	adds	r3, #72	; 0x48
 8005658:	015b      	lsls	r3, r3, #5
 800565a:	4413      	add	r3, r2
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005662:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005666:	d14a      	bne.n	80056fe <otg_isoc_in_failed_handler+0xc0>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	3348      	adds	r3, #72	; 0x48
 800566e:	015b      	lsls	r3, r3, #5
 8005670:	4413      	add	r3, r2
 8005672:	681b      	ldr	r3, [r3, #0]
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8005674:	2b00      	cmp	r3, #0
 8005676:	da42      	bge.n	80056fe <otg_isoc_in_failed_handler+0xc0>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	7bfa      	ldrb	r2, [r7, #15]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	3248      	adds	r2, #72	; 0x48
 8005680:	0152      	lsls	r2, r2, #5
 8005682:	440a      	add	r2, r1
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	3348      	adds	r3, #72	; 0x48
 800568e:	015b      	lsls	r3, r3, #5
 8005690:	440b      	add	r3, r1
 8005692:	601a      	str	r2, [r3, #0]
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	3348      	adds	r3, #72	; 0x48
 800569a:	015b      	lsls	r3, r3, #5
 800569c:	4413      	add	r3, r2
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	dbf7      	blt.n	8005694 <otg_isoc_in_failed_handler+0x56>
      otg_txfifo_flush(usbp, ep);
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	4619      	mov	r1, r3
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7ff fd17 	bl	80050dc <otg_txfifo_flush>
      _usb_isr_invoke_in_cb(usbp, ep);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	891b      	ldrh	r3, [r3, #8]
 80056b2:	b21a      	sxth	r2, r3
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2101      	movs	r1, #1
 80056b8:	fa01 f303 	lsl.w	r3, r1, r3
 80056bc:	b21b      	sxth	r3, r3
 80056be:	43db      	mvns	r3, r3
 80056c0:	b21b      	sxth	r3, r3
 80056c2:	4013      	ands	r3, r2
 80056c4:	b21b      	sxth	r3, r3
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	811a      	strh	r2, [r3, #8]
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	3302      	adds	r3, #2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <otg_isoc_in_failed_handler+0xb6>
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	3302      	adds	r3, #2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	7bfa      	ldrb	r2, [r7, #15]
 80056ee:	4611      	mov	r1, r2
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	4798      	blx	r3
    otg_txfifo_handler(usbp, ep);
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff fdf1 	bl	80052e0 <otg_txfifo_handler>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	3301      	adds	r3, #1
 8005702:	73fb      	strb	r3, [r7, #15]
 8005704:	7bfa      	ldrb	r2, [r7, #15]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	429a      	cmp	r2, r3
 800570e:	d9a0      	bls.n	8005652 <otg_isoc_in_failed_handler+0x14>
}
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <otg_isoc_out_failed_handler>:
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	60bb      	str	r3, [r7, #8]
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8005724:	2300      	movs	r3, #0
 8005726:	73fb      	strb	r3, [r7, #15]
 8005728:	e038      	b.n	800579c <otg_isoc_out_failed_handler+0x86>
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	3358      	adds	r3, #88	; 0x58
 8005730:	015b      	lsls	r3, r3, #5
 8005732:	4413      	add	r3, r2
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800573a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800573e:	d12a      	bne.n	8005796 <otg_isoc_out_failed_handler+0x80>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	3358      	adds	r3, #88	; 0x58
 8005746:	015b      	lsls	r3, r3, #5
 8005748:	4413      	add	r3, r2
 800574a:	681b      	ldr	r3, [r3, #0]
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 800574c:	2b00      	cmp	r3, #0
 800574e:	da22      	bge.n	8005796 <otg_isoc_out_failed_handler+0x80>
      _usb_isr_invoke_out_cb(usbp, ep);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	895b      	ldrh	r3, [r3, #10]
 8005754:	b21a      	sxth	r2, r3
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	2101      	movs	r1, #1
 800575a:	fa01 f303 	lsl.w	r3, r1, r3
 800575e:	b21b      	sxth	r3, r3
 8005760:	43db      	mvns	r3, r3
 8005762:	b21b      	sxth	r3, r3
 8005764:	4013      	ands	r3, r2
 8005766:	b21b      	sxth	r3, r3
 8005768:	b29a      	uxth	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	815a      	strh	r2, [r3, #10]
 800576e:	7bfb      	ldrb	r3, [r7, #15]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	3302      	adds	r3, #2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00a      	beq.n	8005796 <otg_isoc_out_failed_handler+0x80>
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	3302      	adds	r3, #2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	7bfa      	ldrb	r2, [r7, #15]
 8005790:	4611      	mov	r1, r2
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	4798      	blx	r3
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	3301      	adds	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
 800579c:	7bfa      	ldrb	r2, [r7, #15]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d9c0      	bls.n	800572a <otg_isoc_out_failed_handler+0x14>
}
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <usb_lld_serve_interrupt>:
static void usb_lld_serve_interrupt(USBDriver *usbp) {
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b086      	sub	sp, #24
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	617b      	str	r3, [r7, #20]
  sts  = otgp->GINTSTS;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	613b      	str	r3, [r7, #16]
  sts &= otgp->GINTMSK;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4013      	ands	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
  otgp->GINTSTS = sts;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	615a      	str	r2, [r3, #20]
  if (sts & GINTSTS_USBRST) {
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <usb_lld_serve_interrupt+0x36>
    _usb_reset(usbp);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 ffdc 	bl	800679a <_usb_reset>
 80057e2:	e0be      	b.n	8005962 <usb_lld_serve_interrupt+0x1b4>
  if (sts & GINTSTS_WKUPINT) {
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	da19      	bge.n	800581e <usb_lld_serve_interrupt+0x70>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <usb_lld_serve_interrupt+0x5a>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80057fe:	f023 0203 	bic.w	r2, r3, #3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
    otgp->DCTL &= ~DCTL_RWUSIG;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800580e:	f023 0201 	bic.w	r2, r3, #1
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
    _usb_wakeup(usbp);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f001 f816 	bl	800684a <_usb_wakeup>
  if (sts & GINTSTS_USBSUSP) {
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <usb_lld_serve_interrupt+0x80>
    _usb_suspend(usbp);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fff4 	bl	8006816 <_usb_suspend>
  if (sts & GINTSTS_ENUMDNE) {
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d017      	beq.n	8005868 <usb_lld_serve_interrupt+0xba>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800583e:	f003 0306 	and.w	r3, r3, #6
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <usb_lld_serve_interrupt+0xaa>
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800584e:	f443 5210 	orr.w	r2, r3, #9216	; 0x2400
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	60da      	str	r2, [r3, #12]
 8005856:	e007      	b.n	8005868 <usb_lld_serve_interrupt+0xba>
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8005860:	f443 52a0 	orr.w	r2, r3, #5120	; 0x1400
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	60da      	str	r2, [r3, #12]
  if (sts & GINTSTS_SOF) {
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <usb_lld_serve_interrupt+0xd8>
    _usb_isr_invoke_sof_cb(usbp);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d004      	beq.n	8005886 <usb_lld_serve_interrupt+0xd8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <usb_lld_serve_interrupt+0xe8>
    otg_isoc_in_failed_handler(usbp);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff fed4 	bl	800563e <otg_isoc_in_failed_handler>
  if (sts & GINTSTS_IISOOXFR) {
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <usb_lld_serve_interrupt+0xf8>
    otg_isoc_out_failed_handler(usbp);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff ff38 	bl	8005716 <otg_isoc_out_failed_handler>
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <usb_lld_serve_interrupt+0x108>
    otg_rxfifo_handler(usbp);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff fc96 	bl	80051e2 <otg_rxfifo_handler>
  src = otgp->DAINT;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80058bc:	60fb      	str	r3, [r7, #12]
  if (sts & GINTSTS_OEPINT) {
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d023      	beq.n	8005910 <usb_lld_serve_interrupt+0x162>
    if (src & (1 << 16))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <usb_lld_serve_interrupt+0x12c>
      otg_epout_handler(usbp, 0);
 80058d2:	2100      	movs	r1, #0
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff fe1b 	bl	8005510 <otg_epout_handler>
    if (src & (1 << 17))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <usb_lld_serve_interrupt+0x13e>
      otg_epout_handler(usbp, 1);
 80058e4:	2101      	movs	r1, #1
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff fe12 	bl	8005510 <otg_epout_handler>
    if (src & (1 << 18))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <usb_lld_serve_interrupt+0x150>
      otg_epout_handler(usbp, 2);
 80058f6:	2102      	movs	r1, #2
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff fe09 	bl	8005510 <otg_epout_handler>
    if (src & (1 << 19))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <usb_lld_serve_interrupt+0x162>
      otg_epout_handler(usbp, 3);
 8005908:	2103      	movs	r1, #3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff fe00 	bl	8005510 <otg_epout_handler>
  if (sts & GINTSTS_IEPINT) {
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d023      	beq.n	8005962 <usb_lld_serve_interrupt+0x1b4>
    if (src & (1 << 0))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <usb_lld_serve_interrupt+0x17e>
      otg_epin_handler(usbp, 0);
 8005924:	2100      	movs	r1, #0
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff fd71 	bl	800540e <otg_epin_handler>
    if (src & (1 << 1))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <usb_lld_serve_interrupt+0x190>
      otg_epin_handler(usbp, 1);
 8005936:	2101      	movs	r1, #1
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff fd68 	bl	800540e <otg_epin_handler>
    if (src & (1 << 2))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <usb_lld_serve_interrupt+0x1a2>
      otg_epin_handler(usbp, 2);
 8005948:	2102      	movs	r1, #2
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff fd5f 	bl	800540e <otg_epin_handler>
    if (src & (1 << 3))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <usb_lld_serve_interrupt+0x1b4>
      otg_epin_handler(usbp, 3);
 800595a:	2103      	movs	r1, #3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff fd56 	bl	800540e <otg_epin_handler>
}
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  usb_lld_serve_interrupt(&USBD1);
 800596c:	4802      	ldr	r0, [pc, #8]	; (8005978 <Vector14C+0x10>)
 800596e:	f7ff ff1e 	bl	80057ae <usb_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 8005972:	f7fb fac9 	bl	8000f08 <_port_irq_epilogue>
}
 8005976:	bd80      	pop	{r7, pc}
 8005978:	200008cc 	.word	0x200008cc

0800597c <usb_lld_init>:
void usb_lld_init(void) {
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  usbObjectInit(&USBD1);
 8005980:	4805      	ldr	r0, [pc, #20]	; (8005998 <usb_lld_init+0x1c>)
 8005982:	f000 fe0e 	bl	80065a2 <usbObjectInit>
  USBD1.otg       = OTG_FS;
 8005986:	4b04      	ldr	r3, [pc, #16]	; (8005998 <usb_lld_init+0x1c>)
 8005988:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800598c:	655a      	str	r2, [r3, #84]	; 0x54
  USBD1.otgparams = &fsparams;
 800598e:	4b02      	ldr	r3, [pc, #8]	; (8005998 <usb_lld_init+0x1c>)
 8005990:	4a02      	ldr	r2, [pc, #8]	; (800599c <usb_lld_init+0x20>)
 8005992:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	200008cc 	.word	0x200008cc
 800599c:	08008e90 	.word	0x08008e90

080059a0 <usb_lld_start>:
void usb_lld_start(USBDriver *usbp) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ac:	60fb      	str	r3, [r7, #12]
  if (usbp->state == USB_STOP) {
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d159      	bne.n	8005a6a <usb_lld_start+0xca>
    if (&USBD1 == usbp) {
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2d      	ldr	r2, [pc, #180]	; (8005a70 <usb_lld_start+0xd0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d11f      	bne.n	80059fe <usb_lld_start+0x5e>
      rccEnableOTG_FS(true);
 80059be:	4a2d      	ldr	r2, [pc, #180]	; (8005a74 <usb_lld_start+0xd4>)
 80059c0:	4b2c      	ldr	r3, [pc, #176]	; (8005a74 <usb_lld_start+0xd4>)
 80059c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c8:	6353      	str	r3, [r2, #52]	; 0x34
 80059ca:	4a2a      	ldr	r2, [pc, #168]	; (8005a74 <usb_lld_start+0xd4>)
 80059cc:	4b29      	ldr	r3, [pc, #164]	; (8005a74 <usb_lld_start+0xd4>)
 80059ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d4:	6553      	str	r3, [r2, #84]	; 0x54
      rccResetOTG_FS();
 80059d6:	4a27      	ldr	r2, [pc, #156]	; (8005a74 <usb_lld_start+0xd4>)
 80059d8:	4b26      	ldr	r3, [pc, #152]	; (8005a74 <usb_lld_start+0xd4>)
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e0:	6153      	str	r3, [r2, #20]
 80059e2:	4b24      	ldr	r3, [pc, #144]	; (8005a74 <usb_lld_start+0xd4>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	615a      	str	r2, [r3, #20]
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 80059e8:	210e      	movs	r1, #14
 80059ea:	2043      	movs	r0, #67	; 0x43
 80059ec:	f001 f902 	bl	8006bf4 <nvicEnableVector>
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4a21      	ldr	r2, [pc, #132]	; (8005a78 <usb_lld_start+0xd8>)
 80059f4:	60da      	str	r2, [r3, #12]
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a20      	ldr	r2, [pc, #128]	; (8005a7c <usb_lld_start+0xdc>)
 80059fa:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    otgp->PCGCCTL = 0;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	22c0      	movs	r2, #192	; 0xc0
 8005a0a:	601a      	str	r2, [r3, #0]
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38
    otg_core_reset(usbp);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff fae1 	bl	8004fdc <otg_core_reset>
    otgp->GAHBCFG = 0;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	609a      	str	r2, [r3, #8]
    otg_disable_ep(usbp);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff faf8 	bl	8005016 <otg_disable_ep>
    otgp->DIEPMSK  = 0;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d103      	bne.n	8005a50 <usb_lld_start+0xb0>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4a0d      	ldr	r2, [pc, #52]	; (8005a80 <usb_lld_start+0xe0>)
 8005a4c:	619a      	str	r2, [r3, #24]
 8005a4e:	e002      	b.n	8005a56 <usb_lld_start+0xb6>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4a0c      	ldr	r2, [pc, #48]	; (8005a84 <usb_lld_start+0xe4>)
 8005a54:	619a      	str	r2, [r3, #24]
    otgp->GINTSTS  = 0xFFFFFFFF;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a5c:	615a      	str	r2, [r3, #20]
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f043 0201 	orr.w	r2, r3, #1
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	609a      	str	r2, [r3, #8]
}
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	200008cc 	.word	0x200008cc
 8005a74:	40023800 	.word	0x40023800
 8005a78:	40001440 	.word	0x40001440
 8005a7c:	02200003 	.word	0x02200003
 8005a80:	c0303c00 	.word	0xc0303c00
 8005a84:	c0303c08 	.word	0xc0303c08

08005a88 <usb_lld_reset>:
void usb_lld_reset(USBDriver *usbp) {
 8005a88:	b590      	push	{r4, r7, lr}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a94:	60bb      	str	r3, [r7, #8]
  otg_txfifo_flush(usbp, 0);
 8005a96:	2100      	movs	r1, #0
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff fb1f 	bl	80050dc <otg_txfifo_flush>
  otgp->DIEPEMPMSK = 0;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005aac:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e024      	b.n	8005b00 <usb_lld_reset+0x78>
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3348      	adds	r3, #72	; 0x48
 8005abc:	015b      	lsls	r3, r3, #5
 8005abe:	4413      	add	r3, r2
 8005ac0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ac4:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3358      	adds	r3, #88	; 0x58
 8005acc:	015b      	lsls	r3, r3, #5
 8005ace:	4413      	add	r3, r2
 8005ad0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ad4:	601a      	str	r2, [r3, #0]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	015b      	lsls	r3, r3, #5
 8005adc:	4413      	add	r3, r2
 8005ade:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ae6:	601a      	str	r2, [r3, #0]
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	015b      	lsls	r3, r3, #5
 8005aee:	4413      	add	r3, r2
 8005af0:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8005af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005af8:	601a      	str	r2, [r3, #0]
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3301      	adds	r3, #1
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d2d4      	bcs.n	8005ab6 <usb_lld_reset+0x2e>
  otg_ram_reset(usbp);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff faff 	bl	8005110 <otg_ram_reset>
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	625a      	str	r2, [r3, #36]	; 0x24
  otg_rxfifo_flush(usbp);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff fac7 	bl	80050b0 <otg_rxfifo_flush>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8005b28:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005b3a:	f043 0310 	orr.w	r3, r3, #16
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	6193      	str	r3, [r2, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2209      	movs	r2, #9
 8005b46:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2209      	movs	r2, #9
 8005b4e:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  usbp->epc[0] = &ep0config;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a17      	ldr	r2, [pc, #92]	; (8005bb4 <usb_lld_reset+0x12c>)
 8005b56:	60da      	str	r2, [r3, #12]
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8005b5e:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
 8005b62:	2340      	movs	r3, #64	; 0x40
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8005b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
 8005b7a:	2340      	movs	r3, #64	; 0x40
 8005b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8005b8a:	2340      	movs	r3, #64	; 0x40
 8005b8c:	089b      	lsrs	r3, r3, #2
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	041b      	lsls	r3, r3, #16
 8005b92:	461c      	mov	r4, r3
                   DIEPTXF_INEPTXSA(otg_ram_alloc(usbp,
 8005b94:	2340      	movs	r3, #64	; 0x40
 8005b96:	089b      	lsrs	r3, r3, #2
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff fac5 	bl	800512c <otg_ram_alloc>
 8005ba2:	4603      	mov	r3, r0
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8005ba4:	ea44 0203 	orr.w	r2, r4, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd90      	pop	{r4, r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	08008e6c 	.word	0x08008e6c

08005bb8 <usb_lld_set_address>:
void usb_lld_set_address(USBDriver *usbp) {
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc4:	60fb      	str	r3, [r7, #12]
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8005bcc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
 8005bd6:	0112      	lsls	r2, r2, #4
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <usb_lld_init_endpoint>:
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8005bec:	b5b0      	push	{r4, r5, r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  stm32_otg_t *otgp = usbp->otg;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfc:	60fb      	str	r3, [r7, #12]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	3302      	adds	r3, #2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0303 	and.w	r3, r3, #3
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	f200 80ed 	bhi.w	8005df0 <usb_lld_init_endpoint+0x204>
 8005c16:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <usb_lld_init_endpoint+0x30>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c2d 	.word	0x08005c2d
 8005c20:	08005c33 	.word	0x08005c33
 8005c24:	08005c39 	.word	0x08005c39
 8005c28:	08005c3f 	.word	0x08005c3f
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 8005c2c:	4b72      	ldr	r3, [pc, #456]	; (8005df8 <usb_lld_init_endpoint+0x20c>)
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	e007      	b.n	8005c42 <usb_lld_init_endpoint+0x56>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_ISO;
 8005c32:	4b72      	ldr	r3, [pc, #456]	; (8005dfc <usb_lld_init_endpoint+0x210>)
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e004      	b.n	8005c42 <usb_lld_init_endpoint+0x56>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 8005c38:	4b71      	ldr	r3, [pc, #452]	; (8005e00 <usb_lld_init_endpoint+0x214>)
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	e001      	b.n	8005c42 <usb_lld_init_endpoint+0x56>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 8005c3e:	4b71      	ldr	r3, [pc, #452]	; (8005e04 <usb_lld_init_endpoint+0x218>)
 8005c40:	617b      	str	r3, [r7, #20]
  otgp->oe[ep].DOEPTSIZ = 0;
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	015b      	lsls	r3, r3, #5
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
  if (usbp->epc[ep]->out_state != NULL) {
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	3302      	adds	r3, #2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01d      	beq.n	8005ca0 <usb_lld_init_endpoint+0xb4>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 8005c64:	78f8      	ldrb	r0, [r7, #3]
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	3302      	adds	r3, #2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	8a5b      	ldrh	r3, [r3, #18]
 8005c74:	461a      	mov	r2, r3
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	68f9      	ldr	r1, [r7, #12]
 8005c7c:	f100 0358 	add.w	r3, r0, #88	; 0x58
 8005c80:	015b      	lsls	r3, r3, #5
 8005c82:	440b      	add	r3, r1
 8005c84:	601a      	str	r2, [r3, #0]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	3310      	adds	r3, #16
 8005c90:	2101      	movs	r1, #1
 8005c92:	fa01 f303 	lsl.w	r3, r1, r3
 8005c96:	431a      	orrs	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8005c9e:	e01a      	b.n	8005cd6 <usb_lld_init_endpoint+0xea>
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	78fa      	ldrb	r2, [r7, #3]
 8005ca4:	68f9      	ldr	r1, [r7, #12]
 8005ca6:	3258      	adds	r2, #88	; 0x58
 8005ca8:	0152      	lsls	r2, r2, #5
 8005caa:	440a      	add	r2, r1
 8005cac:	6812      	ldr	r2, [r2, #0]
 8005cae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cb2:	68f9      	ldr	r1, [r7, #12]
 8005cb4:	3358      	adds	r3, #88	; 0x58
 8005cb6:	015b      	lsls	r3, r3, #5
 8005cb8:	440b      	add	r3, r1
 8005cba:	601a      	str	r2, [r3, #0]
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	3310      	adds	r3, #16
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	401a      	ands	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	015b      	lsls	r3, r3, #5
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
  if (usbp->epc[ep]->in_state != NULL) {
 8005ce6:	78fb      	ldrb	r3, [r7, #3]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	3302      	adds	r3, #2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d054      	beq.n	8005da2 <usb_lld_init_endpoint+0x1b6>
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	3302      	adds	r3, #2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	8a1b      	ldrh	r3, [r3, #16]
 8005d06:	089b      	lsrs	r3, r3, #2
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	613b      	str	r3, [r7, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	3302      	adds	r3, #2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	8b9b      	ldrh	r3, [r3, #28]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d90b      	bls.n	8005d36 <usb_lld_init_endpoint+0x14a>
      fsize *= usbp->epc[ep]->in_multiplier;
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	3302      	adds	r3, #2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	8b9b      	ldrh	r3, [r3, #28]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	fb02 f303 	mul.w	r3, r2, r3
 8005d34:	613b      	str	r3, [r7, #16]
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8005d36:	78fb      	ldrb	r3, [r7, #3]
 8005d38:	1e5c      	subs	r4, r3, #1
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	041d      	lsls	r5, r3, #16
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
 8005d3e:	6939      	ldr	r1, [r7, #16]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff f9f3 	bl	800512c <otg_ram_alloc>
 8005d46:	4603      	mov	r3, r0
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8005d48:	ea45 0203 	orr.w	r2, r5, r3
 8005d4c:	68f9      	ldr	r1, [r7, #12]
 8005d4e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	605a      	str	r2, [r3, #4]
    otg_txfifo_flush(usbp, ep);
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff f9bd 	bl	80050dc <otg_txfifo_flush>
    otgp->ie[ep].DIEPCTL = ctl |
 8005d62:	78f8      	ldrb	r0, [r7, #3]
                           DIEPCTL_TXFNUM(ep) |
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	059b      	lsls	r3, r3, #22
 8005d68:	461a      	mov	r2, r3
    otgp->ie[ep].DIEPCTL = ctl |
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	431a      	orrs	r2, r3
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	3302      	adds	r3, #2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	440b      	add	r3, r1
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	8a1b      	ldrh	r3, [r3, #16]
                           DIEPCTL_TXFNUM(ep) |
 8005d7c:	431a      	orrs	r2, r3
    otgp->ie[ep].DIEPCTL = ctl |
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8005d84:	015b      	lsls	r3, r3, #5
 8005d86:	440b      	add	r3, r1
 8005d88:	601a      	str	r2, [r3, #0]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	2101      	movs	r1, #1
 8005d94:	fa01 f303 	lsl.w	r3, r1, r3
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8005da0:	e026      	b.n	8005df0 <usb_lld_init_endpoint+0x204>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8005da2:	78fb      	ldrb	r3, [r7, #3]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	3340      	adds	r3, #64	; 0x40
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	4a16      	ldr	r2, [pc, #88]	; (8005e08 <usb_lld_init_endpoint+0x21c>)
 8005db0:	605a      	str	r2, [r3, #4]
    otg_txfifo_flush(usbp, ep);
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	4619      	mov	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff f990 	bl	80050dc <otg_txfifo_flush>
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	68f9      	ldr	r1, [r7, #12]
 8005dc2:	3248      	adds	r2, #72	; 0x48
 8005dc4:	0152      	lsls	r2, r2, #5
 8005dc6:	440a      	add	r2, r1
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	3348      	adds	r3, #72	; 0x48
 8005dd2:	015b      	lsls	r3, r3, #5
 8005dd4:	440b      	add	r3, r1
 8005dd6:	601a      	str	r2, [r3, #0]
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8005dde:	78fb      	ldrb	r3, [r7, #3]
 8005de0:	2101      	movs	r1, #1
 8005de2:	fa01 f303 	lsl.w	r3, r1, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	401a      	ands	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
}
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bdb0      	pop	{r4, r5, r7, pc}
 8005df6:	bf00      	nop
 8005df8:	10008000 	.word	0x10008000
 8005dfc:	10048000 	.word	0x10048000
 8005e00:	10088000 	.word	0x10088000
 8005e04:	100c8000 	.word	0x100c8000
 8005e08:	02000400 	.word	0x02000400

08005e0c <usb_lld_disable_endpoints>:
void usb_lld_disable_endpoints(USBDriver *usbp) {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  otg_ram_reset(usbp);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff f97b 	bl	8005110 <otg_ram_reset>
  otg_disable_ep(usbp);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff f8fb 	bl	8005016 <otg_disable_ep>
}
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <usb_lld_get_status_out>:
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	460b      	mov	r3, r1
 8005e30:	70fb      	strb	r3, [r7, #3]
  ctl = usbp->otg->oe[ep].DOEPCTL;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	3358      	adds	r3, #88	; 0x58
 8005e3a:	015b      	lsls	r3, r3, #5
 8005e3c:	4413      	add	r3, r2
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60fb      	str	r3, [r7, #12]
  if (!(ctl & DOEPCTL_USBAEP))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <usb_lld_get_status_out+0x2a>
    return EP_STATUS_DISABLED;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	e007      	b.n	8005e60 <usb_lld_get_status_out+0x3a>
  if (ctl & DOEPCTL_STALL)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <usb_lld_get_status_out+0x38>
    return EP_STATUS_STALLED;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e000      	b.n	8005e60 <usb_lld_get_status_out+0x3a>
  return EP_STATUS_ACTIVE;
 8005e5e:	2302      	movs	r3, #2
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <usb_lld_get_status_in>:
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	70fb      	strb	r3, [r7, #3]
  ctl = usbp->otg->ie[ep].DIEPCTL;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	3348      	adds	r3, #72	; 0x48
 8005e80:	015b      	lsls	r3, r3, #5
 8005e82:	4413      	add	r3, r2
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
  if (!(ctl & DIEPCTL_USBAEP))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <usb_lld_get_status_in+0x2a>
    return EP_STATUS_DISABLED;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e007      	b.n	8005ea6 <usb_lld_get_status_in+0x3a>
  if (ctl & DIEPCTL_STALL)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <usb_lld_get_status_in+0x38>
    return EP_STATUS_STALLED;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <usb_lld_get_status_in+0x3a>
  return EP_STATUS_ACTIVE;
 8005ea4:	2302      	movs	r3, #2
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <usb_lld_read_setup>:
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	460b      	mov	r3, r1
 8005ebc:	607a      	str	r2, [r7, #4]
 8005ebe:	72fb      	strb	r3, [r7, #11]
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8005ec0:	7afb      	ldrb	r3, [r7, #11]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	2208      	movs	r2, #8
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f002 fee8 	bl	8008ca8 <memcpy>
}
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <usb_lld_start_out>:
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8005ede:	b480      	push	{r7}
 8005ee0:	b087      	sub	sp, #28
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	70fb      	strb	r3, [r7, #3]
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	3302      	adds	r3, #2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	617b      	str	r3, [r7, #20]
  osp->totsize = osp->rxsize;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	60da      	str	r2, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <usb_lld_start_out+0x38>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b40      	cmp	r3, #64	; 0x40
 8005f0e:	d902      	bls.n	8005f16 <usb_lld_start_out+0x38>
      osp->rxsize = EP0_MAX_OUTSIZE;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2240      	movs	r2, #64	; 0x40
 8005f14:	601a      	str	r2, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	3302      	adds	r3, #2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	8a5b      	ldrh	r3, [r3, #18]
 8005f28:	4413      	add	r3, r2
 8005f2a:	1e5a      	subs	r2, r3, #1
           usbp->epc[ep]->out_maxsize;
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	3302      	adds	r3, #2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	8a5b      	ldrh	r3, [r3, #18]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8005f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3e:	613b      	str	r3, [r7, #16]
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	3302      	adds	r3, #2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	8a5b      	ldrh	r3, [r3, #18]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	fb03 f302 	mul.w	r3, r3, r2
 8005f56:	3303      	adds	r3, #3
 8005f58:	f023 0303 	bic.w	r3, r3, #3
 8005f5c:	60fb      	str	r3, [r7, #12]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f62:	78fb      	ldrb	r3, [r7, #3]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	04d0      	lsls	r0, r2, #19
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4302      	orrs	r2, r0
 8005f6c:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8005f70:	015b      	lsls	r3, r3, #5
 8005f72:	440b      	add	r3, r1
 8005f74:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8005f78:	601a      	str	r2, [r3, #0]
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	3302      	adds	r3, #2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0303 	and.w	r3, r3, #3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d128      	bne.n	8005fe2 <usb_lld_start_out+0x104>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f94:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8005f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d010      	beq.n	8005fc2 <usb_lld_start_out+0xe4>
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8005faa:	78fa      	ldrb	r2, [r7, #3]
 8005fac:	3258      	adds	r2, #88	; 0x58
 8005fae:	0152      	lsls	r2, r2, #5
 8005fb0:	4402      	add	r2, r0
 8005fb2:	6812      	ldr	r2, [r2, #0]
 8005fb4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005fb8:	3358      	adds	r3, #88	; 0x58
 8005fba:	015b      	lsls	r3, r3, #5
 8005fbc:	440b      	add	r3, r1
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	e00f      	b.n	8005fe2 <usb_lld_start_out+0x104>
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8005fcc:	78fa      	ldrb	r2, [r7, #3]
 8005fce:	3258      	adds	r2, #88	; 0x58
 8005fd0:	0152      	lsls	r2, r2, #5
 8005fd2:	4402      	add	r2, r0
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005fda:	3358      	adds	r3, #88	; 0x58
 8005fdc:	015b      	lsls	r3, r3, #5
 8005fde:	440b      	add	r3, r1
 8005fe0:	601a      	str	r2, [r3, #0]
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8005fec:	78fa      	ldrb	r2, [r7, #3]
 8005fee:	3258      	adds	r2, #88	; 0x58
 8005ff0:	0152      	lsls	r2, r2, #5
 8005ff2:	4402      	add	r2, r0
 8005ff4:	6812      	ldr	r2, [r2, #0]
 8005ff6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005ffa:	3358      	adds	r3, #88	; 0x58
 8005ffc:	015b      	lsls	r3, r3, #5
 8005ffe:	440b      	add	r3, r1
 8006000:	601a      	str	r2, [r3, #0]
}
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <uartInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void uartInit(void) {
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0

  uart_lld_init();
 8006010:	f7fc fecc 	bl	8002dac <uart_lld_init>
}
 8006014:	bd80      	pop	{r7, pc}

08006016 <uartObjectInit>:
 *
 * @param[out] uartp    pointer to the @p UARTDriver object
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]

  uartp->state      = UART_STOP;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
  uartp->txstate    = UART_TX_IDLE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	705a      	strb	r2, [r3, #1]
  uartp->rxstate    = UART_RX_IDLE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	709a      	strb	r2, [r3, #2]
  uartp->config     = NULL;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	605a      	str	r2, [r3, #4]

  /* Optional, user-defined initializer.*/
#if defined(UART_DRIVER_EXT_INIT_HOOK)
  UART_DRIVER_EXT_INIT_HOOK(uartp);
#endif
}
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <uartStart>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] config    pointer to the @p UARTConfig object
 *
 * @api
 */
void uartStart(UARTDriver *uartp, const UARTConfig *config) {
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]

  osalDbgCheck((uartp != NULL) && (config != NULL));

  osalSysLock();
 800604a:	f001 ff4c 	bl	8007ee6 <osalSysLock.lto_priv.188>
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uartp->config = config;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	605a      	str	r2, [r3, #4]
  uart_lld_start(uartp);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7fc fec1 	bl	8002ddc <uart_lld_start>
  uartp->state = UART_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2202      	movs	r2, #2
 800605e:	701a      	strb	r2, [r3, #0]
  osalSysUnlock();
 8006060:	f001 ff46 	bl	8007ef0 <osalSysUnlock.lto_priv.186>
}
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <uartStartSend>:
 * @param[in] n         number of data frames to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void uartStartSend(UARTDriver *uartp, size_t n, const void *txbuf) {
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]

  osalDbgCheck((uartp != NULL) && (n > 0U) && (txbuf != NULL));
             
  osalSysLock();
 8006076:	f001 ff36 	bl	8007ee6 <osalSysLock.lto_priv.188>
  osalDbgAssert(uartp->state == UART_READY, "is active");
  osalDbgAssert(uartp->txstate != UART_TX_ACTIVE, "tx active");

  uart_lld_start_send(uartp, n, txbuf);
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7fc ff14 	bl	8002eac <uart_lld_start_send>
  uartp->txstate = UART_TX_ACTIVE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	705a      	strb	r2, [r3, #1]
  osalSysUnlock();
 800608a:	f001 ff31 	bl	8007ef0 <osalSysUnlock.lto_priv.186>
}
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <uartStartReceive>:
 * @param[in] n         number of data frames to receive
 * @param[in] rxbuf     the pointer to the receive buffer
 *
 * @api
 */
void uartStartReceive(UARTDriver *uartp, size_t n, void *rxbuf) {
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]

  osalDbgCheck((uartp != NULL) && (n > 0U) && (rxbuf != NULL));

  osalSysLock();
 80060a0:	f001 ff21 	bl	8007ee6 <osalSysLock.lto_priv.188>
  osalDbgAssert(uartp->state == UART_READY, "is active");
  osalDbgAssert(uartp->rxstate != UART_RX_ACTIVE, "rx active");

  uart_lld_start_receive(uartp, n, rxbuf);
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7fc ff38 	bl	8002f1e <uart_lld_start_receive>
  uartp->rxstate = UART_RX_ACTIVE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	709a      	strb	r2, [r3, #2]
  osalSysUnlock();
 80060b4:	f001 ff1c 	bl	8007ef0 <osalSysUnlock.lto_priv.186>
}
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <port_lock>:
static inline void port_lock(void) {
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	2320      	movs	r3, #32
 80060c6:	607b      	str	r3, [r7, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f383 8811 	msr	BASEPRI, r3
}
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <port_unlock>:
static inline void port_unlock(void) {
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	2300      	movs	r3, #0
 80060e0:	607b      	str	r3, [r7, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f383 8811 	msr	BASEPRI, r3
}
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <port_lock_from_isr>:
static inline void port_lock_from_isr(void) {
 80060f2:	b580      	push	{r7, lr}
 80060f4:	af00      	add	r7, sp, #0
  port_lock();
 80060f6:	f7ff ffe2 	bl	80060be <port_lock>
}
 80060fa:	bd80      	pop	{r7, pc}

080060fc <port_unlock_from_isr>:
static inline void port_unlock_from_isr(void) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  port_unlock();
 8006100:	f7ff ffea 	bl	80060d8 <port_unlock>
}
 8006104:	bd80      	pop	{r7, pc}

08006106 <chSysLock>:
static inline void chSysLock(void) {
 8006106:	b580      	push	{r7, lr}
 8006108:	af00      	add	r7, sp, #0
  port_lock();
 800610a:	f7ff ffd8 	bl	80060be <port_lock>
}
 800610e:	bd80      	pop	{r7, pc}

08006110 <chSysUnlock>:
static inline void chSysUnlock(void) {
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  port_unlock();
 8006114:	f7ff ffe0 	bl	80060d8 <port_unlock>
}
 8006118:	bd80      	pop	{r7, pc}

0800611a <chSysLockFromISR>:
static inline void chSysLockFromISR(void) {
 800611a:	b580      	push	{r7, lr}
 800611c:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 800611e:	f7ff ffe8 	bl	80060f2 <port_lock_from_isr>
}
 8006122:	bd80      	pop	{r7, pc}

08006124 <chSysUnlockFromISR>:
static inline void chSysUnlockFromISR(void) {
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 8006128:	f7ff ffe8 	bl	80060fc <port_unlock_from_isr>
}
 800612c:	bd80      	pop	{r7, pc}

0800612e <osalSysLock.lto_priv.189>:
static inline void osalSysLock(void) {
 800612e:	b580      	push	{r7, lr}
 8006130:	af00      	add	r7, sp, #0
  chSysLock();
 8006132:	f7ff ffe8 	bl	8006106 <chSysLock>
}
 8006136:	bd80      	pop	{r7, pc}

08006138 <osalSysUnlock.lto_priv.187>:
static inline void osalSysUnlock(void) {
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  chSysUnlock();
 800613c:	f7ff ffe8 	bl	8006110 <chSysUnlock>
}
 8006140:	bd80      	pop	{r7, pc}

08006142 <osalSysLockFromISR>:
static inline void osalSysLockFromISR(void) {
 8006142:	b580      	push	{r7, lr}
 8006144:	af00      	add	r7, sp, #0
  chSysLockFromISR();
 8006146:	f7ff ffe8 	bl	800611a <chSysLockFromISR>
}
 800614a:	bd80      	pop	{r7, pc}

0800614c <osalSysUnlockFromISR>:
static inline void osalSysUnlockFromISR(void) {
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  chSysUnlockFromISR();
 8006150:	f7ff ffe8 	bl	8006124 <chSysUnlockFromISR>
}
 8006154:	bd80      	pop	{r7, pc}

08006156 <get_hword>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static uint16_t get_hword(uint8_t *p) {
 8006156:	b480      	push	{r7}
 8006158:	b085      	sub	sp, #20
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  uint16_t hw;

  hw  = (uint16_t)*p++;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	81fb      	strh	r3, [r7, #14]
  hw |= (uint16_t)*p << 8U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	b21a      	sxth	r2, r3
 8006170:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006174:	4313      	orrs	r3, r2
 8006176:	b21b      	sxth	r3, r3
 8006178:	81fb      	strh	r3, [r7, #14]
  return hw;
 800617a:	89fb      	ldrh	r3, [r7, #14]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <set_address>:
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]

  usbp->address = usbp->setup[2];
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
  usb_lld_set_address(usbp);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff fd0b 	bl	8005bb8 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <set_address+0x30>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2101      	movs	r1, #1
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2203      	movs	r2, #3
 80061bc:	701a      	strb	r2, [r3, #0]
}
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <default_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @return              The request handling exit code.
 * @retval false        Request not recognized by the handler or error.
 * @retval true         Request handled.
 */
static bool default_handler(USBDriver *usbp) {
 80061c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061dc:	021b      	lsls	r3, r3, #8
                                        USB_RTYPE_TYPE_MASK)) |
 80061de:	4313      	orrs	r3, r2
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80061e0:	f240 3202 	movw	r2, #770	; 0x302
 80061e4:	4293      	cmp	r3, r2
 80061e6:	f000 8197 	beq.w	8006518 <default_handler+0x354>
 80061ea:	f240 3202 	movw	r2, #770	; 0x302
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d815      	bhi.n	800621e <default_handler+0x5a>
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	f000 8106 	beq.w	8006404 <default_handler+0x240>
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d805      	bhi.n	8006208 <default_handler+0x44>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d027      	beq.n	8006250 <default_handler+0x8c>
 8006200:	2b01      	cmp	r3, #1
 8006202:	f000 80f4 	beq.w	80063ee <default_handler+0x22a>
 8006206:	e1bb      	b.n	8006580 <default_handler+0x3bc>
 8006208:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800620c:	f000 8150 	beq.w	80064b0 <default_handler+0x2ec>
 8006210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006214:	d044      	beq.n	80062a0 <default_handler+0xdc>
 8006216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621a:	d026      	beq.n	800626a <default_handler+0xa6>
 800621c:	e1b0      	b.n	8006580 <default_handler+0x3bc>
 800621e:	f240 6201 	movw	r2, #1537	; 0x601
 8006222:	4293      	cmp	r3, r2
 8006224:	d806      	bhi.n	8006234 <default_handler+0x70>
 8006226:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800622a:	d26c      	bcs.n	8006306 <default_handler+0x142>
 800622c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006230:	d051      	beq.n	80062d6 <default_handler+0x112>
 8006232:	e1a5      	b.n	8006580 <default_handler+0x3bc>
 8006234:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8006238:	f000 8098 	beq.w	800636c <default_handler+0x1a8>
 800623c:	f640 4202 	movw	r2, #3074	; 0xc02
 8006240:	4293      	cmp	r3, r2
 8006242:	f000 80d4 	beq.w	80063ee <default_handler+0x22a>
 8006246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800624a:	f000 8082 	beq.w	8006352 <default_handler+0x18e>
 800624e:	e197      	b.n	8006580 <default_handler+0x3bc>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	639a      	str	r2, [r3, #56]	; 0x38
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8006266:	2301      	movs	r3, #1
 8006268:	e18b      	b.n	8006582 <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006270:	2b01      	cmp	r3, #1
 8006272:	d113      	bne.n	800629c <default_handler+0xd8>
      usbp->status &= ~2U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800627a:	f023 0302 	bic.w	r3, r3, #2
 800627e:	b29a      	uxth	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	639a      	str	r2, [r3, #56]	; 0x38
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	63da      	str	r2, [r3, #60]	; 0x3c
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 8006298:	2301      	movs	r3, #1
 800629a:	e172      	b.n	8006582 <default_handler+0x3be>
    }
    return false;
 800629c:	2300      	movs	r3, #0
 800629e:	e170      	b.n	8006582 <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d113      	bne.n	80062d2 <default_handler+0x10e>
      usbp->status |= 2U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80062b0:	f043 0302 	orr.w	r3, r3, #2
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e157      	b.n	8006582 <default_handler+0x3be>
    }
    return false;
 80062d2:	2300      	movs	r3, #0
 80062d4:	e155      	b.n	8006582 <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d107      	bne.n	80062f0 <default_handler+0x12c>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 80062e6:	2b05      	cmp	r3, #5
 80062e8:	d102      	bne.n	80062f0 <default_handler+0x12c>
      set_address(usbp);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff ff4c 	bl	8006188 <set_address>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	641a      	str	r2, [r3, #64]	; 0x40
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
 8006302:	2301      	movs	r3, #1
 8006304:	e13d      	b.n	8006582 <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	685c      	ldr	r4, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 5047 	ldrb.w	r5, [r3, #71]	; 0x47
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 6046 	ldrb.w	r6, [r3, #70]	; 0x46
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3348      	adds	r3, #72	; 0x48
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff ff1a 	bl	8006156 <get_hword>
 8006322:	4603      	mov	r3, r0
 8006324:	4632      	mov	r2, r6
 8006326:	4629      	mov	r1, r5
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	47a0      	blx	r4
 800632c:	60f8      	str	r0, [r7, #12]
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <default_handler+0x174>
      return false;
 8006334:	2300      	movs	r3, #0
 8006336:	e124      	b.n	8006582 <default_handler+0x3be>
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	639a      	str	r2, [r3, #56]	; 0x38
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	63da      	str	r2, [r3, #60]	; 0x3c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	641a      	str	r2, [r3, #64]	; 0x40
    /*lint -restore*/
    return true;
 800634e:	2301      	movs	r3, #1
 8006350:	e117      	b.n	8006582 <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f103 024f 	add.w	r2, r3, #79	; 0x4f
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	639a      	str	r2, [r3, #56]	; 0x38
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	63da      	str	r2, [r3, #60]	; 0x3c
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8006368:	2301      	movs	r3, #1
 800636a:	e10a      	b.n	8006582 <default_handler+0x3be>
    if (usbp->configuration != usbp->setup[2])
#endif
    {
      /* If the USB device is already active then we have to perform the clear
         procedure on the current configuration.*/
      if (usbp->state == USB_ACTIVE) {
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b04      	cmp	r3, #4
 8006372:	d118      	bne.n	80063a6 <default_handler+0x1e2>
        /* Current configuration cleared.*/
        osalSysLockFromISR ();
 8006374:	f7ff fee5 	bl	8006142 <osalSysLockFromISR>
        usbDisableEndpointsI(usbp);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f98e 	bl	800669a <usbDisableEndpointsI>
        osalSysUnlockFromISR ();
 800637e:	f7ff fee5 	bl	800614c <osalSysUnlockFromISR>
        usbp->configuration = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
        usbp->state = USB_SELECTED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2203      	movs	r2, #3
 800638e:	701a      	strb	r2, [r3, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <default_handler+0x1e2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2103      	movs	r1, #3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	4798      	blx	r3
      }
      if (usbp->setup[2] != 0U) {
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d013      	beq.n	80063d8 <default_handler+0x214>
        /* New configuration.*/
        usbp->configuration = usbp->setup[2];
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
        usbp->state = USB_ACTIVE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2204      	movs	r2, #4
 80063c0:	701a      	strb	r2, [r3, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <default_handler+0x214>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2102      	movs	r1, #2
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	639a      	str	r2, [r3, #56]	; 0x38
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e0c9      	b.n	8006582 <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a66      	ldr	r2, [pc, #408]	; (800658c <default_handler+0x3c8>)
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40
    /*lint -restore*/
    return true;
 8006400:	2301      	movs	r3, #1
 8006402:	e0be      	b.n	8006582 <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800640a:	b25b      	sxtb	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	da27      	bge.n	8006460 <default_handler+0x29c>
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	b2db      	uxtb	r3, r3
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff fd24 	bl	8005e6c <usb_lld_get_status_in>
 8006424:	4603      	mov	r3, r0
 8006426:	2b01      	cmp	r3, #1
 8006428:	d002      	beq.n	8006430 <default_handler+0x26c>
 800642a:	2b02      	cmp	r3, #2
 800642c:	d00b      	beq.n	8006446 <default_handler+0x282>
 800642e:	e015      	b.n	800645c <default_handler+0x298>
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a57      	ldr	r2, [pc, #348]	; (8006590 <default_handler+0x3cc>)
 8006434:	639a      	str	r2, [r3, #56]	; 0x38
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2202      	movs	r2, #2
 800643a:	63da      	str	r2, [r3, #60]	; 0x3c
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
 8006442:	2301      	movs	r3, #1
 8006444:	e09d      	b.n	8006582 <default_handler+0x3be>
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a52      	ldr	r2, [pc, #328]	; (8006594 <default_handler+0x3d0>)
 800644a:	639a      	str	r2, [r3, #56]	; 0x38
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	63da      	str	r2, [r3, #60]	; 0x3c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
 8006458:	2301      	movs	r3, #1
 800645a:	e092      	b.n	8006582 <default_handler+0x3be>
      case EP_STATUS_DISABLED:
      default:
        return false;
 800645c:	2300      	movs	r3, #0
 800645e:	e090      	b.n	8006582 <default_handler+0x3be>
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	b2db      	uxtb	r3, r3
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff fcd9 	bl	8005e26 <usb_lld_get_status_out>
 8006474:	4603      	mov	r3, r0
 8006476:	2b01      	cmp	r3, #1
 8006478:	d002      	beq.n	8006480 <default_handler+0x2bc>
 800647a:	2b02      	cmp	r3, #2
 800647c:	d00b      	beq.n	8006496 <default_handler+0x2d2>
 800647e:	e015      	b.n	80064ac <default_handler+0x2e8>
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a43      	ldr	r2, [pc, #268]	; (8006590 <default_handler+0x3cc>)
 8006484:	639a      	str	r2, [r3, #56]	; 0x38
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2202      	movs	r2, #2
 800648a:	63da      	str	r2, [r3, #60]	; 0x3c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
 8006492:	2301      	movs	r3, #1
 8006494:	e075      	b.n	8006582 <default_handler+0x3be>
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a3e      	ldr	r2, [pc, #248]	; (8006594 <default_handler+0x3d0>)
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	641a      	str	r2, [r3, #64]	; 0x40
        /*lint -restore*/
        return true;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e06a      	b.n	8006582 <default_handler+0x3be>
      case EP_STATUS_DISABLED:
      default:
        return false;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e068      	b.n	8006582 <default_handler+0x3be>
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <default_handler+0x2fa>
      return false;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e061      	b.n	8006582 <default_handler+0x3be>
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80064c4:	f003 030f 	and.w	r3, r3, #15
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01a      	beq.n	8006502 <default_handler+0x33e>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80064d2:	b25b      	sxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	da0a      	bge.n	80064ee <default_handler+0x32a>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fd fcf9 	bl	8003ede <usb_lld_clear_in>
 80064ec:	e009      	b.n	8006502 <default_handler+0x33e>
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80064f4:	f003 030f 	and.w	r3, r3, #15
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7fd fcd3 	bl	8003ea8 <usb_lld_clear_out>
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	639a      	str	r2, [r3, #56]	; 0x38
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	63da      	str	r2, [r3, #60]	; 0x3c
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8006514:	2301      	movs	r3, #1
 8006516:	e034      	b.n	8006582 <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <default_handler+0x362>
      return false;
 8006522:	2300      	movs	r3, #0
 8006524:	e02d      	b.n	8006582 <default_handler+0x3be>
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800652c:	f003 030f 	and.w	r3, r3, #15
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01a      	beq.n	800656a <default_handler+0x3a6>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800653a:	b25b      	sxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	da0a      	bge.n	8006556 <default_handler+0x392>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	b2db      	uxtb	r3, r3
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fd fc8f 	bl	8003e72 <usb_lld_stall_in>
 8006554:	e009      	b.n	800656a <default_handler+0x3a6>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800655c:	f003 030f 	and.w	r3, r3, #15
 8006560:	b2db      	uxtb	r3, r3
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7fd fc69 	bl	8003e3c <usb_lld_stall_out>
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	639a      	str	r2, [r3, #56]	; 0x38
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	63da      	str	r2, [r3, #60]	; 0x3c
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <default_handler+0x3be>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_INTERFACE << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_SET_INTERFACE << 8):
    /* All the above requests are not handled here, if you need them then
       use the hook mechanism and provide handling.*/
  default:
    return false;
 8006580:	2300      	movs	r3, #0
  }
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800658a:	bf00      	nop
 800658c:	08008da0 	.word	0x08008da0
 8006590:	08008da8 	.word	0x08008da8
 8006594:	08008da4 	.word	0x08008da4

08006598 <usbInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void usbInit(void) {
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0

  usb_lld_init();
 800659c:	f7ff f9ee 	bl	800597c <usb_lld_init>
}
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <usbObjectInit>:
 *
 * @param[out] usbp     pointer to the @p USBDriver object
 *
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  unsigned i;

  usbp->state        = USB_STOP;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	701a      	strb	r2, [r3, #0]
  usbp->config       = NULL;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	605a      	str	r2, [r3, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	e00f      	b.n	80065dc <usbObjectInit+0x3a>
    usbp->in_params[i]  = NULL;
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3306      	adds	r3, #6
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	2200      	movs	r2, #0
 80065c8:	605a      	str	r2, [r3, #4]
    usbp->out_params[i] = NULL;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	320a      	adds	r2, #10
 80065d0:	2100      	movs	r1, #0
 80065d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3301      	adds	r3, #1
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d9ec      	bls.n	80065bc <usbObjectInit+0x1a>
  }
  usbp->transmitting = 0;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	811a      	strh	r2, [r3, #8]
  usbp->receiving    = 0;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	815a      	strh	r2, [r3, #10]
}
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  unsigned i;

  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
 8006602:	f7ff fd94 	bl	800612e <osalSysLock.lto_priv.189>
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	605a      	str	r2, [r3, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e009      	b.n	8006626 <usbStart+0x2e>
    usbp->epc[i] = NULL;
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	3302      	adds	r3, #2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	2200      	movs	r2, #0
 800661e:	605a      	str	r2, [r3, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3301      	adds	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b03      	cmp	r3, #3
 800662a:	d9f2      	bls.n	8006612 <usbStart+0x1a>
  }
  usb_lld_start(usbp);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff f9b7 	bl	80059a0 <usb_lld_start>
  usbp->state = USB_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2202      	movs	r2, #2
 8006636:	701a      	strb	r2, [r3, #0]
  osalSysUnlock();
 8006638:	f7ff fd7e 	bl	8006138 <osalSysUnlock.lto_priv.187>
}
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <usbInitEndpointI>:
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	460b      	mov	r3, r1
 800664c:	607a      	str	r2, [r7, #4]
 800664e:	72fb      	strb	r3, [r7, #11]
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;
 8006650:	7afb      	ldrb	r3, [r7, #11]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	3302      	adds	r3, #2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	605a      	str	r2, [r3, #4]

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d006      	beq.n	8006674 <usbInitEndpointI+0x32>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	2210      	movs	r2, #16
 800666c:	2100      	movs	r1, #0
 800666e:	4618      	mov	r0, r3
 8006670:	f002 fb25 	bl	8008cbe <memset>
  }
  if (epcp->out_state != NULL) {
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d006      	beq.n	800668a <usbInitEndpointI+0x48>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	2210      	movs	r2, #16
 8006682:	2100      	movs	r1, #0
 8006684:	4618      	mov	r0, r3
 8006686:	f002 fb1a 	bl	8008cbe <memset>
  }

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	4619      	mov	r1, r3
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f7ff faac 	bl	8005bec <usb_lld_init_endpoint>
}
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <usbDisableEndpointsI>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @iclass
 */
void usbDisableEndpointsI(USBDriver *usbp) {
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");

  usbp->transmitting &= 1U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	891b      	ldrh	r3, [r3, #8]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	811a      	strh	r2, [r3, #8]
  usbp->receiving    &= 1U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	895b      	ldrh	r3, [r3, #10]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	815a      	strh	r2, [r3, #10]

  for (i = 1; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80066be:	2301      	movs	r3, #1
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	e009      	b.n	80066d8 <usbDisableEndpointsI+0x3e>
      if (usbp->epc[i]->out_state != NULL) {
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
    }
#endif
    usbp->epc[i] = NULL;
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3302      	adds	r3, #2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	2200      	movs	r2, #0
 80066d0:	605a      	str	r2, [r3, #4]
  for (i = 1; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3301      	adds	r3, #1
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d9f2      	bls.n	80066c4 <usbDisableEndpointsI+0x2a>
  }

  /* Low level endpoints deactivation.*/
  usb_lld_disable_endpoints(usbp);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff fb94 	bl	8005e0c <usb_lld_disable_endpoints>
}
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <usbStartReceiveI>:
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b086      	sub	sp, #24
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
 80066f6:	460b      	mov	r3, r1
 80066f8:	72fb      	strb	r3, [r7, #11]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	895a      	ldrh	r2, [r3, #10]
 80066fe:	7afb      	ldrb	r3, [r7, #11]
 8006700:	2101      	movs	r1, #1
 8006702:	fa01 f303 	lsl.w	r3, r1, r3
 8006706:	b29b      	uxth	r3, r3
 8006708:	4313      	orrs	r3, r2
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	815a      	strh	r2, [r3, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8006710:	7afb      	ldrb	r3, [r7, #11]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	3302      	adds	r3, #2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	617b      	str	r3, [r7, #20]
  /*lint -restore*/
  osp->rxbuf  = buf;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	609a      	str	r2, [r3, #8]
  osp->rxsize = n;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	601a      	str	r2, [r3, #0]
  osp->rxcnt  = 0;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2200      	movs	r2, #0
 8006730:	605a      	str	r2, [r3, #4]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 8006732:	7afb      	ldrb	r3, [r7, #11]
 8006734:	4619      	mov	r1, r3
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f7ff fbd1 	bl	8005ede <usb_lld_start_out>
}
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 8006742:	b580      	push	{r7, lr}
 8006744:	b086      	sub	sp, #24
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
 800674e:	460b      	mov	r3, r1
 8006750:	72fb      	strb	r3, [r7, #11]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	891a      	ldrh	r2, [r3, #8]
 8006756:	7afb      	ldrb	r3, [r7, #11]
 8006758:	2101      	movs	r1, #1
 800675a:	fa01 f303 	lsl.w	r3, r1, r3
 800675e:	b29b      	uxth	r3, r3
 8006760:	4313      	orrs	r3, r2
 8006762:	b29a      	uxth	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	811a      	strh	r2, [r3, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8006768:	7afb      	ldrb	r3, [r7, #11]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	3302      	adds	r3, #2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	617b      	str	r3, [r7, #20]
  /*lint -restore*/
  isp->txbuf  = buf;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	609a      	str	r2, [r3, #8]
  isp->txsize = n;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	601a      	str	r2, [r3, #0]
  isp->txcnt  = 0;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	2200      	movs	r2, #0
 8006788:	605a      	str	r2, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800678a:	7afb      	ldrb	r3, [r7, #11]
 800678c:	4619      	mov	r1, r3
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7fd faaf 	bl	8003cf2 <usb_lld_start_in>
}
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <_usb_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2202      	movs	r2, #2
 80067a6:	701a      	strb	r2, [r3, #0]

  /* Resetting internal state.*/
  usbp->status        = 0;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  usbp->address       = 0;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
  usbp->configuration = 0;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
  usbp->transmitting  = 0;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	811a      	strh	r2, [r3, #8]
  usbp->receiving     = 0;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	815a      	strh	r2, [r3, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80067cc:	2300      	movs	r3, #0
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	e009      	b.n	80067e6 <_usb_reset+0x4c>
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3302      	adds	r3, #2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	2200      	movs	r2, #0
 80067de:	605a      	str	r2, [r3, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	3301      	adds	r3, #1
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d9f2      	bls.n	80067d2 <_usb_reset+0x38>
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_STP_WAITING;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff f947 	bl	8005a88 <usb_lld_reset>

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <_usb_reset+0x76>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2100      	movs	r1, #0
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	4798      	blx	r3
}
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <_usb_suspend>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_suspend(USBDriver *usbp) {
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  /* No state change, suspend always returns to previous state. */

  /* State transition.*/
  usbp->saved_state = usbp->state;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	781a      	ldrb	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  usbp->state       = USB_SUSPENDED;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2205      	movs	r2, #5
 800682c:	701a      	strb	r2, [r3, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <_usb_suspend+0x2e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2104      	movs	r1, #4
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	4798      	blx	r3
        osalSysUnlockFromISR();
      }
    }
  }
#endif
}
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <_usb_wakeup>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {
 800684a:	b580      	push	{r7, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]

  /* State transition, returning to the previous state.*/
  usbp->state = usbp->saved_state;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	701a      	strb	r2, [r3, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <_usb_wakeup+0x28>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2105      	movs	r1, #5
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4798      	blx	r3
}
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
  size_t max;

  /* Is the EP0 state machine in the correct state for handling setup
     packets?*/
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <_usb_ep0setup+0x1e>
    /* This is unexpected could require handling with a warning event.*/
    /* TODO: handling here.*/

    /* Resetting the EP0 state machine and going ahead.*/
    usbp->ep0state = USB_EP0_STP_WAITING;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  /* Reading the setup data into the driver buffer.*/
  usbReadSetup(usbp, ep, usbp->setup);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff fb06 	bl	8005eb2 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <_usb_ep0setup+0x4e>
      !(usbp->config->requests_hook_cb(usbp))) {
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	4798      	blx	r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	f083 0301 	eor.w	r3, r3, #1
 80068c0:	b2db      	uxtb	r3, r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d027      	beq.n	8006916 <_usb_ep0setup+0x9e>
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d108      	bne.n	80068e6 <_usb_ep0setup+0x6e>
        !default_handler(usbp)) {
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff fc75 	bl	80061c4 <default_handler>
 80068da:	4603      	mov	r3, r0
 80068dc:	f083 0301 	eor.w	r3, r3, #1
 80068e0:	b2db      	uxtb	r3, r3
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d017      	beq.n	8006916 <_usb_ep0setup+0x9e>
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 80068e6:	2100      	movs	r1, #0
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7fd fac2 	bl	8003e72 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 80068ee:	2100      	movs	r1, #0
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7fd faa3 	bl	8003e3c <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <_usb_ep0setup+0x94>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2106      	movs	r1, #6
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2206      	movs	r2, #6
 8006910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006914:	e05b      	b.n	80069ce <_usb_ep0setup+0x156>
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	334a      	adds	r3, #74	; 0x4a
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fc1b 	bl	8006156 <get_hword>
 8006920:	4603      	mov	r3, r0
 8006922:	60fb      	str	r3, [r7, #12]
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	429a      	cmp	r2, r3
 800692c:	d902      	bls.n	8006934 <_usb_ep0setup+0xbc>
    usbp->ep0n = max;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800693a:	b25b      	sxtb	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	da23      	bge.n	8006988 <_usb_ep0setup+0x110>
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d010      	beq.n	800696a <_usb_ep0setup+0xf2>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_IN_TX;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2209      	movs	r2, #9
 800694c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      osalSysLockFromISR();
 8006950:	f7ff fbf7 	bl	8006142 <osalSysLockFromISR>
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695c:	2100      	movs	r1, #0
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff feef 	bl	8006742 <usbStartTransmitI>
      osalSysUnlockFromISR();
 8006964:	f7ff fbf2 	bl	800614c <osalSysUnlockFromISR>
         packet.*/
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, NULL, 0);
      osalSysUnlockFromISR();
 8006968:	e031      	b.n	80069ce <_usb_ep0setup+0x156>
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2214      	movs	r2, #20
 800696e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      osalSysLockFromISR();
 8006972:	f7ff fbe6 	bl	8006142 <osalSysLockFromISR>
      usbStartReceiveI(usbp, 0, NULL, 0);
 8006976:	2300      	movs	r3, #0
 8006978:	2200      	movs	r2, #0
 800697a:	2100      	movs	r1, #0
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff feb4 	bl	80066ea <usbStartReceiveI>
      osalSysUnlockFromISR();
 8006982:	f7ff fbe3 	bl	800614c <osalSysUnlockFromISR>
 8006986:	e022      	b.n	80069ce <_usb_ep0setup+0x156>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698c:	2b00      	cmp	r3, #0
 800698e:	d010      	beq.n	80069b2 <_usb_ep0setup+0x13a>
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_OUT_RX;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2215      	movs	r2, #21
 8006994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      osalSysLockFromISR();
 8006998:	f7ff fbd3 	bl	8006142 <osalSysLockFromISR>
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a4:	2100      	movs	r1, #0
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff fe9f 	bl	80066ea <usbStartReceiveI>
      osalSysUnlockFromISR();
 80069ac:	f7ff fbce 	bl	800614c <osalSysUnlockFromISR>
 80069b0:	e00d      	b.n	80069ce <_usb_ep0setup+0x156>
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	220b      	movs	r2, #11
 80069b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      osalSysLockFromISR();
 80069ba:	f7ff fbc2 	bl	8006142 <osalSysLockFromISR>
      usbStartTransmitI(usbp, 0, NULL, 0);
 80069be:	2300      	movs	r3, #0
 80069c0:	2200      	movs	r2, #0
 80069c2:	2100      	movs	r1, #0
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff febc 	bl	8006742 <usbStartTransmitI>
      osalSysUnlockFromISR();
 80069ca:	f7ff fbbf 	bl	800614c <osalSysUnlockFromISR>
#else
      usb_lld_end_setup(usbp, ep);
#endif
    }
  }
}
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	70fb      	strb	r3, [r7, #3]
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069e6:	2b15      	cmp	r3, #21
 80069e8:	f200 808a 	bhi.w	8006b00 <_usb_ep0in+0x12c>
 80069ec:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <_usb_ep0in+0x20>)
 80069ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f2:	bf00      	nop
 80069f4:	08006ad3 	.word	0x08006ad3
 80069f8:	08006b01 	.word	0x08006b01
 80069fc:	08006b01 	.word	0x08006b01
 8006a00:	08006b01 	.word	0x08006b01
 8006a04:	08006b01 	.word	0x08006b01
 8006a08:	08006b01 	.word	0x08006b01
 8006a0c:	08006ad3 	.word	0x08006ad3
 8006a10:	08006b01 	.word	0x08006b01
 8006a14:	08006b01 	.word	0x08006b01
 8006a18:	08006a4d 	.word	0x08006a4d
 8006a1c:	08006a9b 	.word	0x08006a9b
 8006a20:	08006ab9 	.word	0x08006ab9
 8006a24:	08006b01 	.word	0x08006b01
 8006a28:	08006b01 	.word	0x08006b01
 8006a2c:	08006b01 	.word	0x08006b01
 8006a30:	08006b01 	.word	0x08006b01
 8006a34:	08006b01 	.word	0x08006b01
 8006a38:	08006b01 	.word	0x08006b01
 8006a3c:	08006b01 	.word	0x08006b01
 8006a40:	08006b01 	.word	0x08006b01
 8006a44:	08006ad3 	.word	0x08006ad3
 8006a48:	08006ad3 	.word	0x08006ad3
  case USB_EP0_IN_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	334a      	adds	r3, #74	; 0x4a
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff fb80 	bl	8006156 <get_hword>
 8006a56:	4603      	mov	r3, r0
 8006a58:	60fb      	str	r3, [r7, #12]
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d21a      	bcs.n	8006a9a <_usb_ep0in+0xc6>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	68d2      	ldr	r2, [r2, #12]
 8006a6c:	8a12      	ldrh	r2, [r2, #16]
 8006a6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a72:	fb02 f201 	mul.w	r2, r2, r1
 8006a76:	1a9b      	subs	r3, r3, r2
    if ((usbp->ep0n < max) &&
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10e      	bne.n	8006a9a <_usb_ep0in+0xc6>
      osalSysLockFromISR();
 8006a7c:	f7ff fb61 	bl	8006142 <osalSysLockFromISR>
      usbStartTransmitI(usbp, 0, NULL, 0);
 8006a80:	2300      	movs	r3, #0
 8006a82:	2200      	movs	r2, #0
 8006a84:	2100      	movs	r1, #0
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff fe5b 	bl	8006742 <usbStartTransmitI>
      osalSysUnlockFromISR();
 8006a8c:	f7ff fb5e 	bl	800614c <osalSysUnlockFromISR>
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	220a      	movs	r2, #10
 8006a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006a98:	e032      	b.n	8006b00 <_usb_ep0in+0x12c>
      return;
    }
    /* Falls through.*/
  case USB_EP0_IN_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2214      	movs	r2, #20
 8006a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
 8006aa2:	f7ff fb4e 	bl	8006142 <osalSysLockFromISR>
    usbStartReceiveI(usbp, 0, NULL, 0);
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2100      	movs	r1, #0
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff fe1c 	bl	80066ea <usbStartReceiveI>
    osalSysUnlockFromISR();
 8006ab2:	f7ff fb4b 	bl	800614c <osalSysUnlockFromISR>
 8006ab6:	e023      	b.n	8006b00 <_usb_ep0in+0x12c>
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_IN_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <_usb_ep0in+0xf4>
      usbp->ep0endcb(usbp);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006ad0:	e016      	b.n	8006b00 <_usb_ep0in+0x12c>
    /* Falls through.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7fd f9cc 	bl	8003e72 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8006ada:	2100      	movs	r1, #0
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7fd f9ad 	bl	8003e3c <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <_usb_ep0in+0x124>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2106      	movs	r1, #6
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2206      	movs	r2, #6
 8006afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop

08006b08 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]

  (void)ep;
  switch (usbp->ep0state) {
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b1a:	2b15      	cmp	r3, #21
 8006b1c:	d867      	bhi.n	8006bee <_usb_ep0out+0xe6>
 8006b1e:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <_usb_ep0out+0x1c>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006bc1 	.word	0x08006bc1
 8006b28:	08006bef 	.word	0x08006bef
 8006b2c:	08006bef 	.word	0x08006bef
 8006b30:	08006bef 	.word	0x08006bef
 8006b34:	08006bef 	.word	0x08006bef
 8006b38:	08006bef 	.word	0x08006bef
 8006b3c:	08006bc1 	.word	0x08006bc1
 8006b40:	08006bef 	.word	0x08006bef
 8006b44:	08006bef 	.word	0x08006bef
 8006b48:	08006bc1 	.word	0x08006bc1
 8006b4c:	08006bc1 	.word	0x08006bc1
 8006b50:	08006bc1 	.word	0x08006bc1
 8006b54:	08006bef 	.word	0x08006bef
 8006b58:	08006bef 	.word	0x08006bef
 8006b5c:	08006bef 	.word	0x08006bef
 8006b60:	08006bef 	.word	0x08006bef
 8006b64:	08006bef 	.word	0x08006bef
 8006b68:	08006bef 	.word	0x08006bef
 8006b6c:	08006bef 	.word	0x08006bef
 8006b70:	08006bef 	.word	0x08006bef
 8006b74:	08006b9b 	.word	0x08006b9b
 8006b78:	08006b7d 	.word	0x08006b7d
  case USB_EP0_OUT_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	220b      	movs	r2, #11
 8006b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
 8006b84:	f7ff fadd 	bl	8006142 <osalSysLockFromISR>
    usbStartTransmitI(usbp, 0, NULL, 0);
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fdd7 	bl	8006742 <usbStartTransmitI>
    osalSysUnlockFromISR();
 8006b94:	f7ff fada 	bl	800614c <osalSysUnlockFromISR>
 8006b98:	e029      	b.n	8006bee <_usb_ep0out+0xe6>
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d123      	bne.n	8006bee <_usb_ep0out+0xe6>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <_usb_ep0out+0xae>
      usbp->ep0endcb(usbp);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006bbe:	e016      	b.n	8006bee <_usb_ep0out+0xe6>
    /* Falls through.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fd f955 	bl	8003e72 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8006bc8:	2100      	movs	r1, #0
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fd f936 	bl	8003e3c <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <_usb_ep0out+0xde>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2106      	movs	r1, #6
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2206      	movs	r2, #6
 8006bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006bfe:	4a13      	ldr	r2, [pc, #76]	; (8006c4c <nvicEnableVector+0x58>)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	b2d9      	uxtb	r1, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006c10:	460a      	mov	r2, r1
 8006c12:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006c14:	490d      	ldr	r1, [pc, #52]	; (8006c4c <nvicEnableVector+0x58>)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	095b      	lsrs	r3, r3, #5
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	f002 021f 	and.w	r2, r2, #31
 8006c20:	2001      	movs	r0, #1
 8006c22:	fa00 f202 	lsl.w	r2, r0, r2
 8006c26:	3360      	adds	r3, #96	; 0x60
 8006c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006c2c:	4907      	ldr	r1, [pc, #28]	; (8006c4c <nvicEnableVector+0x58>)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	095b      	lsrs	r3, r3, #5
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	f002 021f 	and.w	r2, r2, #31
 8006c38:	2001      	movs	r0, #1
 8006c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	e000e100 	.word	0xe000e100

08006c50 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8006c54:	2106      	movs	r1, #6
 8006c56:	2006      	movs	r0, #6
 8006c58:	f7ff ffcc 	bl	8006bf4 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 8006c5c:	2106      	movs	r1, #6
 8006c5e:	2007      	movs	r0, #7
 8006c60:	f7ff ffc8 	bl	8006bf4 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 8006c64:	2106      	movs	r1, #6
 8006c66:	2008      	movs	r0, #8
 8006c68:	f7ff ffc4 	bl	8006bf4 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 8006c6c:	2106      	movs	r1, #6
 8006c6e:	2009      	movs	r0, #9
 8006c70:	f7ff ffc0 	bl	8006bf4 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 8006c74:	2106      	movs	r1, #6
 8006c76:	200a      	movs	r0, #10
 8006c78:	f7ff ffbc 	bl	8006bf4 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 8006c7c:	2106      	movs	r1, #6
 8006c7e:	2017      	movs	r0, #23
 8006c80:	f7ff ffb8 	bl	8006bf4 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 8006c84:	2106      	movs	r1, #6
 8006c86:	2028      	movs	r0, #40	; 0x28
 8006c88:	f7ff ffb4 	bl	8006bf4 <nvicEnableVector>
#endif
}
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <hal_lld_backup_domain_init>:
/**
 * @brief   Initializes the backup domain.
 * @note    WARNING! Changing clock source impossible without resetting
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8006c94:	4a0e      	ldr	r2, [pc, #56]	; (8006cd0 <hal_lld_backup_domain_init+0x40>)
 8006c96:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <hal_lld_backup_domain_init+0x40>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c9e:	6013      	str	r3, [r2, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8006ca0:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <hal_lld_backup_domain_init+0x44>)
 8006ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cac:	d006      	beq.n	8006cbc <hal_lld_backup_domain_init+0x2c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8006cae:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <hal_lld_backup_domain_init+0x44>)
 8006cb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006cb4:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8006cb6:	4b07      	ldr	r3, [pc, #28]	; (8006cd4 <hal_lld_backup_domain_init+0x44>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8006cbc:	4a04      	ldr	r2, [pc, #16]	; (8006cd0 <hal_lld_backup_domain_init+0x40>)
 8006cbe:	4b04      	ldr	r3, [pc, #16]	; (8006cd0 <hal_lld_backup_domain_init+0x40>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cc6:	6053      	str	r3, [r2, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	40007000 	.word	0x40007000
 8006cd4:	40023800 	.word	0x40023800

08006cd8 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	af00      	add	r7, sp, #0

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <hal_lld_init+0x74>)
 8006cde:	4b1b      	ldr	r3, [pc, #108]	; (8006d4c <hal_lld_init+0x74>)
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	f063 031f 	orn	r3, r3, #31
 8006ce6:	6113      	str	r3, [r2, #16]
 8006ce8:	4b18      	ldr	r3, [pc, #96]	; (8006d4c <hal_lld_init+0x74>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8006cee:	4b17      	ldr	r3, [pc, #92]	; (8006d4c <hal_lld_init+0x74>)
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	4b16      	ldr	r3, [pc, #88]	; (8006d4c <hal_lld_init+0x74>)
 8006cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cf8:	615a      	str	r2, [r3, #20]
 8006cfa:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <hal_lld_init+0x74>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	615a      	str	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8006d00:	4a12      	ldr	r2, [pc, #72]	; (8006d4c <hal_lld_init+0x74>)
 8006d02:	4b12      	ldr	r3, [pc, #72]	; (8006d4c <hal_lld_init+0x74>)
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	f063 5380 	orn	r3, r3, #268435456	; 0x10000000
 8006d0a:	6213      	str	r3, [r2, #32]
 8006d0c:	4b0f      	ldr	r3, [pc, #60]	; (8006d4c <hal_lld_init+0x74>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8006d12:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <hal_lld_init+0x74>)
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <hal_lld_init+0x74>)
 8006d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d1c:	625a      	str	r2, [r3, #36]	; 0x24
 8006d1e:	4b0b      	ldr	r3, [pc, #44]	; (8006d4c <hal_lld_init+0x74>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8006d24:	4a09      	ldr	r2, [pc, #36]	; (8006d4c <hal_lld_init+0x74>)
 8006d26:	4b09      	ldr	r3, [pc, #36]	; (8006d4c <hal_lld_init+0x74>)
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8006d30:	4a06      	ldr	r2, [pc, #24]	; (8006d4c <hal_lld_init+0x74>)
 8006d32:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <hal_lld_init+0x74>)
 8006d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d3a:	6613      	str	r3, [r2, #96]	; 0x60

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 8006d3c:	f7ff ffa8 	bl	8006c90 <hal_lld_backup_domain_init>

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8006d40:	f7fe f842 	bl	8004dc8 <dmaInit>
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
 8006d44:	f7ff ff84 	bl	8006c50 <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40023800 	.word	0x40023800

08006d50 <stm32_clock_init>:
 * @note    All the involved constants come from the file @p board.h.
 * @note    This function should be invoked just after the system reset.
 *
 * @special
 */
void stm32_clock_init(void) {
 8006d50:	b480      	push	{r7}
 8006d52:	af00      	add	r7, sp, #0
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8006d54:	4b43      	ldr	r3, [pc, #268]	; (8006e64 <stm32_clock_init+0x114>)
 8006d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d5a:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8006d5c:	4b42      	ldr	r3, [pc, #264]	; (8006e68 <stm32_clock_init+0x118>)
 8006d5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006d62:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8006d64:	4a3f      	ldr	r2, [pc, #252]	; (8006e64 <stm32_clock_init+0x114>)
 8006d66:	4b3f      	ldr	r3, [pc, #252]	; (8006e64 <stm32_clock_init+0x114>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8006d70:	4b3c      	ldr	r3, [pc, #240]	; (8006e64 <stm32_clock_init+0x114>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0f9      	beq.n	8006d70 <stm32_clock_init+0x20>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8006d7c:	4a39      	ldr	r2, [pc, #228]	; (8006e64 <stm32_clock_init+0x114>)
 8006d7e:	4b39      	ldr	r3, [pc, #228]	; (8006e64 <stm32_clock_init+0x114>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f023 0303 	bic.w	r3, r3, #3
 8006d86:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8006d88:	4b36      	ldr	r3, [pc, #216]	; (8006e64 <stm32_clock_init+0x114>)
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f003 030c 	and.w	r3, r3, #12
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1f9      	bne.n	8006d88 <stm32_clock_init+0x38>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8006d94:	4a33      	ldr	r2, [pc, #204]	; (8006e64 <stm32_clock_init+0x114>)
 8006d96:	4b33      	ldr	r3, [pc, #204]	; (8006e64 <stm32_clock_init+0x114>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8006d9e:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8006da0:	4b30      	ldr	r3, [pc, #192]	; (8006e64 <stm32_clock_init+0x114>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	609a      	str	r2, [r3, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8006da6:	4a2f      	ldr	r2, [pc, #188]	; (8006e64 <stm32_clock_init+0x114>)
 8006da8:	4b2e      	ldr	r3, [pc, #184]	; (8006e64 <stm32_clock_init+0x114>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006db0:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8006db2:	4b2c      	ldr	r3, [pc, #176]	; (8006e64 <stm32_clock_init+0x114>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0f9      	beq.n	8006db2 <stm32_clock_init+0x62>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8006dbe:	4a29      	ldr	r2, [pc, #164]	; (8006e64 <stm32_clock_init+0x114>)
 8006dc0:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <stm32_clock_init+0x114>)
 8006dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc4:	f043 0301 	orr.w	r3, r3, #1
 8006dc8:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8006dca:	4b26      	ldr	r3, [pc, #152]	; (8006e64 <stm32_clock_init+0x114>)
 8006dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0f9      	beq.n	8006dca <stm32_clock_init+0x7a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8006dd6:	4b23      	ldr	r3, [pc, #140]	; (8006e64 <stm32_clock_init+0x114>)
 8006dd8:	4a24      	ldr	r2, [pc, #144]	; (8006e6c <stm32_clock_init+0x11c>)
 8006dda:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8006ddc:	4a21      	ldr	r2, [pc, #132]	; (8006e64 <stm32_clock_init+0x114>)
 8006dde:	4b21      	ldr	r3, [pc, #132]	; (8006e64 <stm32_clock_init+0x114>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006de6:	6013      	str	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8006de8:	4b1f      	ldr	r3, [pc, #124]	; (8006e68 <stm32_clock_init+0x118>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d0f9      	beq.n	8006de8 <stm32_clock_init+0x98>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8006df4:	4b1b      	ldr	r3, [pc, #108]	; (8006e64 <stm32_clock_init+0x114>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0f9      	beq.n	8006df4 <stm32_clock_init+0xa4>
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8006e00:	4b18      	ldr	r3, [pc, #96]	; (8006e64 <stm32_clock_init+0x114>)
 8006e02:	4a1b      	ldr	r2, [pc, #108]	; (8006e70 <stm32_clock_init+0x120>)
 8006e04:	609a      	str	r2, [r3, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8006e06:	4b1b      	ldr	r3, [pc, #108]	; (8006e74 <stm32_clock_init+0x124>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a1b      	ldr	r2, [pc, #108]	; (8006e78 <stm32_clock_init+0x128>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d109      	bne.n	8006e24 <stm32_clock_init+0xd4>
 8006e10:	4b1a      	ldr	r3, [pc, #104]	; (8006e7c <stm32_clock_init+0x12c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1a      	ldr	r2, [pc, #104]	; (8006e80 <stm32_clock_init+0x130>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d104      	bne.n	8006e24 <stm32_clock_init+0xd4>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8006e1a:	4b1a      	ldr	r3, [pc, #104]	; (8006e84 <stm32_clock_init+0x134>)
 8006e1c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	e003      	b.n	8006e2c <stm32_clock_init+0xdc>
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8006e24:	4b17      	ldr	r3, [pc, #92]	; (8006e84 <stm32_clock_init+0x134>)
 8006e26:	f240 7202 	movw	r2, #1794	; 0x702
 8006e2a:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8006e2c:	4a0d      	ldr	r2, [pc, #52]	; (8006e64 <stm32_clock_init+0x114>)
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <stm32_clock_init+0x114>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f043 0302 	orr.w	r3, r3, #2
 8006e36:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8006e38:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <stm32_clock_init+0x114>)
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 030c 	and.w	r3, r3, #12
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d1f9      	bne.n	8006e38 <stm32_clock_init+0xe8>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8006e44:	4a07      	ldr	r2, [pc, #28]	; (8006e64 <stm32_clock_init+0x114>)
 8006e46:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <stm32_clock_init+0x114>)
 8006e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e4e:	6453      	str	r3, [r2, #68]	; 0x44
 8006e50:	4a04      	ldr	r2, [pc, #16]	; (8006e64 <stm32_clock_init+0x114>)
 8006e52:	4b04      	ldr	r3, [pc, #16]	; (8006e64 <stm32_clock_init+0x114>)
 8006e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e5a:	6653      	str	r3, [r2, #100]	; 0x64
}
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	40023800 	.word	0x40023800
 8006e68:	40007000 	.word	0x40007000
 8006e6c:	07415408 	.word	0x07415408
 8006e70:	38881000 	.word	0x38881000
 8006e74:	e0042000 	.word	0xe0042000
 8006e78:	20006411 	.word	0x20006411
 8006e7c:	e000ed00 	.word	0xe000ed00
 8006e80:	410fc241 	.word	0x410fc241
 8006e84:	40023c00 	.word	0x40023c00

08006e88 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <Vector6C+0x38>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006e96:	607b      	str	r3, [r7, #4]
  DMA1->LIFCR = flags << 0U;
 8006e98:	4a09      	ldr	r2, [pc, #36]	; (8006ec0 <Vector6C+0x38>)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[0].dma_func)
 8006e9e:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <Vector6C+0x3c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d006      	beq.n	8006eb4 <Vector6C+0x2c>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8006ea6:	4b07      	ldr	r3, [pc, #28]	; (8006ec4 <Vector6C+0x3c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a06      	ldr	r2, [pc, #24]	; (8006ec4 <Vector6C+0x3c>)
 8006eac:	6852      	ldr	r2, [r2, #4]
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8006eb4:	f7fa f828 	bl	8000f08 <_port_irq_epilogue>
}
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40026000 	.word	0x40026000
 8006ec4:	2000084c 	.word	0x2000084c

08006ec8 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8006ece:	4b0d      	ldr	r3, [pc, #52]	; (8006f04 <Vector70+0x3c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	099b      	lsrs	r3, r3, #6
 8006ed4:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006ed8:	607b      	str	r3, [r7, #4]
  DMA1->LIFCR = flags << 6U;
 8006eda:	4a0a      	ldr	r2, [pc, #40]	; (8006f04 <Vector70+0x3c>)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	019b      	lsls	r3, r3, #6
 8006ee0:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[1].dma_func)
 8006ee2:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <Vector70+0x40>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d006      	beq.n	8006ef8 <Vector70+0x30>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8006eea:	4b07      	ldr	r3, [pc, #28]	; (8006f08 <Vector70+0x40>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	4a06      	ldr	r2, [pc, #24]	; (8006f08 <Vector70+0x40>)
 8006ef0:	68d2      	ldr	r2, [r2, #12]
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8006ef8:	f7fa f806 	bl	8000f08 <_port_irq_epilogue>
}
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	40026000 	.word	0x40026000
 8006f08:	2000084c 	.word	0x2000084c

08006f0c <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8006f12:	4b0d      	ldr	r3, [pc, #52]	; (8006f48 <Vector74+0x3c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	0c1b      	lsrs	r3, r3, #16
 8006f18:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006f1c:	607b      	str	r3, [r7, #4]
  DMA1->LIFCR = flags << 16U;
 8006f1e:	4a0a      	ldr	r2, [pc, #40]	; (8006f48 <Vector74+0x3c>)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	041b      	lsls	r3, r3, #16
 8006f24:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[2].dma_func)
 8006f26:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <Vector74+0x40>)
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d006      	beq.n	8006f3c <Vector74+0x30>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8006f2e:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <Vector74+0x40>)
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	4a06      	ldr	r2, [pc, #24]	; (8006f4c <Vector74+0x40>)
 8006f34:	6952      	ldr	r2, [r2, #20]
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8006f3c:	f7f9 ffe4 	bl	8000f08 <_port_irq_epilogue>
}
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40026000 	.word	0x40026000
 8006f4c:	2000084c 	.word	0x2000084c

08006f50 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8006f56:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <Vector78+0x3c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	0d9b      	lsrs	r3, r3, #22
 8006f5c:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006f60:	607b      	str	r3, [r7, #4]
  DMA1->LIFCR = flags << 22U;
 8006f62:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <Vector78+0x3c>)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	059b      	lsls	r3, r3, #22
 8006f68:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[3].dma_func)
 8006f6a:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <Vector78+0x40>)
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d006      	beq.n	8006f80 <Vector78+0x30>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8006f72:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <Vector78+0x40>)
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	4a06      	ldr	r2, [pc, #24]	; (8006f90 <Vector78+0x40>)
 8006f78:	69d2      	ldr	r2, [r2, #28]
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8006f80:	f7f9 ffc2 	bl	8000f08 <_port_irq_epilogue>
}
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	40026000 	.word	0x40026000
 8006f90:	2000084c 	.word	0x2000084c

08006f94 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <Vector7C+0x38>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006fa2:	607b      	str	r3, [r7, #4]
  DMA1->HIFCR = flags << 0U;
 8006fa4:	4a09      	ldr	r2, [pc, #36]	; (8006fcc <Vector7C+0x38>)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[4].dma_func)
 8006faa:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <Vector7C+0x3c>)
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d006      	beq.n	8006fc0 <Vector7C+0x2c>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8006fb2:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <Vector7C+0x3c>)
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	4a06      	ldr	r2, [pc, #24]	; (8006fd0 <Vector7C+0x3c>)
 8006fb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8006fc0:	f7f9 ffa2 	bl	8000f08 <_port_irq_epilogue>
}
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	40026000 	.word	0x40026000
 8006fd0:	2000084c 	.word	0x2000084c

08006fd4 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8006fda:	4b0d      	ldr	r3, [pc, #52]	; (8007010 <Vector80+0x3c>)
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	099b      	lsrs	r3, r3, #6
 8006fe0:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8006fe4:	607b      	str	r3, [r7, #4]
  DMA1->HIFCR = flags << 6U;
 8006fe6:	4a0a      	ldr	r2, [pc, #40]	; (8007010 <Vector80+0x3c>)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	019b      	lsls	r3, r3, #6
 8006fec:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[5].dma_func)
 8006fee:	4b09      	ldr	r3, [pc, #36]	; (8007014 <Vector80+0x40>)
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d006      	beq.n	8007004 <Vector80+0x30>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8006ff6:	4b07      	ldr	r3, [pc, #28]	; (8007014 <Vector80+0x40>)
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	4a06      	ldr	r2, [pc, #24]	; (8007014 <Vector80+0x40>)
 8006ffc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	4610      	mov	r0, r2
 8007002:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8007004:	f7f9 ff80 	bl	8000f08 <_port_irq_epilogue>
}
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	40026000 	.word	0x40026000
 8007014:	2000084c 	.word	0x2000084c

08007018 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800701e:	4b0d      	ldr	r3, [pc, #52]	; (8007054 <Vector84+0x3c>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	0c1b      	lsrs	r3, r3, #16
 8007024:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8007028:	607b      	str	r3, [r7, #4]
  DMA1->HIFCR = flags << 16U;
 800702a:	4a0a      	ldr	r2, [pc, #40]	; (8007054 <Vector84+0x3c>)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	041b      	lsls	r3, r3, #16
 8007030:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[6].dma_func)
 8007032:	4b09      	ldr	r3, [pc, #36]	; (8007058 <Vector84+0x40>)
 8007034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007036:	2b00      	cmp	r3, #0
 8007038:	d006      	beq.n	8007048 <Vector84+0x30>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800703a:	4b07      	ldr	r3, [pc, #28]	; (8007058 <Vector84+0x40>)
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	4a06      	ldr	r2, [pc, #24]	; (8007058 <Vector84+0x40>)
 8007040:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	4610      	mov	r0, r2
 8007046:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8007048:	f7f9 ff5e 	bl	8000f08 <_port_irq_epilogue>
}
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	40026000 	.word	0x40026000
 8007058:	2000084c 	.word	0x2000084c

0800705c <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8007062:	4b0d      	ldr	r3, [pc, #52]	; (8007098 <VectorFC+0x3c>)
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	0d9b      	lsrs	r3, r3, #22
 8007068:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800706c:	607b      	str	r3, [r7, #4]
  DMA1->HIFCR = flags << 22U;
 800706e:	4a0a      	ldr	r2, [pc, #40]	; (8007098 <VectorFC+0x3c>)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	059b      	lsls	r3, r3, #22
 8007074:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[7].dma_func)
 8007076:	4b09      	ldr	r3, [pc, #36]	; (800709c <VectorFC+0x40>)
 8007078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707a:	2b00      	cmp	r3, #0
 800707c:	d006      	beq.n	800708c <VectorFC+0x30>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 800707e:	4b07      	ldr	r3, [pc, #28]	; (800709c <VectorFC+0x40>)
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	4a06      	ldr	r2, [pc, #24]	; (800709c <VectorFC+0x40>)
 8007084:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	4610      	mov	r0, r2
 800708a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800708c:	f7f9 ff3c 	bl	8000f08 <_port_irq_epilogue>
}
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	40026000 	.word	0x40026000
 800709c:	2000084c 	.word	0x2000084c

080070a0 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint8_t b;

  osalSysLock();
 80070aa:	f001 fcb0 	bl	8008a0e <osalSysLock.lto_priv.213>
 80070ae:	e00c      	b.n	80070ca <iqGetTimeout+0x2a>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f001 fcbe 	bl	8008a36 <osalThreadEnqueueTimeoutS.lto_priv.226>
 80070ba:	60f8      	str	r0, [r7, #12]
    if (msg < MSG_OK) {
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	da03      	bge.n	80070ca <iqGetTimeout+0x2a>
      osalSysUnlock();
 80070c2:	f001 fca9 	bl	8008a18 <osalSysUnlock.lto_priv.209>
      return msg;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	e024      	b.n	8007114 <iqGetTimeout+0x74>
  while (iqIsEmptyI(iqp)) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0ee      	beq.n	80070b0 <iqGetTimeout+0x10>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	1e5a      	subs	r2, r3, #1
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	1c59      	adds	r1, r3, #1
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6191      	str	r1, [r2, #24]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	72fb      	strb	r3, [r7, #11]
  if (iqp->q_rdptr >= iqp->q_top) {
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d303      	bcc.n	80070fe <iqGetTimeout+0x5e>
    iqp->q_rdptr = iqp->q_buffer;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <iqGetTimeout+0x6e>
    iqp->q_notify(iqp);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	4798      	blx	r3
  }

  osalSysUnlock();
 800710e:	f001 fc83 	bl	8008a18 <osalSysUnlock.lto_priv.209>

  return (msg_t)b;
 8007112:	7afb      	ldrb	r3, [r7, #11]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
  qnotify_t nfy = iqp->q_notify;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	61bb      	str	r3, [r7, #24]
  size_t rd = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	61fb      	str	r3, [r7, #28]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8007134:	f001 fc6b 	bl	8008a0e <osalSysLock.lto_priv.213>
 8007138:	e024      	b.n	8007184 <iqReadTimeout+0x68>

  while (rd < n) {
    size_t done;

    done = iq_read(iqp, bp, n);
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f001 fc93 	bl	8008a6a <iq_read.lto_priv.230>
 8007144:	6178      	str	r0, [r7, #20]
    if (done == (size_t)0) {
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d109      	bne.n	8007160 <iqReadTimeout+0x44>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	4618      	mov	r0, r3
 8007152:	f001 fc70 	bl	8008a36 <osalThreadEnqueueTimeoutS.lto_priv.226>
 8007156:	6138      	str	r0, [r7, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d116      	bne.n	800718c <iqReadTimeout+0x70>
 800715e:	e011      	b.n	8007184 <iqReadTimeout+0x68>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <iqReadTimeout+0x50>
        nfy(iqp);
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 800716c:	f001 fc54 	bl	8008a18 <osalSysUnlock.lto_priv.209>

      rd += done;
 8007170:	69fa      	ldr	r2, [r7, #28]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	4413      	add	r3, r2
 8007176:	61fb      	str	r3, [r7, #28]
      bp += done;
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	4413      	add	r3, r2
 800717e:	60bb      	str	r3, [r7, #8]

      osalSysLock();
 8007180:	f001 fc45 	bl	8008a0e <osalSysLock.lto_priv.213>
  while (rd < n) {
 8007184:	69fa      	ldr	r2, [r7, #28]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	429a      	cmp	r2, r3
 800718a:	d3d6      	bcc.n	800713a <iqReadTimeout+0x1e>
    }
  }

  osalSysUnlock();
 800718c:	f001 fc44 	bl	8008a18 <osalSysUnlock.lto_priv.209>
  return rd;
 8007190:	69fb      	ldr	r3, [r7, #28]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3720      	adds	r7, #32
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
 80071a6:	603b      	str	r3, [r7, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 fc39 	bl	8008a22 <osalThreadQueueObjectInit.lto_priv.229>
  oqp->q_counter = size;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	441a      	add	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	460b      	mov	r3, r1
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	72fb      	strb	r3, [r7, #11]

  osalSysLock();
 80071f2:	f001 fc0c 	bl	8008a0e <osalSysLock.lto_priv.213>
 80071f6:	e00c      	b.n	8007212 <oqPutTimeout+0x2e>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 fc1a 	bl	8008a36 <osalThreadEnqueueTimeoutS.lto_priv.226>
 8007202:	6178      	str	r0, [r7, #20]
    if (msg < MSG_OK) {
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2b00      	cmp	r3, #0
 8007208:	da03      	bge.n	8007212 <oqPutTimeout+0x2e>
      osalSysUnlock();
 800720a:	f001 fc05 	bl	8008a18 <osalSysUnlock.lto_priv.209>
      return msg;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	e024      	b.n	800725c <oqPutTimeout+0x78>
  while (oqIsFullI(oqp)) {
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0ee      	beq.n	80071f8 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	1e5a      	subs	r2, r3, #1
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	1c59      	adds	r1, r3, #1
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	6151      	str	r1, [r2, #20]
 800722e:	7afa      	ldrb	r2, [r7, #11]
 8007230:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	695a      	ldr	r2, [r3, #20]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	429a      	cmp	r2, r3
 800723c:	d303      	bcc.n	8007246 <oqPutTimeout+0x62>
    oqp->q_wrptr = oqp->q_buffer;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <oqPutTimeout+0x72>
    oqp->q_notify(oqp);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	4798      	blx	r3
  }

  osalSysUnlock();
 8007256:	f001 fbdf 	bl	8008a18 <osalSysUnlock.lto_priv.209>

  return MSG_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	695a      	ldr	r2, [r3, #20]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	429a      	cmp	r2, r3
 8007276:	d105      	bne.n	8007284 <oqGetI+0x20>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <oqGetI+0x20>
 8007280:	2301      	movs	r3, #1
 8007282:	e000      	b.n	8007286 <oqGetI+0x22>
 8007284:	2300      	movs	r3, #0
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	b2db      	uxtb	r3, r3
 800728c:	f083 0301 	eor.w	r3, r3, #1
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d01c      	beq.n	80072d0 <oqGetI+0x6c>
    uint8_t b;

    oqp->q_counter++;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	609a      	str	r2, [r3, #8]
    b = *oqp->q_rdptr++;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	1c59      	adds	r1, r3, #1
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6191      	str	r1, [r2, #24]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	73fb      	strb	r3, [r7, #15]
    if (oqp->q_rdptr >= oqp->q_top) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d303      	bcc.n	80072c2 <oqGetI+0x5e>
      oqp->q_rdptr = oqp->q_buffer;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	619a      	str	r2, [r3, #24]
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 fbc3 	bl	8008a52 <osalThreadDequeueNextI.lto_priv.228>

    return (msg_t)b;
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	e001      	b.n	80072d4 <oqGetI+0x70>
  }

  return MSG_TIMEOUT;
 80072d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b088      	sub	sp, #32
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
 80072e8:	603b      	str	r3, [r7, #0]
  qnotify_t nfy = oqp->q_notify;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	61bb      	str	r3, [r7, #24]
  size_t wr = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61fb      	str	r3, [r7, #28]

  osalDbgCheck(n > 0U);

  osalSysLock();
 80072f4:	f001 fb8b 	bl	8008a0e <osalSysLock.lto_priv.213>
 80072f8:	e024      	b.n	8007344 <oqWriteTimeout+0x68>

  while (wr < n) {
    size_t done;

    done = oq_write(oqp, bp, n);
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f001 fc11 	bl	8008b26 <oq_write.lto_priv.227>
 8007304:	6178      	str	r0, [r7, #20]
    if (done == (size_t)0) {
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d109      	bne.n	8007320 <oqWriteTimeout+0x44>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	4618      	mov	r0, r3
 8007312:	f001 fb90 	bl	8008a36 <osalThreadEnqueueTimeoutS.lto_priv.226>
 8007316:	6138      	str	r0, [r7, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d116      	bne.n	800734c <oqWriteTimeout+0x70>
 800731e:	e011      	b.n	8007344 <oqWriteTimeout+0x68>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <oqWriteTimeout+0x50>
        nfy(oqp);
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 800732c:	f001 fb74 	bl	8008a18 <osalSysUnlock.lto_priv.209>

      wr += done;
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	4413      	add	r3, r2
 8007336:	61fb      	str	r3, [r7, #28]
      bp += done;
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	4413      	add	r3, r2
 800733e:	60bb      	str	r3, [r7, #8]

      osalSysLock();
 8007340:	f001 fb65 	bl	8008a0e <osalSysLock.lto_priv.213>
  while (wr < n) {
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	429a      	cmp	r2, r3
 800734a:	d3d6      	bcc.n	80072fa <oqWriteTimeout+0x1e>
    }
  }

  osalSysUnlock();
 800734c:	f001 fb64 	bl	8008a18 <osalSysUnlock.lto_priv.209>
  return wr;
 8007350:	69fb      	ldr	r3, [r7, #28]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3720      	adds	r7, #32
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <chEvtObjectInit.lto_priv.224>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]

  esp->next = (event_listener_t *)esp;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	601a      	str	r2, [r3, #0]
}
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <osalEventObjectInit.lto_priv.220>:
static inline void osalEventObjectInit(event_source_t *esp) {
 8007372:	b580      	push	{r7, lr}
 8007374:	b082      	sub	sp, #8
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  chEvtObjectInit(esp);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff ffed 	bl	800735a <chEvtObjectInit.lto_priv.224>
}
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <osalEventBroadcastFlagsI.lto_priv.218>:
                                            eventflags_t flags) {
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7fb fa76 	bl	8002884 <chEvtBroadcastFlagsI>
}
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <_write.lto_priv.19>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80073b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	f7ff ff90 	bl	80072dc <oqWriteTimeout>
 80073bc:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <_read.lto_priv.21>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	607a      	str	r2, [r7, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f103 000c 	add.w	r0, r3, #12
 80073d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	f7ff fe9c 	bl	800711c <iqReadTimeout>
 80073e4:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <_put.lto_priv.15>:

static msg_t _put(void *ip, uint8_t b) {
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b082      	sub	sp, #8
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	460b      	mov	r3, r1
 80073f8:	70fb      	strb	r3, [r7, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3330      	adds	r3, #48	; 0x30
 80073fe:	78f9      	ldrb	r1, [r7, #3]
 8007400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff feed 	bl	80071e4 <oqPutTimeout>
 800740a:	4603      	mov	r3, r0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <_get.lto_priv.12>:

static msg_t _get(void *ip) {
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	330c      	adds	r3, #12
 8007420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007424:	4618      	mov	r0, r3
 8007426:	f7ff fe3b 	bl	80070a0 <iqGetTimeout>
 800742a:	4603      	mov	r3, r0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <_putt.lto_priv.23>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	460b      	mov	r3, r1
 800743e:	607a      	str	r2, [r7, #4]
 8007440:	72fb      	strb	r3, [r7, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3330      	adds	r3, #48	; 0x30
 8007446:	7af9      	ldrb	r1, [r7, #11]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff feca 	bl	80071e4 <oqPutTimeout>
 8007450:	4603      	mov	r3, r0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <_gett.lto_priv.25>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	330c      	adds	r3, #12
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff fe18 	bl	80070a0 <iqGetTimeout>
 8007470:	4603      	mov	r3, r0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <_writet.lto_priv.27>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 800747a:	b580      	push	{r7, lr}
 800747c:	b084      	sub	sp, #16
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	607a      	str	r2, [r7, #4]
 8007486:	603b      	str	r3, [r7, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	f7ff ff22 	bl	80072dc <oqWriteTimeout>
 8007498:	4603      	mov	r3, r0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <_readt.lto_priv.29>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	607a      	str	r2, [r7, #4]
 80074ae:	603b      	str	r3, [r7, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f103 000c 	add.w	r0, r3, #12
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	68b9      	ldr	r1, [r7, #8]
 80074bc:	f7ff fe2e 	bl	800711c <iqReadTimeout>
 80074c0:	4603      	mov	r3, r0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <_ctl.lto_priv.31>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 80074ca:	b480      	push	{r7}
 80074cc:	b087      	sub	sp, #28
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
  SerialDriver *sdp = (SerialDriver *)ip;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	617b      	str	r3, [r7, #20]

  osalDbgCheck(sdp != NULL);

  switch (operation) {
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d000      	beq.n	80074e2 <_ctl.lto_priv.31+0x18>
 80074e0:	2b01      	cmp	r3, #1
    return sd_lld_control(sdp, operation, arg);
#else
    break;
#endif
  }
  return MSG_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	371c      	adds	r7, #28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0

  sd_lld_init();
 80074f4:	f7fd f93c 	bl	8004770 <sd_lld_init>
}
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af02      	add	r7, sp, #8
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]

  sdp->vmt = &vmt;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4a12      	ldr	r2, [pc, #72]	; (8007554 <sdObjectInit+0x58>)
 800750c:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3304      	adds	r3, #4
 8007512:	4618      	mov	r0, r3
 8007514:	f7ff ff2d 	bl	8007372 <osalEventObjectInit.lto_priv.220>
  sdp->state = SD_STOP;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2201      	movs	r2, #1
 800751c:	721a      	strb	r2, [r3, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f103 000c 	add.w	r0, r3, #12
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2210      	movs	r2, #16
 8007532:	f001 fb56 	bl	8008be2 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2210      	movs	r2, #16
 800754a:	f7ff fe26 	bl	800719a <oqObjectInit>
}
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	08008d50 	.word	0x08008d50

08007558 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	70fb      	strb	r3, [r7, #3]

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d105      	bne.n	8007578 <sdIncomingDataI+0x20>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3304      	adds	r3, #4
 8007570:	2104      	movs	r1, #4
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff ff07 	bl	8007386 <osalEventBroadcastFlagsI.lto_priv.218>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	330c      	adds	r3, #12
 800757c:	78fa      	ldrb	r2, [r7, #3]
 800757e:	4611      	mov	r1, r2
 8007580:	4618      	mov	r0, r3
 8007582:	f001 fb53 	bl	8008c2c <iqPutI>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	da06      	bge.n	800759a <sdIncomingDataI+0x42>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3304      	adds	r3, #4
 8007590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff fef6 	bl	8007386 <osalEventBroadcastFlagsI.lto_priv.218>
}
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <port_lock.lto_priv.203>:
static inline void port_lock(void) {
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	2320      	movs	r3, #32
 80075a8:	607b      	str	r3, [r7, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f383 8811 	msr	BASEPRI, r3
}
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <port_unlock.lto_priv.199>:
static inline void port_unlock(void) {
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	2300      	movs	r3, #0
 80075c2:	607b      	str	r3, [r7, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f383 8811 	msr	BASEPRI, r3
}
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <port_lock_from_isr>:
static inline void port_lock_from_isr(void) {
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
  port_lock();
 80075d8:	f7ff ffe2 	bl	80075a0 <port_lock.lto_priv.203>
}
 80075dc:	bd80      	pop	{r7, pc}

080075de <port_unlock_from_isr>:
static inline void port_unlock_from_isr(void) {
 80075de:	b580      	push	{r7, lr}
 80075e0:	af00      	add	r7, sp, #0
  port_unlock();
 80075e2:	f7ff ffea 	bl	80075ba <port_unlock.lto_priv.199>
}
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <chSysLock.lto_priv.195>:
static inline void chSysLock(void) {
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
  port_lock();
 80075ec:	f7ff ffd8 	bl	80075a0 <port_lock.lto_priv.203>
}
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <chSysUnlock.lto_priv.191>:
static inline void chSysUnlock(void) {
 80075f2:	b580      	push	{r7, lr}
 80075f4:	af00      	add	r7, sp, #0
  port_unlock();
 80075f6:	f7ff ffe0 	bl	80075ba <port_unlock.lto_priv.199>
}
 80075fa:	bd80      	pop	{r7, pc}

080075fc <chSysLockFromISR>:
static inline void chSysLockFromISR(void) {
 80075fc:	b580      	push	{r7, lr}
 80075fe:	af00      	add	r7, sp, #0
  port_lock_from_isr();
 8007600:	f7ff ffe8 	bl	80075d4 <port_lock_from_isr>
}
 8007604:	bd80      	pop	{r7, pc}

08007606 <chSysUnlockFromISR>:
static inline void chSysUnlockFromISR(void) {
 8007606:	b580      	push	{r7, lr}
 8007608:	af00      	add	r7, sp, #0
  port_unlock_from_isr();
 800760a:	f7ff ffe8 	bl	80075de <port_unlock_from_isr>
}
 800760e:	bd80      	pop	{r7, pc}

08007610 <chEvtObjectInit.lto_priv.225>:
static inline void chEvtObjectInit(event_source_t *esp) {
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  esp->next = (event_listener_t *)esp;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	601a      	str	r2, [r3, #0]
}
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <osalSysLock.lto_priv.215>:
static inline void osalSysLock(void) {
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0
  chSysLock();
 800762c:	f7ff ffdc 	bl	80075e8 <chSysLock.lto_priv.195>
}
 8007630:	bd80      	pop	{r7, pc}

08007632 <osalSysUnlock.lto_priv.211>:
static inline void osalSysUnlock(void) {
 8007632:	b580      	push	{r7, lr}
 8007634:	af00      	add	r7, sp, #0
  chSysUnlock();
 8007636:	f7ff ffdc 	bl	80075f2 <chSysUnlock.lto_priv.191>
}
 800763a:	bd80      	pop	{r7, pc}

0800763c <osalSysLockFromISR>:
static inline void osalSysLockFromISR(void) {
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  chSysLockFromISR();
 8007640:	f7ff ffdc 	bl	80075fc <chSysLockFromISR>
}
 8007644:	bd80      	pop	{r7, pc}

08007646 <osalSysUnlockFromISR>:
static inline void osalSysUnlockFromISR(void) {
 8007646:	b580      	push	{r7, lr}
 8007648:	af00      	add	r7, sp, #0
  chSysUnlockFromISR();
 800764a:	f7ff ffdc 	bl	8007606 <chSysUnlockFromISR>
}
 800764e:	bd80      	pop	{r7, pc}

08007650 <osalThreadDequeueAllI.lto_priv.223>:
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  chThdDequeueAllI(tqp, msg);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7fb fadf 	bl	8002c20 <chThdDequeueAllI>
}
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <osalEventObjectInit.lto_priv.221>:
static inline void osalEventObjectInit(event_source_t *esp) {
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  chEvtObjectInit(esp);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff ffcd 	bl	8007610 <chEvtObjectInit.lto_priv.225>
}
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <osalEventBroadcastFlagsI.lto_priv.219>:
                                            eventflags_t flags) {
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7fb f8fb 	bl	8002884 <chEvtBroadcastFlagsI>
}
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <sdu_start_receive>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static bool sdu_start_receive(SerialUSBDriver *sdup) {
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint8_t *buf;

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d103      	bne.n	80076b2 <sdu_start_receive+0x1e>
      (sdup->state != SDU_READY)) {
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	7a1b      	ldrb	r3, [r3, #8]
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d001      	beq.n	80076b6 <sdu_start_receive+0x22>
    return true;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e02b      	b.n	800770e <sdu_start_receive+0x7a>
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	895a      	ldrh	r2, [r3, #10]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80076c6:	791b      	ldrb	r3, [r3, #4]
 80076c8:	4619      	mov	r1, r3
 80076ca:	2301      	movs	r3, #1
 80076cc:	408b      	lsls	r3, r1
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	4013      	ands	r3, r2
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <sdu_start_receive+0x48>
    return true;
 80076d8:	2301      	movs	r3, #1
 80076da:	e018      	b.n	800770e <sdu_start_receive+0x7a>
  }

  /* Checking if there is a buffer ready for incoming data.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	330c      	adds	r3, #12
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 fdde 	bl	80082a2 <ibqGetEmptyBufferI>
 80076e6:	60f8      	str	r0, [r7, #12]
  if (buf == NULL) {
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <sdu_start_receive+0x5e>
    return true;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e00d      	b.n	800770e <sdu_start_receive+0x7a>
  }

  /* Buffer found, starting a new transaction.*/
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007700:	7959      	ldrb	r1, [r3, #5]
 8007702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	f7fe ffef 	bl	80066ea <usbStartReceiveI>
                   buf, SERIAL_USB_BUFFERS_SIZE);

  return false;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <_write.lto_priv.20>:

/*
 * Interface implementation.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	607a      	str	r2, [r7, #4]

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8007728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	68b9      	ldr	r1, [r7, #8]
 8007730:	f001 f84c 	bl	80087cc <obqWriteTimeout>
 8007734:	4603      	mov	r3, r0
                         n, TIME_INFINITE);
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <_read.lto_priv.22>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	607a      	str	r2, [r7, #4]

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f103 000c 	add.w	r0, r3, #12
 8007750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	f000 fe71 	bl	800843e <ibqReadTimeout>
 800775c:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <_put.lto_priv.16>:

static msg_t _put(void *ip, uint8_t b) {
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	460b      	mov	r3, r1
 8007770:	70fb      	strb	r3, [r7, #3]

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3344      	adds	r3, #68	; 0x44
 8007776:	78f9      	ldrb	r1, [r7, #3]
 8007778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800777c:	4618      	mov	r0, r3
 800777e:	f000 ffef 	bl	8008760 <obqPutTimeout>
 8007782:	4603      	mov	r3, r0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <_get.lto_priv.13>:

static msg_t _get(void *ip) {
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	330c      	adds	r3, #12
 8007798:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fe1e 	bl	80083de <ibqGetTimeout>
 80077a2:	4603      	mov	r3, r0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <_putt.lto_priv.24>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	460b      	mov	r3, r1
 80077b6:	607a      	str	r2, [r7, #4]
 80077b8:	72fb      	strb	r3, [r7, #11]

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3344      	adds	r3, #68	; 0x44
 80077be:	7af9      	ldrb	r1, [r7, #11]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 ffcc 	bl	8008760 <obqPutTimeout>
 80077c8:	4603      	mov	r3, r0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <_gett.lto_priv.26>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	330c      	adds	r3, #12
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fdfb 	bl	80083de <ibqGetTimeout>
 80077e8:	4603      	mov	r3, r0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <_writet.lto_priv.28>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	607a      	str	r2, [r7, #4]
 80077fe:	603b      	str	r3, [r7, #0]

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	f000 ffde 	bl	80087cc <obqWriteTimeout>
 8007810:	4603      	mov	r3, r0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <_readt.lto_priv.30>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	603b      	str	r3, [r7, #0]

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f103 000c 	add.w	r0, r3, #12
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	68b9      	ldr	r1, [r7, #8]
 8007834:	f000 fe03 	bl	800843e <ibqReadTimeout>
 8007838:	4603      	mov	r3, r0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <_ctl.lto_priv.32>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8007842:	b480      	push	{r7}
 8007844:	b087      	sub	sp, #28
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	607a      	str	r2, [r7, #4]
  SerialUSBDriver *sdup = (SerialUSBDriver *)ip;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	617b      	str	r3, [r7, #20]

  osalDbgCheck(sdup != NULL);

  switch (operation) {
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d000      	beq.n	800785a <_ctl.lto_priv.32+0x18>
 8007858:	2b01      	cmp	r3, #1
    return sdu_lld_control(sdup, operation, arg);
#else
    break;
#endif
  }
  return MSG_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	371c      	adds	r7, #28
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <ibnotify>:
/**
 * @brief   Notification of empty buffer released into the input buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void ibnotify(io_buffers_queue_t *bqp) {
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007874:	60fb      	str	r3, [r7, #12]
  (void) sdu_start_receive(sdup);
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f7ff ff0c 	bl	8007694 <sdu_start_receive>
}
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <obnotify>:
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 8007882:	b580      	push	{r7, lr}
 8007884:	b086      	sub	sp, #24
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788e:	617b      	str	r3, [r7, #20]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b04      	cmp	r3, #4
 800789c:	d12d      	bne.n	80078fa <obnotify+0x78>
      (sdup->state != SDU_READY)) {
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	7a1b      	ldrb	r3, [r3, #8]
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d129      	bne.n	80078fa <obnotify+0x78>
    return;
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	891a      	ldrh	r2, [r3, #8]
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80078b6:	791b      	ldrb	r3, [r3, #4]
 80078b8:	4619      	mov	r1, r3
 80078ba:	2301      	movs	r3, #1
 80078bc:	408b      	lsls	r3, r1
 80078be:	b29b      	uxth	r3, r3
 80078c0:	4013      	ands	r3, r2
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d119      	bne.n	80078fc <obnotify+0x7a>
    /* Trying to get a full buffer.*/
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	3344      	adds	r3, #68	; 0x44
 80078cc:	f107 020c 	add.w	r2, r7, #12
 80078d0:	4611      	mov	r1, r2
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 fea1 	bl	800861a <obqGetFullBufferI>
 80078d8:	6138      	str	r0, [r7, #16]
    if (buf != NULL) {
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00d      	beq.n	80078fc <obnotify+0x7a>
      /* Buffer found, starting a new transaction.*/
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80078ee:	7919      	ldrb	r1, [r3, #4]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	f7fe ff25 	bl	8006742 <usbStartTransmitI>
 80078f8:	e000      	b.n	80078fc <obnotify+0x7a>
    return;
 80078fa:	bf00      	nop
    }
  }
}
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <sduInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
 8007902:	b480      	push	{r7}
 8007904:	af00      	add	r7, sp, #0
}
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
	...

08007910 <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af04      	add	r7, sp, #16
 8007916:	6078      	str	r0, [r7, #4]

  sdup->vmt = &vmt;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a17      	ldr	r2, [pc, #92]	; (8007978 <sduObjectInit+0x68>)
 800791c:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdup->event);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3304      	adds	r3, #4
 8007922:	4618      	mov	r0, r3
 8007924:	f7ff fea0 	bl	8007668 <osalEventObjectInit.lto_priv.221>
  sdup->state = SDU_STOP;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	721a      	strb	r2, [r3, #8]
  ibqObjectInit(&sdup->ibqueue, true, sdup->ib,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f103 000c 	add.w	r0, r3, #12
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	9302      	str	r3, [sp, #8]
 800793e:	4b0f      	ldr	r3, [pc, #60]	; (800797c <sduObjectInit+0x6c>)
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	2302      	movs	r3, #2
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800794a:	2101      	movs	r1, #1
 800794c:	f000 fc51 	bl	80081f2 <ibqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                ibnotify, sdup);
  obqObjectInit(&sdup->obqueue, true, sdup->ob,
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f503 7221 	add.w	r2, r3, #644	; 0x284
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	9302      	str	r3, [sp, #8]
 8007960:	4b07      	ldr	r3, [pc, #28]	; (8007980 <sduObjectInit+0x70>)
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	2302      	movs	r3, #2
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800796c:	2101      	movs	r1, #1
 800796e:	f000 fdfb 	bl	8008568 <obqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                obnotify, sdup);
}
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	08008d78 	.word	0x08008d78
 800797c:	08007869 	.word	0x08007869
 8007980:	08007883 	.word	0x08007883

08007984 <sduStart>:
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  USBDriver *usbp = config->usbp;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60fb      	str	r3, [r7, #12]

  osalDbgCheck(sdup != NULL);

  osalSysLock();
 8007994:	f7ff fe48 	bl	8007628 <osalSysLock.lto_priv.215>
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	791b      	ldrb	r3, [r3, #4]
 800799c:	3b01      	subs	r3, #1
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	3306      	adds	r3, #6
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	605a      	str	r2, [r3, #4]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	795b      	ldrb	r3, [r3, #5]
 80079ae:	1e5a      	subs	r2, r3, #1
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	320a      	adds	r2, #10
 80079b4:	6879      	ldr	r1, [r7, #4]
 80079b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	799b      	ldrb	r3, [r3, #6]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d008      	beq.n	80079d4 <sduStart+0x50>
    usbp->in_params[config->int_in - 1U]  = sdup;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	799b      	ldrb	r3, [r3, #6]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	3306      	adds	r3, #6
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	605a      	str	r2, [r3, #4]
  }
  sdup->config = config;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
  sdup->state = SDU_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	721a      	strb	r2, [r3, #8]
  osalSysUnlock();
 80079e2:	f7ff fe26 	bl	8007632 <osalSysUnlock.lto_priv.211>
}
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <sduSuspendHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSuspendHookI(SerialUSBDriver *sdup) {
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]

  chnAddFlagsI(sdup, CHN_DISCONNECTED);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3304      	adds	r3, #4
 80079f8:	2102      	movs	r1, #2
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff fe3e 	bl	800767c <osalEventBroadcastFlagsI.lto_priv.219>
  bqSuspendI(&sdup->ibqueue);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	751a      	strb	r2, [r3, #20]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	330c      	adds	r3, #12
 8007a0a:	f06f 0101 	mvn.w	r1, #1
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7ff fe1e 	bl	8007650 <osalThreadDequeueAllI.lto_priv.223>
  bqSuspendI(&sdup->obqueue);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3344      	adds	r3, #68	; 0x44
 8007a20:	f06f 0101 	mvn.w	r1, #1
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff fe13 	bl	8007650 <osalThreadDequeueAllI.lto_priv.223>
}
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <sduWakeupHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduWakeupHookI(SerialUSBDriver *sdup) {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]

  chnAddFlagsI(sdup, CHN_CONNECTED);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff fe1c 	bl	800767c <osalEventBroadcastFlagsI.lto_priv.219>
  bqResumeX(&sdup->ibqueue);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	751a      	strb	r2, [r3, #20]
  bqResumeX(&sdup->obqueue);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]

  ibqResetI(&sdup->ibqueue);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	330c      	adds	r3, #12
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 fbfe 	bl	8008266 <ibqResetI>
  bqResumeX(&sdup->ibqueue);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	751a      	strb	r2, [r3, #20]
  obqResetI(&sdup->obqueue);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3344      	adds	r3, #68	; 0x44
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 fdb1 	bl	80085dc <obqResetI>
  bqResumeX(&sdup->obqueue);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  chnAddFlagsI(sdup, CHN_CONNECTED);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3304      	adds	r3, #4
 8007a86:	2101      	movs	r1, #1
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff fdf7 	bl	800767c <osalEventBroadcastFlagsI.lto_priv.219>
  (void) sdu_start_receive(sdup);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff fe00 	bl	8007694 <sdu_start_receive>
}
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <sduRequestsHook>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @return              The hook status.
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aae:	2b20      	cmp	r3, #32
 8007ab0:	d12c      	bne.n	8007b0c <sduRequestsHook+0x70>
    switch (usbp->setup[1]) {
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ab8:	2b21      	cmp	r3, #33	; 0x21
 8007aba:	d004      	beq.n	8007ac6 <sduRequestsHook+0x2a>
 8007abc:	2b22      	cmp	r3, #34	; 0x22
 8007abe:	d018      	beq.n	8007af2 <sduRequestsHook+0x56>
 8007ac0:	2b20      	cmp	r3, #32
 8007ac2:	d00b      	beq.n	8007adc <sduRequestsHook+0x40>
 8007ac4:	e020      	b.n	8007b08 <sduRequestsHook+0x6c>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a14      	ldr	r2, [pc, #80]	; (8007b1c <sduRequestsHook+0x80>)
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2207      	movs	r2, #7
 8007ad0:	63da      	str	r2, [r3, #60]	; 0x3c
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e018      	b.n	8007b0e <sduRequestsHook+0x72>
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a0f      	ldr	r2, [pc, #60]	; (8007b1c <sduRequestsHook+0x80>)
 8007ae0:	639a      	str	r2, [r3, #56]	; 0x38
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2207      	movs	r2, #7
 8007ae6:	63da      	str	r2, [r3, #60]	; 0x3c
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e00d      	b.n	8007b0e <sduRequestsHook+0x72>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	639a      	str	r2, [r3, #56]	; 0x38
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	63da      	str	r2, [r3, #60]	; 0x3c
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e002      	b.n	8007b0e <sduRequestsHook+0x72>
    default:
      return false;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	e000      	b.n	8007b0e <sduRequestsHook+0x72>
    }
  }
  return false;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	20000800 	.word	0x20000800

08007b20 <sduSOFHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSOFHookI(SerialUSBDriver *sdup) {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d131      	bne.n	8007b9a <sduSOFHookI+0x7a>
      (sdup->state != SDU_READY)) {
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	7a1b      	ldrb	r3, [r3, #8]
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d12d      	bne.n	8007b9a <sduSOFHookI+0x7a>
    return;
  }

  /* If there is already a transaction ongoing then another one cannot be
     started.*/
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	891a      	ldrh	r2, [r3, #8]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007b4e:	791b      	ldrb	r3, [r3, #4]
 8007b50:	4619      	mov	r1, r3
 8007b52:	2301      	movs	r3, #1
 8007b54:	408b      	lsls	r3, r1
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	4013      	ands	r3, r2
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d11c      	bne.n	8007b9a <sduSOFHookI+0x7a>
    return;
  }

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3344      	adds	r3, #68	; 0x44
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 feca 	bl	80088fe <obqTryFlushI>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d014      	beq.n	8007b9a <sduSOFHookI+0x7a>
    size_t n;
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3344      	adds	r3, #68	; 0x44
 8007b74:	f107 0208 	add.w	r2, r7, #8
 8007b78:	4611      	mov	r1, r2
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 fd4d 	bl	800861a <obqGetFullBufferI>
 8007b80:	60f8      	str	r0, [r7, #12]

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007b88:	6818      	ldr	r0, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007b90:	7919      	ldrb	r1, [r3, #4]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	f7fe fdd4 	bl	8006742 <usbStartTransmitI>
  }
}
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8007bac:	78fb      	ldrb	r3, [r7, #3]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	3306      	adds	r3, #6
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	617b      	str	r3, [r7, #20]

  if (sdup == NULL) {
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d051      	beq.n	8007c66 <sduDataTransmitted+0xc6>
    return;
  }

  osalSysLockFromISR();
 8007bc2:	f7ff fd3b 	bl	800763c <osalSysLockFromISR>

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	3304      	adds	r3, #4
 8007bca:	2108      	movs	r1, #8
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff fd55 	bl	800767c <osalEventBroadcastFlagsI.lto_priv.219>

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8007bd2:	78fb      	ldrb	r3, [r7, #3]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	3302      	adds	r3, #2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <sduDataTransmitted+0x50>
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	3344      	adds	r3, #68	; 0x44
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 fd3c 	bl	8008668 <obqReleaseEmptyBufferI>
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	3344      	adds	r3, #68	; 0x44
 8007bf4:	f107 020c 	add.w	r2, r7, #12
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fd0d 	bl	800861a <obqGetFullBufferI>
 8007c00:	6138      	str	r0, [r7, #16]

  if (buf != NULL) {
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d006      	beq.n	8007c16 <sduDataTransmitted+0x76>
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	78f9      	ldrb	r1, [r7, #3]
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7fe fd97 	bl	8006742 <usbStartTransmitI>
 8007c14:	e024      	b.n	8007c60 <sduDataTransmitted+0xc0>
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8007c16:	78fb      	ldrb	r3, [r7, #3]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	3302      	adds	r3, #2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d01a      	beq.n	8007c60 <sduDataTransmitted+0xc0>
           ((usbp->epc[ep]->in_state->txsize &
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	3302      	adds	r3, #2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	681a      	ldr	r2, [r3, #0]
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	3302      	adds	r3, #2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	8a1b      	ldrh	r3, [r3, #16]
 8007c48:	3b01      	subs	r3, #1
           ((usbp->epc[ep]->in_state->txsize &
 8007c4a:	4013      	ands	r3, r2
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d107      	bne.n	8007c60 <sduDataTransmitted+0xc0>
    /* Transmit zero sized packet in case the last one has maximum allowed
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8007c56:	78f9      	ldrb	r1, [r7, #3]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7fe fd71 	bl	8006742 <usbStartTransmitI>
  }
  else {
    /* Nothing to transmit.*/
  }

  osalSysUnlockFromISR();
 8007c60:	f7ff fcf1 	bl	8007646 <osalSysUnlockFromISR>
 8007c64:	e000      	b.n	8007c68 <sduDataTransmitted+0xc8>
    return;
 8007c66:	bf00      	nop
}
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <sduDataReceived>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	460b      	mov	r3, r1
 8007c78:	70fb      	strb	r3, [r7, #3]
  size_t size;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	1e5a      	subs	r2, r3, #1
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	320a      	adds	r2, #10
 8007c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c86:	60fb      	str	r3, [r7, #12]

  if (sdup == NULL) {
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d024      	beq.n	8007cd8 <sduDataReceived+0x6a>
    return;
  }

  osalSysLockFromISR();
 8007c8e:	f7ff fcd5 	bl	800763c <osalSysLockFromISR>

  /* Checking for zero-size transactions.*/
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8007ca0:	795b      	ldrb	r3, [r3, #5]
 8007ca2:	3302      	adds	r3, #2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	60bb      	str	r3, [r7, #8]
                                       sdup->config->bulk_out);
  if (size > (size_t)0) {
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00b      	beq.n	8007cce <sduDataReceived+0x60>
    /* Signaling that data is available in the input queue.*/
    chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	2104      	movs	r1, #4
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7ff fcdd 	bl	800767c <osalEventBroadcastFlagsI.lto_priv.219>

    /* Posting the filled buffer in the queue.*/
    ibqPostFullBufferI(&sdup->ibqueue, size);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	330c      	adds	r3, #12
 8007cc6:	68b9      	ldr	r1, [r7, #8]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 fb0b 	bl	80082e4 <ibqPostFullBufferI>
  }

  /* The endpoint cannot be busy, we are in the context of the callback,
     so a packet is in the buffer for sure. Trying to get a free buffer
     for the next transaction.*/
  (void) sdu_start_receive(sdup);
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f7ff fce0 	bl	8007694 <sdu_start_receive>

  osalSysUnlockFromISR();
 8007cd4:	f7ff fcb7 	bl	8007646 <osalSysUnlockFromISR>
}
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	70fb      	strb	r3, [r7, #3]

  (void)usbp;
  (void)ep;
}
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <port_lock.lto_priv.204>:
static inline void port_lock(void) {
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	2320      	movs	r3, #32
 8007cfc:	607b      	str	r3, [r7, #4]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f383 8811 	msr	BASEPRI, r3
}
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <port_unlock.lto_priv.200>:
static inline void port_unlock(void) {
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	2300      	movs	r3, #0
 8007d16:	607b      	str	r3, [r7, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f383 8811 	msr	BASEPRI, r3
}
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <chSysLock.lto_priv.196>:
static inline void chSysLock(void) {
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
  port_lock();
 8007d2c:	f7ff ffe2 	bl	8007cf4 <port_lock.lto_priv.204>
}
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <chSysUnlock.lto_priv.192>:
static inline void chSysUnlock(void) {
 8007d32:	b580      	push	{r7, lr}
 8007d34:	af00      	add	r7, sp, #0
  port_unlock();
 8007d36:	f7ff ffea 	bl	8007d0e <port_unlock.lto_priv.200>
}
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <osalSysLock.lto_priv.216>:
static inline void osalSysLock(void) {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0
  chSysLock();
 8007d40:	f7ff fff2 	bl	8007d28 <chSysLock.lto_priv.196>
}
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <osalSysUnlock.lto_priv.212>:
static inline void osalSysUnlock(void) {
 8007d46:	b580      	push	{r7, lr}
 8007d48:	af00      	add	r7, sp, #0
  chSysUnlock();
 8007d4a:	f7ff fff2 	bl	8007d32 <chSysUnlock.lto_priv.192>
}
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <osalThreadSuspendS>:
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 8007d58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7fa fefb 	bl	8002b58 <chThdSuspendTimeoutS>
 8007d62:	4603      	mov	r3, r0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <osalMutexObjectInit>:
 *
 * @param[out] mp       pointer to the @p mutex_t object
 *
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7fa fd77 	bl	8002868 <chMtxObjectInit>
#elif CH_CFG_USE_SEMAPHORES
  chSemObjectInit((semaphore_t *)mp, 1);
#else
 *mp = 0;
#endif
}
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <spiInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void spiInit(void) {
 8007d80:	b580      	push	{r7, lr}
 8007d82:	af00      	add	r7, sp, #0

  spi_lld_init();
 8007d84:	f7fc f9bc 	bl	8004100 <spi_lld_init>
}
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <spiObjectInit>:
 *
 * @param[out] spip     pointer to the @p SPIDriver object
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]

  spip->state = SPI_STOP;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	701a      	strb	r2, [r3, #0]
  spip->config = NULL;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	605a      	str	r2, [r3, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	609a      	str	r2, [r3, #8]
#endif
#if SPI_USE_MUTUAL_EXCLUSION == TRUE
  osalMutexObjectInit(&spip->mutex);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	330c      	adds	r3, #12
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7ff ffdf 	bl	8007d6c <osalMutexObjectInit>
#endif
#if defined(SPI_DRIVER_EXT_INIT_HOOK)
  SPI_DRIVER_EXT_INIT_HOOK(spip);
#endif
}
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]

  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
 8007dbe:	f7ff ffbd 	bl	8007d3c <osalSysLock.lto_priv.216>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	605a      	str	r2, [r3, #4]
  spi_lld_start(spip);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7fc f9bb 	bl	8004144 <spi_lld_start>
  spip->state = SPI_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	701a      	strb	r2, [r3, #0]
  osalSysUnlock();
 8007dd4:	f7ff ffb7 	bl	8007d46 <osalSysUnlock.lto_priv.212>
}
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <spiSelect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]

  osalDbgCheck(spip != NULL);

  osalSysLock();
 8007de6:	f7ff ffa9 	bl	8007d3c <osalSysLock.lto_priv.216>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiSelectI(spip);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	6852      	ldr	r2, [r2, #4]
 8007df4:	68d2      	ldr	r2, [r2, #12]
 8007df6:	2101      	movs	r1, #1
 8007df8:	fa01 f202 	lsl.w	r2, r1, r2
 8007dfc:	b292      	uxth	r2, r2
 8007dfe:	835a      	strh	r2, [r3, #26]
  osalSysUnlock();
 8007e00:	f7ff ffa1 	bl	8007d46 <osalSysUnlock.lto_priv.212>
}
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <spiUnselect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]

  osalDbgCheck(spip != NULL);

  osalSysLock();
 8007e12:	f7ff ff93 	bl	8007d3c <osalSysLock.lto_priv.216>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	6852      	ldr	r2, [r2, #4]
 8007e20:	68d2      	ldr	r2, [r2, #12]
 8007e22:	2101      	movs	r1, #1
 8007e24:	fa01 f202 	lsl.w	r2, r1, r2
 8007e28:	b292      	uxth	r2, r2
 8007e2a:	831a      	strh	r2, [r3, #24]
  osalSysUnlock();
 8007e2c:	f7ff ff8b 	bl	8007d46 <osalSysUnlock.lto_priv.212>
}
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <spiSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]
  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
 8007e42:	f7ff ff7b 	bl	8007d3c <osalSysLock.lto_priv.216>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartSendI(spip, n, txbuf);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2203      	movs	r2, #3
 8007e4a:	701a      	strb	r2, [r3, #0]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7fc fa1f 	bl	8004294 <spi_lld_send>
  (void) osalThreadSuspendS(&spip->thread);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3308      	adds	r3, #8
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff ff78 	bl	8007d50 <osalThreadSuspendS>
  osalSysUnlock();
 8007e60:	f7ff ff71 	bl	8007d46 <osalSysUnlock.lto_priv.212>
}
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <spiReceive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	607a      	str	r2, [r7, #4]
  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
 8007e76:	f7ff ff61 	bl	8007d3c <osalSysLock.lto_priv.216>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartReceiveI(spip, n, rxbuf);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2203      	movs	r2, #3
 8007e7e:	701a      	strb	r2, [r3, #0]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f7fc fa49 	bl	800431c <spi_lld_receive>
  (void) osalThreadSuspendS(&spip->thread);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff ff5e 	bl	8007d50 <osalThreadSuspendS>
  osalSysUnlock();
 8007e94:	f7ff ff57 	bl	8007d46 <osalSysUnlock.lto_priv.212>
}
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <port_lock.lto_priv.205>:
static inline void port_lock(void) {
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	2320      	movs	r3, #32
 8007ea6:	607b      	str	r3, [r7, #4]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f383 8811 	msr	BASEPRI, r3
}
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <port_unlock.lto_priv.201>:
static inline void port_unlock(void) {
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f383 8811 	msr	BASEPRI, r3
}
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <chSysLock.lto_priv.197>:
static inline void chSysLock(void) {
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	af00      	add	r7, sp, #0
  port_lock();
 8007ed6:	f7ff ffe2 	bl	8007e9e <port_lock.lto_priv.205>
}
 8007eda:	bd80      	pop	{r7, pc}

08007edc <chSysUnlock.lto_priv.193>:
static inline void chSysUnlock(void) {
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
  port_unlock();
 8007ee0:	f7ff ffea 	bl	8007eb8 <port_unlock.lto_priv.201>
}
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <osalSysLock.lto_priv.188>:
static inline void osalSysLock(void) {
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	af00      	add	r7, sp, #0
  chSysLock();
 8007eea:	f7ff fff2 	bl	8007ed2 <chSysLock.lto_priv.197>
}
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <osalSysUnlock.lto_priv.186>:
static inline void osalSysUnlock(void) {
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
  chSysUnlock();
 8007ef4:	f7ff fff2 	bl	8007edc <chSysUnlock.lto_priv.193>
}
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8007efa:	b480      	push	{r7}
 8007efc:	af00      	add	r7, sp, #0

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8007f06:	b480      	push	{r7}
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8007f12:	b480      	push	{r7}
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	e7fe      	b.n	8007f16 <__default_exit+0x4>

08007f18 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8007f1e:	4b18      	ldr	r3, [pc, #96]	; (8007f80 <__init_ram_areas+0x68>)
 8007f20:	60fb      	str	r3, [r7, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60bb      	str	r3, [r7, #8]
    uint32_t *p = rap->init_area;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	607b      	str	r3, [r7, #4]
 8007f2e:	e009      	b.n	8007f44 <__init_ram_areas+0x2c>

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
      *p = *tp;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	601a      	str	r2, [r3, #0]
      p++;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	607b      	str	r3, [r7, #4]
      tp++;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	3304      	adds	r3, #4
 8007f42:	60bb      	str	r3, [r7, #8]
    while (p < rap->clear_area) {
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d8f0      	bhi.n	8007f30 <__init_ram_areas+0x18>
 8007f4e:	e005      	b.n	8007f5c <__init_ram_areas+0x44>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	601a      	str	r2, [r3, #0]
      p++;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	607b      	str	r3, [r7, #4]
    while (p < rap->no_init_area) {
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d8f4      	bhi.n	8007f50 <__init_ram_areas+0x38>
    }
    rap++;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3310      	adds	r3, #16
 8007f6a:	60fb      	str	r3, [r7, #12]
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4a05      	ldr	r2, [pc, #20]	; (8007f84 <__init_ram_areas+0x6c>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d3d6      	bcc.n	8007f22 <__init_ram_areas+0xa>
#endif
}
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	08008cd0 	.word	0x08008cd0
 8007f84:	08008d50 	.word	0x08008d50

08007f88 <osalInit>:
static inline void osalInit(void) {
 8007f88:	b480      	push	{r7}
 8007f8a:	af00      	add	r7, sp, #0
}
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 8007f98:	f7ff fff6 	bl	8007f88 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 8007f9c:	f7fe fe9c 	bl	8006cd8 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 8007fa0:	f7fc ffd4 	bl	8004f4c <_pal_lld_init>
#endif
#if (HAL_USE_QSPI == TRUE) || defined(__DOXYGEN__)
  qspiInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 8007fa4:	f7ff faa4 	bl	80074f0 <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 8007fa8:	f7ff feea 	bl	8007d80 <spiInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 8007fac:	f7fe f82e 	bl	800600c <uartInit>
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 8007fb0:	f7fe faf2 	bl	8006598 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 8007fb4:	f7ff fca5 	bl	8007902 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8007fb8:	f7fb f86b 	bl	8003092 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8007fbc:	f000 f82d 	bl	800801a <stInit>
#endif
}
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <st_lld_start_alarm>:
 *
 * @param[in] time      the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8007fca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8007fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8007fda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fde:	2202      	movs	r2, #2
 8007fe0:	60da      	str	r2, [r3, #12]
}
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <st_lld_stop_alarm>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0

  STM32_ST_TIM->DIER = 0;
 8007ff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	60da      	str	r2, [r3, #12]
}
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <st_lld_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8008008:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 800801a:	b580      	push	{r7, lr}
 800801c:	af00      	add	r7, sp, #0

  st_lld_init();
 800801e:	f7fc fa15 	bl	800444c <st_lld_init>
}
 8008022:	bd80      	pop	{r7, pc}

08008024 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7ff ffc8 	bl	8007fc2 <st_lld_start_alarm>
}
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
 8008038:	b580      	push	{r7, lr}
 800803a:	af00      	add	r7, sp, #0

  st_lld_stop_alarm();
 800803c:	f7ff ffd6 	bl	8007fec <st_lld_stop_alarm>
}
 8008040:	bd80      	pop	{r7, pc}

08008042 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7ff ffd8 	bl	8008000 <st_lld_set_alarm>
}
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <chTimeAddX>:
                                   sysinterval_t interval) {
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
  return systime + (systime_t)interval;
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	4413      	add	r3, r2
}
 8008066:	4618      	mov	r0, r3
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <chTimeDiffX>:
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 8008072:	b480      	push	{r7}
 8008074:	b083      	sub	sp, #12
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
  return (sysinterval_t)((systime_t)(end - start));
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	1ad3      	subs	r3, r2, r3
}
 8008082:	4618      	mov	r0, r3
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <port_lock.lto_priv.241>:
static inline void port_lock(void) {
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	2320      	movs	r3, #32
 8008096:	607b      	str	r3, [r7, #4]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f383 8811 	msr	BASEPRI, r3
}
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <port_unlock.lto_priv.239>:
static inline void port_unlock(void) {
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	2300      	movs	r3, #0
 80080b0:	607b      	str	r3, [r7, #4]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f383 8811 	msr	BASEPRI, r3
}
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <st_lld_get_counter>:
static inline systime_t st_lld_get_counter(void) {
 80080c2:	b480      	push	{r7}
 80080c4:	af00      	add	r7, sp, #0
  return (systime_t)STM32_ST_TIM->CNT;
 80080c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <port_timer_get_time>:
static inline systime_t port_timer_get_time(void) {
 80080d6:	b580      	push	{r7, lr}
 80080d8:	af00      	add	r7, sp, #0
  return stGetCounter();
 80080da:	f7ff fff2 	bl	80080c2 <st_lld_get_counter>
 80080de:	4603      	mov	r3, r0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <queue_init.lto_priv.237>:
static inline void queue_init(threads_queue_t *tqp) {
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  tqp->next = (thread_t *)tqp;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	605a      	str	r2, [r3, #4]
}
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <chSysLock.lto_priv.235>:
static inline void chSysLock(void) {
 8008102:	b580      	push	{r7, lr}
 8008104:	af00      	add	r7, sp, #0
  port_lock();
 8008106:	f7ff ffc2 	bl	800808e <port_lock.lto_priv.241>
}
 800810a:	bd80      	pop	{r7, pc}

0800810c <chSysUnlock.lto_priv.233>:
static inline void chSysUnlock(void) {
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
  port_unlock();
 8008110:	f7ff ffca 	bl	80080a8 <port_unlock.lto_priv.239>
}
 8008114:	bd80      	pop	{r7, pc}

08008116 <chVTGetSystemTimeX>:
static inline systime_t chVTGetSystemTimeX(void) {
 8008116:	b580      	push	{r7, lr}
 8008118:	af00      	add	r7, sp, #0
  return port_timer_get_time();
 800811a:	f7ff ffdc 	bl	80080d6 <port_timer_get_time>
 800811e:	4603      	mov	r3, r0
}
 8008120:	4618      	mov	r0, r3
 8008122:	bd80      	pop	{r7, pc}

08008124 <chThdQueueObjectInit.lto_priv.231>:
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  queue_init(tqp);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff ffd9 	bl	80080e4 <queue_init.lto_priv.237>
}
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <osalSysLock>:
static inline void osalSysLock(void) {
 8008138:	b580      	push	{r7, lr}
 800813a:	af00      	add	r7, sp, #0
  chSysLock();
 800813c:	f7ff ffe1 	bl	8008102 <chSysLock.lto_priv.235>
}
 8008140:	bd80      	pop	{r7, pc}

08008142 <osalSysUnlock>:
static inline void osalSysUnlock(void) {
 8008142:	b580      	push	{r7, lr}
 8008144:	af00      	add	r7, sp, #0
  chSysUnlock();
 8008146:	f7ff ffe1 	bl	800810c <chSysUnlock.lto_priv.233>
}
 800814a:	bd80      	pop	{r7, pc}

0800814c <osalOsGetSystemTimeX>:
static inline systime_t osalOsGetSystemTimeX(void) {
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  return chVTGetSystemTimeX();
 8008150:	f7ff ffe1 	bl	8008116 <chVTGetSystemTimeX>
 8008154:	4603      	mov	r3, r0
}
 8008156:	4618      	mov	r0, r3
 8008158:	bd80      	pop	{r7, pc}

0800815a <osalTimeAddX>:
                                     sysinterval_t interval) {
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
  return chTimeAddX(systime, interval);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff ff75 	bl	8008056 <chTimeAddX>
 800816c:	4603      	mov	r3, r0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <osalTimeDiffX>:
static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	6039      	str	r1, [r7, #0]
  return chTimeDiffX(start, end);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7ff ff75 	bl	8008072 <chTimeDiffX>
 8008188:	4603      	mov	r3, r0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <osalThreadQueueObjectInit>:
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 8008192:	b580      	push	{r7, lr}
 8008194:	b082      	sub	sp, #8
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  chThdQueueObjectInit(tqp);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7ff ffc2 	bl	8008124 <chThdQueueObjectInit.lto_priv.231>
}
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <osalThreadEnqueueTimeoutS>:
                                              sysinterval_t timeout) {
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	6039      	str	r1, [r7, #0]
  return chThdEnqueueTimeoutS(tqp, timeout);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7fa fd06 	bl	8002bc4 <chThdEnqueueTimeoutS>
 80081b8:	4603      	mov	r3, r0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <osalThreadDequeueNextI>:
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b082      	sub	sp, #8
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
  chThdDequeueNextI(tqp, msg);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7fa fd14 	bl	8002bfc <chThdDequeueNextI>
}
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <osalThreadDequeueAllI>:
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]
  chThdDequeueAllI(tqp, msg);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7fa fd1a 	bl	8002c20 <chThdDequeueAllI>
}
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <ibqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t infy, void *link) {
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	603b      	str	r3, [r7, #0]
 80081fe:	460b      	mov	r3, r1
 8008200:	72fb      	strb	r3, [r7, #11]

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff ffc4 	bl	8008192 <osalThreadQueueObjectInit>
  ibqp->suspended = suspended;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	7afa      	ldrb	r2, [r7, #11]
 800820e:	721a      	strb	r2, [r3, #8]
  ibqp->bcounter  = 0;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	60da      	str	r2, [r3, #12]
  ibqp->brdptr    = bp;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	615a      	str	r2, [r3, #20]
  ibqp->bwrptr    = bp;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	611a      	str	r2, [r3, #16]
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	3304      	adds	r3, #4
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	fb02 f303 	mul.w	r3, r2, r3
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	441a      	add	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	619a      	str	r2, [r3, #24]
  ibqp->bsize     = size + sizeof (size_t);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	1d1a      	adds	r2, r3, #4
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	61da      	str	r2, [r3, #28]
  ibqp->bn        = n;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	621a      	str	r2, [r3, #32]
  ibqp->buffers   = bp;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	625a      	str	r2, [r3, #36]	; 0x24
  ibqp->ptr       = NULL;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	629a      	str	r2, [r3, #40]	; 0x28
  ibqp->top       = NULL;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	62da      	str	r2, [r3, #44]	; 0x2c
  ibqp->notify    = infy;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	69fa      	ldr	r2, [r7, #28]
 8008258:	631a      	str	r2, [r3, #48]	; 0x30
  ibqp->link      = link;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6a3a      	ldr	r2, [r7, #32]
 800825e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <ibqResetI>:
 *
 * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 *
 * @iclass
 */
void ibqResetI(input_buffers_queue_t *ibqp) {
 8008266:	b580      	push	{r7, lr}
 8008268:	b082      	sub	sp, #8
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassI();

  ibqp->bcounter  = 0;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	60da      	str	r2, [r3, #12]
  ibqp->brdptr    = ibqp->buffers;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	615a      	str	r2, [r3, #20]
  ibqp->bwrptr    = ibqp->buffers;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	611a      	str	r2, [r3, #16]
  ibqp->ptr       = NULL;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	629a      	str	r2, [r3, #40]	; 0x28
  ibqp->top       = NULL;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	62da      	str	r2, [r3, #44]	; 0x2c
  osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f06f 0101 	mvn.w	r1, #1
 8008296:	4618      	mov	r0, r3
 8008298:	f7ff ff9f 	bl	80081da <osalThreadDequeueAllI>
}
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <ibqGetEmptyBufferI>:
 * @return              A pointer to the next buffer to be filled.
 * @retval NULL         if the queue is full.
 *
 * @iclass
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691a      	ldr	r2, [r3, #16]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d105      	bne.n	80082c2 <ibqGetEmptyBufferI+0x20>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <ibqGetEmptyBufferI+0x20>
 80082be:	2301      	movs	r3, #1
 80082c0:	e000      	b.n	80082c4 <ibqGetEmptyBufferI+0x22>
 80082c2:	2300      	movs	r3, #0
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <ibqGetEmptyBufferI+0x30>
    return NULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	e002      	b.n	80082d8 <ibqGetEmptyBufferI+0x36>
  }

  return ibqp->bwrptr + sizeof (size_t);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	3304      	adds	r3, #4
}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <ibqPostFullBufferI>:
 * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @iclass
 */
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	601a      	str	r2, [r3, #0]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	60da      	str	r2, [r3, #12]
  ibqp->bwrptr += ibqp->bsize;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691a      	ldr	r2, [r3, #16]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	69db      	ldr	r3, [r3, #28]
 8008308:	441a      	add	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	611a      	str	r2, [r3, #16]
  if (ibqp->bwrptr >= ibqp->btop) {
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	691a      	ldr	r2, [r3, #16]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	429a      	cmp	r2, r3
 8008318:	d303      	bcc.n	8008322 <ibqPostFullBufferI+0x3e>
    ibqp->bwrptr = ibqp->buffers;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	611a      	str	r2, [r3, #16]
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2100      	movs	r1, #0
 8008326:	4618      	mov	r0, r3
 8008328:	f7ff ff4b 	bl	80081c2 <osalThreadDequeueNextI>
}
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <ibqGetFullBufferTimeoutS>:
   *                      suspended state.
   *
   * @sclass
   */
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 sysinterval_t timeout) {
 8008332:	b580      	push	{r7, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
 800833c:	e011      	b.n	8008362 <ibqGetFullBufferTimeoutS+0x30>

  osalDbgCheckClassS();

  while (ibqIsEmptyI(ibqp)) {
    if (ibqp->suspended) {
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	7a1b      	ldrb	r3, [r3, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <ibqGetFullBufferTimeoutS+0x1a>
      return MSG_RESET;
 8008346:	f06f 0301 	mvn.w	r3, #1
 800834a:	e01c      	b.n	8008386 <ibqGetFullBufferTimeoutS+0x54>
    }
    msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff ff28 	bl	80081a6 <osalThreadEnqueueTimeoutS>
 8008356:	60f8      	str	r0, [r7, #12]
    if (msg < MSG_OK) {
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	da01      	bge.n	8008362 <ibqGetFullBufferTimeoutS+0x30>
       return msg;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	e011      	b.n	8008386 <ibqGetFullBufferTimeoutS+0x54>
  while (ibqIsEmptyI(ibqp)) {
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0e9      	beq.n	800833e <ibqGetFullBufferTimeoutS+0xc>
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	1d1a      	adds	r2, r3, #4
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	629a      	str	r2, [r3, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	441a      	add	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	62da      	str	r2, [r3, #44]	; 0x2c

  return MSG_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <ibqReleaseEmptyBufferS>:
   *
   * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
   *
   * @sclass
   */
  void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 800838e:	b580      	push	{r7, lr}
 8008390:	b082      	sub	sp, #8
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	1e5a      	subs	r2, r3, #1
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	60da      	str	r2, [r3, #12]
  ibqp->brdptr += ibqp->bsize;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	695a      	ldr	r2, [r3, #20]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	441a      	add	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	615a      	str	r2, [r3, #20]
  if (ibqp->brdptr >= ibqp->btop) {
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695a      	ldr	r2, [r3, #20]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d303      	bcc.n	80083c2 <ibqReleaseEmptyBufferS+0x34>
    ibqp->brdptr = ibqp->buffers;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	615a      	str	r2, [r3, #20]
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <ibqReleaseEmptyBufferS+0x4a>
    ibqp->notify(ibqp);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	4798      	blx	r3
  }
}
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <ibqGetTimeout>:
 * @retval MSG_RESET    if the queue has been reset or has been put in
 *                      suspended state.
 *
 * @api
 */
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
  msg_t msg;

  osalSysLock();
 80083e8:	f7ff fea6 	bl	8008138 <osalSysLock>

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10b      	bne.n	800840c <ibqGetTimeout+0x2e>
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7ff ff9b 	bl	8008332 <ibqGetFullBufferTimeoutS>
 80083fc:	60f8      	str	r0, [r7, #12]
    if (msg != MSG_OK) {
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <ibqGetTimeout+0x2e>
      osalSysUnlock();
 8008404:	f7ff fe9d 	bl	8008142 <osalSysUnlock>
      return msg;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	e014      	b.n	8008436 <ibqGetTimeout+0x58>
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	60fb      	str	r3, [r7, #12]
  ibqp->ptr++;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	629a      	str	r2, [r3, #40]	; 0x28

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008426:	429a      	cmp	r2, r3
 8008428:	d302      	bcc.n	8008430 <ibqGetTimeout+0x52>
    ibqReleaseEmptyBufferS(ibqp);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff ffaf 	bl	800838e <ibqReleaseEmptyBufferS>
  }

  osalSysUnlock();
 8008430:	f7ff fe87 	bl	8008142 <osalSysUnlock>
  return msg;
 8008434:	68fb      	ldr	r3, [r7, #12]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <ibqReadTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 800843e:	b580      	push	{r7, lr}
 8008440:	b08a      	sub	sp, #40	; 0x28
 8008442:	af00      	add	r7, sp, #0
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	607a      	str	r2, [r7, #4]
 800844a:	603b      	str	r3, [r7, #0]
  size_t r = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	627b      	str	r3, [r7, #36]	; 0x24
  systime_t deadline;

  osalDbgCheck(n > 0U);

  osalSysLock();
 8008450:	f7ff fe72 	bl	8008138 <osalSysLock>

  /* Time window for the whole operation.*/
  deadline = osalTimeAddX(osalOsGetSystemTimeX(), timeout);
 8008454:	f7ff fe7a 	bl	800814c <osalOsGetSystemTimeX>
 8008458:	4603      	mov	r3, r0
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	4618      	mov	r0, r3
 800845e:	f7ff fe7c 	bl	800815a <osalTimeAddX>
 8008462:	61b8      	str	r0, [r7, #24]

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008468:	2b00      	cmp	r3, #0
 800846a:	d128      	bne.n	80084be <ibqReadTimeout+0x80>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008472:	d002      	beq.n	800847a <ibqReadTimeout+0x3c>
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d105      	bne.n	8008486 <ibqReadTimeout+0x48>
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f7ff ff58 	bl	8008332 <ibqGetFullBufferTimeoutS>
 8008482:	61f8      	str	r0, [r7, #28]
 8008484:	e014      	b.n	80084b0 <ibqReadTimeout+0x72>
      }
      else {
        sysinterval_t next_timeout = osalTimeDiffX(osalOsGetSystemTimeX(),
 8008486:	f7ff fe61 	bl	800814c <osalOsGetSystemTimeX>
 800848a:	4603      	mov	r3, r0
 800848c:	69b9      	ldr	r1, [r7, #24]
 800848e:	4618      	mov	r0, r3
 8008490:	f7ff fe71 	bl	8008176 <osalTimeDiffX>
 8008494:	6178      	str	r0, [r7, #20]
                                                   deadline);

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d903      	bls.n	80084a6 <ibqReadTimeout+0x68>
          osalSysUnlock();
 800849e:	f7ff fe50 	bl	8008142 <osalSysUnlock>
          return r;
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	e05c      	b.n	8008560 <ibqReadTimeout+0x122>
        }
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 80084a6:	6979      	ldr	r1, [r7, #20]
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f7ff ff42 	bl	8008332 <ibqGetFullBufferTimeoutS>
 80084ae:	61f8      	str	r0, [r7, #28]
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <ibqReadTimeout+0x80>
        osalSysUnlock();
 80084b6:	f7ff fe44 	bl	8008142 <osalSysUnlock>
        return r;
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	e050      	b.n	8008560 <ibqReadTimeout+0x122>
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c2:	461a      	mov	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	623b      	str	r3, [r7, #32]
    if (size > (n - r)) {
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	1ad2      	subs	r2, r2, r3
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d203      	bcs.n	80084e0 <ibqReadTimeout+0xa2>
      size = n - r;
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	623b      	str	r3, [r7, #32]
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	2b40      	cmp	r3, #64	; 0x40
 80084e4:	d913      	bls.n	800850e <ibqReadTimeout+0xd0>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ea:	2240      	movs	r2, #64	; 0x40
 80084ec:	4619      	mov	r1, r3
 80084ee:	68b8      	ldr	r0, [r7, #8]
 80084f0:	f000 fbda 	bl	8008ca8 <memcpy>
      bp        += 64U;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	3340      	adds	r3, #64	; 0x40
 80084f8:	60bb      	str	r3, [r7, #8]
      ibqp->ptr += 64U;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fe:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	629a      	str	r2, [r3, #40]	; 0x28
      r         += 64U;
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	3340      	adds	r3, #64	; 0x40
 800850a:	627b      	str	r3, [r7, #36]	; 0x24
 800850c:	e014      	b.n	8008538 <ibqReadTimeout+0xfa>
    }
    else {
      memcpy(bp, ibqp->ptr, size);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008512:	6a3a      	ldr	r2, [r7, #32]
 8008514:	4619      	mov	r1, r3
 8008516:	68b8      	ldr	r0, [r7, #8]
 8008518:	f000 fbc6 	bl	8008ca8 <memcpy>
      bp        += size;
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	4413      	add	r3, r2
 8008522:	60bb      	str	r3, [r7, #8]
      ibqp->ptr += size;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	441a      	add	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	629a      	str	r2, [r3, #40]	; 0x28
      r         += size;
 8008530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	4413      	add	r3, r2
 8008536:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008540:	429a      	cmp	r2, r3
 8008542:	d302      	bcc.n	800854a <ibqReadTimeout+0x10c>
      ibqReleaseEmptyBufferS(ibqp);
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f7ff ff22 	bl	800838e <ibqReleaseEmptyBufferS>
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
 800854a:	f7ff fdfa 	bl	8008142 <osalSysUnlock>
    if (r >= n) {
 800854e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	429a      	cmp	r2, r3
 8008554:	d301      	bcc.n	800855a <ibqReadTimeout+0x11c>
      return r;
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	e002      	b.n	8008560 <ibqReadTimeout+0x122>
    }
    osalSysLock();
 800855a:	f7ff fded 	bl	8008138 <osalSysLock>
 800855e:	e781      	b.n	8008464 <ibqReadTimeout+0x26>
  }
}
 8008560:	4618      	mov	r0, r3
 8008562:	3728      	adds	r7, #40	; 0x28
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <obqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
                   size_t size, size_t n, bqnotify_t onfy, void *link) {
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	607a      	str	r2, [r7, #4]
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	460b      	mov	r3, r1
 8008576:	72fb      	strb	r3, [r7, #11]

  osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&obqp->waiting);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff fe09 	bl	8008192 <osalThreadQueueObjectInit>
  obqp->suspended = suspended;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	7afa      	ldrb	r2, [r7, #11]
 8008584:	721a      	strb	r2, [r3, #8]
  obqp->bcounter  = n;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	60da      	str	r2, [r3, #12]
  obqp->brdptr    = bp;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	615a      	str	r2, [r3, #20]
  obqp->bwrptr    = bp;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	611a      	str	r2, [r3, #16]
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	3304      	adds	r3, #4
 800859c:	69ba      	ldr	r2, [r7, #24]
 800859e:	fb02 f303 	mul.w	r3, r2, r3
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	441a      	add	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	619a      	str	r2, [r3, #24]
  obqp->bsize     = size + sizeof (size_t);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	1d1a      	adds	r2, r3, #4
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	61da      	str	r2, [r3, #28]
  obqp->bn        = n;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	621a      	str	r2, [r3, #32]
  obqp->buffers   = bp;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	625a      	str	r2, [r3, #36]	; 0x24
  obqp->ptr       = NULL;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	629a      	str	r2, [r3, #40]	; 0x28
  obqp->top       = NULL;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	62da      	str	r2, [r3, #44]	; 0x2c
  obqp->notify    = onfy;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	69fa      	ldr	r2, [r7, #28]
 80085ce:	631a      	str	r2, [r3, #48]	; 0x30
  obqp->link      = link;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6a3a      	ldr	r2, [r7, #32]
 80085d4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <obqResetI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqResetI(output_buffers_queue_t *obqp) {
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassI();

  obqp->bcounter  = bqSizeX(obqp);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a1a      	ldr	r2, [r3, #32]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	60da      	str	r2, [r3, #12]
  obqp->brdptr    = obqp->buffers;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	615a      	str	r2, [r3, #20]
  obqp->bwrptr    = obqp->buffers;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	611a      	str	r2, [r3, #16]
  obqp->ptr       = NULL;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	629a      	str	r2, [r3, #40]	; 0x28
  obqp->top       = NULL;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	62da      	str	r2, [r3, #44]	; 0x2c
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f06f 0101 	mvn.w	r1, #1
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff fde3 	bl	80081da <osalThreadDequeueAllI>
}
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	691a      	ldr	r2, [r3, #16]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	429a      	cmp	r2, r3
 800862e:	d105      	bne.n	800863c <obqGetFullBufferI+0x22>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <obqGetFullBufferI+0x22>
 8008638:	2301      	movs	r3, #1
 800863a:	e000      	b.n	800863e <obqGetFullBufferI+0x24>
 800863c:	2300      	movs	r3, #0
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <obqGetFullBufferI+0x32>
    return NULL;
 8008648:	2300      	movs	r3, #0
 800864a:	e007      	b.n	800865c <obqGetFullBufferI+0x42>
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	601a      	str	r2, [r3, #0]

  return obqp->brdptr + sizeof (size_t);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	3304      	adds	r3, #4
}
 800865c:	4618      	mov	r0, r3
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <obqReleaseEmptyBufferI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	60da      	str	r2, [r3, #12]
  obqp->brdptr += obqp->bsize;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	695a      	ldr	r2, [r3, #20]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	441a      	add	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	615a      	str	r2, [r3, #20]
  if (obqp->brdptr >= obqp->btop) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	695a      	ldr	r2, [r3, #20]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	429a      	cmp	r2, r3
 8008692:	d303      	bcc.n	800869c <obqReleaseEmptyBufferI+0x34>
    obqp->brdptr = obqp->buffers;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	615a      	str	r2, [r3, #20]
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2100      	movs	r1, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff fd8e 	bl	80081c2 <osalThreadDequeueNextI>
}
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <obqGetEmptyBufferTimeoutS>:
 *                      suspended state.
 *
 * @sclass
 */
msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                sysinterval_t timeout) {
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
 80086b6:	e011      	b.n	80086dc <obqGetEmptyBufferTimeoutS+0x30>

  osalDbgCheckClassS();

  while (obqIsFullI(obqp)) {
    if (obqp->suspended) {
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	7a1b      	ldrb	r3, [r3, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <obqGetEmptyBufferTimeoutS+0x1a>
      return MSG_RESET;
 80086c0:	f06f 0301 	mvn.w	r3, #1
 80086c4:	e01b      	b.n	80086fe <obqGetEmptyBufferTimeoutS+0x52>
    }
    msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7ff fd6b 	bl	80081a6 <osalThreadEnqueueTimeoutS>
 80086d0:	60f8      	str	r0, [r7, #12]
    if (msg < MSG_OK) {
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	da01      	bge.n	80086dc <obqGetEmptyBufferTimeoutS+0x30>
      return msg;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	e010      	b.n	80086fe <obqGetEmptyBufferTimeoutS+0x52>
  while (obqIsFullI(obqp)) {
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0e9      	beq.n	80086b8 <obqGetEmptyBufferTimeoutS+0xc>
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	1d1a      	adds	r2, r3, #4
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	629a      	str	r2, [r3, #40]	; 0x28
  obqp->top = obqp->bwrptr + obqp->bsize;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691a      	ldr	r2, [r3, #16]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	441a      	add	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	62da      	str	r2, [r3, #44]	; 0x2c

  return MSG_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <obqPostFullBufferS>:
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @sclass
 */
void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	601a      	str	r2, [r3, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	1e5a      	subs	r2, r3, #1
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	60da      	str	r2, [r3, #12]
  obqp->bwrptr += obqp->bsize;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	691a      	ldr	r2, [r3, #16]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	441a      	add	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	611a      	str	r2, [r3, #16]
  if (obqp->bwrptr >= obqp->btop) {
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	691a      	ldr	r2, [r3, #16]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	429a      	cmp	r2, r3
 800873a:	d303      	bcc.n	8008744 <obqPostFullBufferS+0x3e>
    obqp->bwrptr = obqp->buffers;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	611a      	str	r2, [r3, #16]
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	629a      	str	r2, [r3, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <obqPostFullBufferS+0x54>
    obqp->notify(obqp);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	4798      	blx	r3
  }
}
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <obqPutTimeout>:
 *                      suspended state.
 *
 * @api
 */
msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
                    sysinterval_t timeout) {
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	460b      	mov	r3, r1
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	72fb      	strb	r3, [r7, #11]
  msg_t msg;

  osalSysLock();
 800876e:	f7ff fce3 	bl	8008138 <osalSysLock>

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10b      	bne.n	8008792 <obqPutTimeout+0x32>
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f7ff ff95 	bl	80086ac <obqGetEmptyBufferTimeoutS>
 8008782:	6178      	str	r0, [r7, #20]
    if (msg != MSG_OK) {
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <obqPutTimeout+0x32>
      osalSysUnlock();
 800878a:	f7ff fcda 	bl	8008142 <osalSysUnlock>
      return msg;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	e018      	b.n	80087c4 <obqPutTimeout+0x64>
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008796:	7afa      	ldrb	r2, [r7, #11]
 8008798:	701a      	strb	r2, [r3, #0]
  obqp->ptr++;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d306      	bcc.n	80087be <obqPutTimeout+0x5e>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	3b04      	subs	r3, #4
 80087b6:	4619      	mov	r1, r3
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff ffa4 	bl	8008706 <obqPostFullBufferS>
  }

  osalSysUnlock();
 80087be:	f7ff fcc0 	bl	8008142 <osalSysUnlock>
  return MSG_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, sysinterval_t timeout) {
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08a      	sub	sp, #40	; 0x28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
  size_t w = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
  systime_t deadline;

  osalDbgCheck(n > 0U);

  osalSysLock();
 80087de:	f7ff fcab 	bl	8008138 <osalSysLock>

  /* Time window for the whole operation.*/
  deadline = osalTimeAddX(osalOsGetSystemTimeX(), timeout);
 80087e2:	f7ff fcb3 	bl	800814c <osalOsGetSystemTimeX>
 80087e6:	4603      	mov	r3, r0
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7ff fcb5 	bl	800815a <osalTimeAddX>
 80087f0:	61b8      	str	r0, [r7, #24]

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d128      	bne.n	800884c <obqWriteTimeout+0x80>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008800:	d002      	beq.n	8008808 <obqWriteTimeout+0x3c>
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d105      	bne.n	8008814 <obqWriteTimeout+0x48>
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f7ff ff4e 	bl	80086ac <obqGetEmptyBufferTimeoutS>
 8008810:	61f8      	str	r0, [r7, #28]
 8008812:	e014      	b.n	800883e <obqWriteTimeout+0x72>
      }
      else {
        sysinterval_t next_timeout = osalTimeDiffX(osalOsGetSystemTimeX(),
 8008814:	f7ff fc9a 	bl	800814c <osalOsGetSystemTimeX>
 8008818:	4603      	mov	r3, r0
 800881a:	69b9      	ldr	r1, [r7, #24]
 800881c:	4618      	mov	r0, r3
 800881e:	f7ff fcaa 	bl	8008176 <osalTimeDiffX>
 8008822:	6178      	str	r0, [r7, #20]
                                                   deadline);

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d903      	bls.n	8008834 <obqWriteTimeout+0x68>
          osalSysUnlock();
 800882c:	f7ff fc89 	bl	8008142 <osalSysUnlock>
          return w;
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	e060      	b.n	80088f6 <obqWriteTimeout+0x12a>
        }
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 8008834:	6979      	ldr	r1, [r7, #20]
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f7ff ff38 	bl	80086ac <obqGetEmptyBufferTimeoutS>
 800883c:	61f8      	str	r0, [r7, #28]
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <obqWriteTimeout+0x80>
        osalSysUnlock();
 8008844:	f7ff fc7d 	bl	8008142 <osalSysUnlock>
        return w;
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	e054      	b.n	80088f6 <obqWriteTimeout+0x12a>
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008850:	461a      	mov	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	623b      	str	r3, [r7, #32]
    if (size > (n - w)) {
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	1ad2      	subs	r2, r2, r3
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	429a      	cmp	r2, r3
 8008864:	d203      	bcs.n	800886e <obqWriteTimeout+0xa2>
      size = n - w;
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	623b      	str	r3, [r7, #32]
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	2b40      	cmp	r3, #64	; 0x40
 8008872:	d913      	bls.n	800889c <obqWriteTimeout+0xd0>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008878:	2240      	movs	r2, #64	; 0x40
 800887a:	68b9      	ldr	r1, [r7, #8]
 800887c:	4618      	mov	r0, r3
 800887e:	f000 fa13 	bl	8008ca8 <memcpy>
      bp        += 64U;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	3340      	adds	r3, #64	; 0x40
 8008886:	60bb      	str	r3, [r7, #8]
      obqp->ptr += 64U;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	629a      	str	r2, [r3, #40]	; 0x28
      w         += 64U;
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	3340      	adds	r3, #64	; 0x40
 8008898:	627b      	str	r3, [r7, #36]	; 0x24
 800889a:	e014      	b.n	80088c6 <obqWriteTimeout+0xfa>
    }
    else {
      memcpy(obqp->ptr, bp, size);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a0:	6a3a      	ldr	r2, [r7, #32]
 80088a2:	68b9      	ldr	r1, [r7, #8]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 f9ff 	bl	8008ca8 <memcpy>
      bp        += size;
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	4413      	add	r3, r2
 80088b0:	60bb      	str	r3, [r7, #8]
      obqp->ptr += size;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	441a      	add	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	629a      	str	r2, [r3, #40]	; 0x28
      w         += size;
 80088be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	4413      	add	r3, r2
 80088c4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d306      	bcc.n	80088e0 <obqWriteTimeout+0x114>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	3b04      	subs	r3, #4
 80088d8:	4619      	mov	r1, r3
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f7ff ff13 	bl	8008706 <obqPostFullBufferS>
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
 80088e0:	f7ff fc2f 	bl	8008142 <osalSysUnlock>
    if (w >= n) {
 80088e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d301      	bcc.n	80088f0 <obqWriteTimeout+0x124>
      return w;
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	e002      	b.n	80088f6 <obqWriteTimeout+0x12a>
    }
    osalSysLock();
 80088f0:	f7ff fc22 	bl	8008138 <osalSysLock>
 80088f4:	e77d      	b.n	80087f2 <obqWriteTimeout+0x26>
  }
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3728      	adds	r7, #40	; 0x28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <obqTryFlushI>:
 * @retval false        if no new filled buffer has been posted to the queue.
 * @retval true         if a new filled buffer has been posted to the queue.
 *
 * @iclass
 */
bool obqTryFlushI(output_buffers_queue_t *obqp) {
 80088fe:	b480      	push	{r7}
 8008900:	b085      	sub	sp, #20
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	691a      	ldr	r2, [r3, #16]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	429a      	cmp	r2, r3
 8008910:	d105      	bne.n	800891e <obqTryFlushI+0x20>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <obqTryFlushI+0x20>
 800891a:	2301      	movs	r3, #1
 800891c:	e000      	b.n	8008920 <obqTryFlushI+0x22>
 800891e:	2300      	movs	r3, #0
 8008920:	f003 0301 	and.w	r3, r3, #1
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d02d      	beq.n	8008986 <obqTryFlushI+0x88>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892e:	2b00      	cmp	r3, #0
 8008930:	d029      	beq.n	8008986 <obqTryFlushI+0x88>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008936:	461a      	mov	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	3b04      	subs	r3, #4
 8008940:	60fb      	str	r3, [r7, #12]

    if (size > 0U) {
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01e      	beq.n	8008986 <obqTryFlushI+0x88>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	1e5a      	subs	r2, r3, #1
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	60da      	str	r2, [r3, #12]
      obqp->bwrptr += obqp->bsize;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	691a      	ldr	r2, [r3, #16]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	441a      	add	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	611a      	str	r2, [r3, #16]
      if (obqp->bwrptr >= obqp->btop) {
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	429a      	cmp	r2, r3
 8008972:	d303      	bcc.n	800897c <obqTryFlushI+0x7e>
        obqp->bwrptr = obqp->buffers;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	611a      	str	r2, [r3, #16]
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	629a      	str	r2, [r3, #40]	; 0x28

      return true;
 8008982:	2301      	movs	r3, #1
 8008984:	e000      	b.n	8008988 <obqTryFlushI+0x8a>
    }
  }
  return false;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <port_lock.lto_priv.242>:
static inline void port_lock(void) {
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	2320      	movs	r3, #32
 800899c:	607b      	str	r3, [r7, #4]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f383 8811 	msr	BASEPRI, r3
}
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <port_unlock.lto_priv.240>:
static inline void port_unlock(void) {
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	2300      	movs	r3, #0
 80089b6:	607b      	str	r3, [r7, #4]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f383 8811 	msr	BASEPRI, r3
}
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <queue_init.lto_priv.238>:
static inline void queue_init(threads_queue_t *tqp) {
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  tqp->next = (thread_t *)tqp;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	605a      	str	r2, [r3, #4]
}
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <chSysLock.lto_priv.236>:
static inline void chSysLock(void) {
 80089e6:	b580      	push	{r7, lr}
 80089e8:	af00      	add	r7, sp, #0
  port_lock();
 80089ea:	f7ff ffd3 	bl	8008994 <port_lock.lto_priv.242>
}
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <chSysUnlock.lto_priv.234>:
static inline void chSysUnlock(void) {
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
  port_unlock();
 80089f4:	f7ff ffdb 	bl	80089ae <port_unlock.lto_priv.240>
}
 80089f8:	bd80      	pop	{r7, pc}

080089fa <chThdQueueObjectInit.lto_priv.232>:
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  queue_init(tqp);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7ff ffe0 	bl	80089c8 <queue_init.lto_priv.238>
}
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <osalSysLock.lto_priv.213>:
static inline void osalSysLock(void) {
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	af00      	add	r7, sp, #0
  chSysLock();
 8008a12:	f7ff ffe8 	bl	80089e6 <chSysLock.lto_priv.236>
}
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <osalSysUnlock.lto_priv.209>:
static inline void osalSysUnlock(void) {
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0
  chSysUnlock();
 8008a1c:	f7ff ffe8 	bl	80089f0 <chSysUnlock.lto_priv.234>
}
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <osalThreadQueueObjectInit.lto_priv.229>:
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b082      	sub	sp, #8
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  chThdQueueObjectInit(tqp);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7ff ffe5 	bl	80089fa <chThdQueueObjectInit.lto_priv.232>
}
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <osalThreadEnqueueTimeoutS.lto_priv.226>:
                                              sysinterval_t timeout) {
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b082      	sub	sp, #8
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	6039      	str	r1, [r7, #0]
  return chThdEnqueueTimeoutS(tqp, timeout);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7fa f8be 	bl	8002bc4 <chThdEnqueueTimeoutS>
 8008a48:	4603      	mov	r3, r0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <osalThreadDequeueNextI.lto_priv.228>:
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b082      	sub	sp, #8
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	6039      	str	r1, [r7, #0]
  chThdDequeueNextI(tqp, msg);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7fa f8cc 	bl	8002bfc <chThdDequeueNextI>
}
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <iq_read.lto_priv.230>:
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b086      	sub	sp, #24
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	60f8      	str	r0, [r7, #12]
 8008a72:	60b9      	str	r1, [r7, #8]
 8008a74:	607a      	str	r2, [r7, #4]
  if (n > iqGetFullI(iqp)) {
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	689a      	ldr	r2, [r3, #8]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d202      	bcs.n	8008a86 <iq_read.lto_priv.230+0x1c>
    n = iqGetFullI(iqp);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	607b      	str	r3, [r7, #4]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	617b      	str	r3, [r7, #20]
  if (n < s1) {
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d20d      	bcs.n	8008ab8 <iq_read.lto_priv.230+0x4e>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	68b8      	ldr	r0, [r7, #8]
 8008aa6:	f000 f8ff 	bl	8008ca8 <memcpy>
    iqp->q_rdptr += n;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	699a      	ldr	r2, [r3, #24]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	441a      	add	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	619a      	str	r2, [r3, #24]
 8008ab6:	e02b      	b.n	8008b10 <iq_read.lto_priv.230+0xa6>
  else if (n > s1) {
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d91c      	bls.n	8008afa <iq_read.lto_priv.230+0x90>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	68b8      	ldr	r0, [r7, #8]
 8008aca:	f000 f8ed 	bl	8008ca8 <memcpy>
    bp += s1;
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	60bb      	str	r3, [r7, #8]
    s2 = n - s1;
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	613b      	str	r3, [r7, #16]
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	68b8      	ldr	r0, [r7, #8]
 8008ae8:	f000 f8de 	bl	8008ca8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	68da      	ldr	r2, [r3, #12]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	441a      	add	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	619a      	str	r2, [r3, #24]
 8008af8:	e00a      	b.n	8008b10 <iq_read.lto_priv.230+0xa6>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	4619      	mov	r1, r3
 8008b02:	68b8      	ldr	r0, [r7, #8]
 8008b04:	f000 f8d0 	bl	8008ca8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	68da      	ldr	r2, [r3, #12]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	619a      	str	r2, [r3, #24]
  iqp->q_counter -= n;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	1ad2      	subs	r2, r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	609a      	str	r2, [r3, #8]
  return n;
 8008b1c:	687b      	ldr	r3, [r7, #4]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <oq_write.lto_priv.227>:
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b086      	sub	sp, #24
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	60f8      	str	r0, [r7, #12]
 8008b2e:	60b9      	str	r1, [r7, #8]
 8008b30:	607a      	str	r2, [r7, #4]
  if (n > oqGetEmptyI(oqp)) {
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	689a      	ldr	r2, [r3, #8]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d202      	bcs.n	8008b42 <oq_write.lto_priv.227+0x1c>
    n = oqGetEmptyI(oqp);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	607b      	str	r3, [r7, #4]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	461a      	mov	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	617b      	str	r3, [r7, #20]
  if (n < s1) {
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d20d      	bcs.n	8008b74 <oq_write.lto_priv.227+0x4e>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	68b9      	ldr	r1, [r7, #8]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 f8a1 	bl	8008ca8 <memcpy>
    oqp->q_wrptr += n;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	695a      	ldr	r2, [r3, #20]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	441a      	add	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	615a      	str	r2, [r3, #20]
 8008b72:	e02b      	b.n	8008bcc <oq_write.lto_priv.227+0xa6>
  else if (n > s1) {
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d91c      	bls.n	8008bb6 <oq_write.lto_priv.227+0x90>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	68b9      	ldr	r1, [r7, #8]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 f88f 	bl	8008ca8 <memcpy>
    bp += s1;
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	4413      	add	r3, r2
 8008b90:	60bb      	str	r3, [r7, #8]
    s2 = n - s1;
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	613b      	str	r3, [r7, #16]
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 f880 	bl	8008ca8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	68da      	ldr	r2, [r3, #12]
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	441a      	add	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	615a      	str	r2, [r3, #20]
 8008bb4:	e00a      	b.n	8008bcc <oq_write.lto_priv.227+0xa6>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	68b9      	ldr	r1, [r7, #8]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 f872 	bl	8008ca8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	615a      	str	r2, [r3, #20]
  oqp->q_counter -= n;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	689a      	ldr	r2, [r3, #8]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	1ad2      	subs	r2, r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	609a      	str	r2, [r3, #8]
  return n;
 8008bd8:	687b      	ldr	r3, [r7, #4]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <iqObjectInit>:
                  qnotify_t infy, void *link) {
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	607a      	str	r2, [r7, #4]
 8008bee:	603b      	str	r3, [r7, #0]
  osalThreadQueueObjectInit(&iqp->q_waiting);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff ff15 	bl	8008a22 <osalThreadQueueObjectInit.lto_priv.229>
  iqp->q_counter = 0;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	441a      	add	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	621a      	str	r2, [r3, #32]
}
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <iqPutI>:
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	70fb      	strb	r3, [r7, #3]
  if (!iqIsFullI(iqp)) {
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	695a      	ldr	r2, [r3, #20]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d105      	bne.n	8008c50 <iqPutI+0x24>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d001      	beq.n	8008c50 <iqPutI+0x24>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e000      	b.n	8008c52 <iqPutI+0x26>
 8008c50:	2300      	movs	r3, #0
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	f083 0301 	eor.w	r3, r3, #1
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d01c      	beq.n	8008c9c <iqPutI+0x70>
    iqp->q_counter++;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	609a      	str	r2, [r3, #8]
    *iqp->q_wrptr++ = b;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	1c59      	adds	r1, r3, #1
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	6151      	str	r1, [r2, #20]
 8008c76:	78fa      	ldrb	r2, [r7, #3]
 8008c78:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	695a      	ldr	r2, [r3, #20]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d303      	bcc.n	8008c8e <iqPutI+0x62>
      iqp->q_wrptr = iqp->q_buffer;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68da      	ldr	r2, [r3, #12]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	615a      	str	r2, [r3, #20]
    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2100      	movs	r1, #0
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7ff fedd 	bl	8008a52 <osalThreadDequeueNextI.lto_priv.228>
    return MSG_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e001      	b.n	8008ca0 <iqPutI+0x74>
  return MSG_TIMEOUT;
 8008c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <memcpy>:
 8008ca8:	b510      	push	{r4, lr}
 8008caa:	1e43      	subs	r3, r0, #1
 8008cac:	440a      	add	r2, r1
 8008cae:	4291      	cmp	r1, r2
 8008cb0:	d100      	bne.n	8008cb4 <memcpy+0xc>
 8008cb2:	bd10      	pop	{r4, pc}
 8008cb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cbc:	e7f7      	b.n	8008cae <memcpy+0x6>

08008cbe <memset>:
 8008cbe:	4402      	add	r2, r0
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d100      	bne.n	8008cc8 <memset+0xa>
 8008cc6:	4770      	bx	lr
 8008cc8:	f803 1b01 	strb.w	r1, [r3], #1
 8008ccc:	e7f9      	b.n	8008cc2 <memset+0x4>
